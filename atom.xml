<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>向志洪</title>
  <subtitle>个人技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xiangzhihong.com/"/>
  <updated>2017-09-30T01:53:59.466Z</updated>
  <id>http://www.xiangzhihong.com/</id>
  
  <author>
    <name>xiangzhihong</name>
    <email>1044817967@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>58 同城 iOS 客户端 iOS11 及 iPhone X 适配实践</title>
    <link href="http://www.xiangzhihong.com/2017/09/13/%E7%BE%8E%E5%9B%A2iphone%20x%E7%95%99%E6%B5%B7%E9%80%82%E9%85%8D/"/>
    <id>http://www.xiangzhihong.com/2017/09/13/美团iphone x留海适配/</id>
    <published>2017-09-12T16:00:00.000Z</published>
    <updated>2017-09-30T01:53:59.466Z</updated>
    
    <content type="html"><![CDATA[<p>一、前言</p>
<p>前段时间 WWDC 大会上苹果推出了 iOS11 系统 和 iPhone X 新机型，相信各个 iOS 团队的开发者都已经在计划新系统和新机型的适配工作了。不得不说，新系统和新机型的发布确实是给 iOS 开发者带来了不小的工作量，因此有必要将 58 同城 iOS 客户端适配过程中遇到的问题跟大家分享一下。</p>
<p>二、iOS 11 UIKit</p>
<p>在适配 iOS 11 之前，我们首先要弄清楚 iOS 11 做了哪些改动，哪些改动会对我们现有的应用产生影响，这样有助于我们分析现象。建议大家看下 WWDC 的官方视频，视频中提到了如何适配 iOS 11 及如何设计和适配 iPhoneX 新机型：</p>
<p>Updating Your App for iOS 11<br>Building Apps for iPhone X<br>Designing for iPhone X</p>
<ol>
<li>UIKit’sBars</li>
</ol>
<p>图 1 UIKit’sBar 提供 size 的方法截图<br>iOS11 UIKit’sBar 改动很大，对现有的应用来说 UINavigationBar 的 titleView 适配应该是最大的问题，LargeTitle 虽然看起来似乎是很大的改动，但是实际上对现有的应用没有太多的影响。iOS11 之后 UINavigationBar 和 UIToolbar 支持 Auto Layout ，开发者必须要提供自定义视图的 size。如果自定义 titleView 中使用了 Auto Layout，那么通过设置自定义 titleView 的 frame 的方式来设定 size 在某些场景下可能就不再合适了，开发者应该着重注意下自定义 view 内部的约束（具体案例将在下文中阐述）。如图 1 所示，我们可以通过以下三种方式来提供 size：</p>
<p>约束自身宽高；<br>实现 intrinsicContentSize 方法；<br>利用子视图宽高及间距来约束 titleView；</p>
<ol>
<li>UIScrollView</li>
</ol>
<p>图 2 安全区域示意图<br>iOS11 引入了安全区域的概念，默认情况下安全区域是指 NavigationBar 以下 TabBar 以上的区域（iPhoneX 则不包括底部的虚拟 Home 区域），也就是说 StatusBar、NavigationBar、TabBar、虚拟 Home 都不是安全区域（可参见图 2）。为了帮助开发者判断各个 view 与安全区域的距离关系，iOS11 在 UIView 加入了一个属性：</p>
<p>需要注意的是这个属性是描述 view 与页面安全区域的距离关系，如果 view 的某个方向超过了安全区域则这个方向的数值为正数，如果 view 完全在安全区域内则 safeAreaInsets 的值全为 0。如在图 3 所示一个空白页面中。</p>
<p>图3 安全区域测试图<br>红、蓝 view 是父子视图的关系，且蓝色子视图完全在红色视图内，由于红、蓝两个 view 顶部超过安全区域 44 点（状态栏 44 高度），所以它们的 safeAreaInsets 都为 {44, 0, 0, 0}，也就是说在同一个控制器中，他们的安全区域是一致的，与视图层级无关。在一个控制器中，安全区域并不是固定不变的，可以通过 ViewController 的 additionalSafeAreaInsets 方法来修改页面的安全区域，如果此时将安全区域上延 11 个点。</p>
<p>那么它们的 safeAreaInsets 都会变为 {33, 0, 0, 0}。</p>
<p>我们再来看 UIScrollView 新增加的两个很重要的属性：</p>
<p>iOS 11 中 adjustedContentInset 是用来调整 scrollView 内容边距的属性，这个属性实际上是 contentInset 和 safeAreaInsets 在各个方向上的加和，即 contentInset+safeAreaInsets。contentInsetAdjustmentBehavior 是控制采取何种策略来控制调整边距的属性，默认为 UIScrollViewContentInsetAdjustmentAutomatic。在 iOS 11 之前，控制是否自动调整内边距的属性是 UIViewController 的 automaticallyAdjustsScrollViewInsets，但是这个属性现在已经废弃，取而代之的是 UIScrollView 的 contentInsetAdjustmentBehavior 。contentInsetAdjustmentBehavior 共有四种设置，如图 4 所示：</p>
<p>图 4 contentInsetAdjustmentBehavior<br>如果 UIScrollView 需要调整内容边距则加上安全区域的偏移，即 adjustedContentInset = contentInset+safeAreaInsets，如果不调整则 safeAreaInsets 不参与到计算中，即 adjustedContentInset = contentInset。简而言之，contentInsetAdjustmentBehavior 就是告诉 UIScrollView 在计算 adjustedContentInset 时要不要加上 safeAreaInsets。</p>
<ol>
<li>UITableView</li>
</ol>
<p>UITableView 除了继承自 UIScrollView 的特性外，还有自身 API 的变动。新系统中，UITableView 开启了估算行高，estimatedRowHeight、 estimatedSectionHeaderHeight、estimatedSectionFooterHeight 不再默认是 0，而是 UITableViewAutomaticDimension（这个值打印输出是 -1），这一举措旨在帮助开发者提高性能，减少 heightForRowAtIndexPath: 方法的的调用次数，但是这样会导致 API 执行顺序发生变化。在没有开启估算行高之前 tableView 总是先执行：</p>
<p>再执行</p>
<p>API 调用顺序如图 5 所示：</p>
<p>图 5 关闭预估高度方法执行顺序打印<br>而开启估算行高之后 tableView 会先执行：</p>
<p>再执行：</p>
<p>方法调用次数减少且调用顺序变为如图 6 所示：</p>
<p>图 6 开启预估高度方法执行顺序打印<br>由此可见：</p>
<p>的调用次数大大减少。但是如果开发者实现：</p>
<p>方法，那么无论是否关闭 estimatedRowHeight，API 的调用顺序和调用次数都是一样的，如图 7 所示。</p>
<p>图 7 实现预估高度方法后方法执行顺序打印<br>因此我们要注意新系统中 API 执行顺序和执行次数的变化。</p>
<p>除此之外我们还应该注意在开启预估高度tableView.estimatedSectionHeaderHeight = UITableViewAutomaticDimension; 的情况下，如果不实现</p>
<p>和</p>
<p>那么</p>
<p>和</p>
<p>是不会被执行的。</p>
<p>三、58 同城的实战经历</p>
<p>适配 iPhoneX 首先要添加一个 1125x2436 的启动图，否则会在屏幕的上方和下方留下两道黑框。在适配开始前先简单介绍下 58 同城 iOS 客户端的页面结构，因为页面结构不同可能遇到的问题会不尽相同。58 同城 iOS 客户端的 key window 的 rootViewController 是一个导航控制器，而不是 UITabBarController。导航控制器的 rootViewController 是一个 UITabBarController 样式（非 UITabBarController）的 ViewController。了解了应用的结构之后，下面介绍下 58 同城 iOS 客户端适配过程中遇到的比较典型的问题：</p>
<ol>
<li>首页</li>
</ol>
<p>先看下适配之前的首页，如图 8 所示：</p>
<p>图 8 适配前首页图<br>适配前，首页主要存在的问题有 3 个：</p>
<p>顶部的天气与状态栏有重叠；<br>首页的动画默认已经进行了一部分；<br>底部的 tabBar 在非安全区域内。<br>先看问题 1，产生问题 1 的原因是由于 iPhoneX 的状态栏高度产生了变化，由 20 变成了 44，天气组件的位置没有预留出新增的 24 点，导致与状态栏重叠。解决的办法是对顶部 view 进行重新布局约束，根据机型来判断是够需要增加 24 点。机型的判断由于没有真机验证，我们无法准确地获取到设备名称，因此暂时采用设备高度来判断机型。如果屏幕高度为 812，则暂时可以认为是 iPhoneX：</p>
<p>问题 2 的原因是 tableView 的安全区域的引起的。由于首页 tableView 的 contentInsetAdjustmentBehavior 默认为 UIScrollViewContentInsetAdjustmentAutomatic， 在隐藏导航栏的情况下 tableView 的内容偏移为安全区域的 44 点，因此 tableView 自动偏移了 44 点，看起来像动画进行了一半。解决方法是将 contentInsetAdjustmentBehavior 设置为 never 忽略安全区域偏移。</p>
<p>问题 3 的原因是 iPhoneX 新增了 34 点高度的虚拟 home 区域替代了 home 实体键。虚拟 home 区域并不是安全区域，因此需要在 iPhoneX 的机型上，屏幕底部预留出 34 点高度。</p>
<p>适配后首页在 iPhoneX 上的效果如图 9：</p>
<p>图 9 适配后首页图</p>
<ol>
<li>列表</li>
</ol>
<p>在适配过程中，我们发现在二手物品列表，上拉加载数据时底部自定义的 tabBar 会来回反复地进行显示隐藏，tabBar 为下图蓝框内区域，如图 10 所示：</p>
<p>图 10 带有 tab 的列表图<br>经过排查我们发现 tableView 的 contentOffset 在有新的内容被添加进来的时候会产生跳动，如：不断上拉的一个列表，列表的 contentOffset 的 Y 值会不断增大，如果上拉过程中触发网络请求添加了新的内容到列表中，那么列表的 contentOffset 会产生一个跳动。如图 11 所示，在 contentOffset 的 Y 值为 9000 左右的时候列表新增了一页数据，导致 contentOffset 的 Y 值变为 3000 左右。</p>
<p>图 11 上拉加载更多时 scrollView 的偏移量 Y 值打印图<br>当下拉返回顶部时，contentOffset 的 Y 值会产生一系列不连续的跳动，如当前 contentOffset 的 Y 值为 3600，下拉后变为 3500 左右然后又变为 3600 左右，如图 12 打印所示：</p>
<p>图 12 下拉返回时 scrollView 的偏移量 Y 值打印图<br>如果利用 contentOffset 的 Y 值变化判断滑动方向的话，那么现在会判断为方向时而向上时而向下，导致底部的 tabBar 反复隐藏显示。</p>
<p>问题根本原因是由于</p>
<p>方法中获取 aScrollView 的偏移量会存在跳动的现象。具体的解决办法与各自的实现逻辑有较强的关联，在此不进行详细阐述。</p>
<ol>
<li>IM</li>
</ol>
<p>在使用 iOS11 beta 版时我们发现 IM 会话页的很多消息都变成了未识别消息类型，图 13 中左侧为适配前效果，右侧为适配后效果：</p>
<p>图 13 IM 会话页适配前后对比图<br>当消息滑出屏幕再滑回来时消息才被正确解析出来。最开始以为是 Xcode9 beta 版的 bug，因为只有 Xcode 9 打包安装的应用才会出现这种问题，而通过 Xcode8 正式版打包后安装到 iOS11 的手机上并不会出现这种问题。不过随着 beta 版的不断稳定，这种现象并没有随之消失，因此我们觉得有必要查看下消息不识别的具体原因。经过排查后我们发现，异常情况出现的原 l 因是由于 tableView 没有取到可重用的 cell，代码如图 14：</p>
<p>图 14 tableView 获取 Cell 的方法图<br>会话页将未取到 cell 作为一种异常情况进行了处理，处理方式是将这种情况当做未识别消息展示，处理逻辑如图 15 所示：</p>
<p>图 15 IM 会话列表异常处理代码<br>经过分析，取不到 cell 很有可能是因为 cell 没有被注册，而之前代码中注册 cell 的逻辑在</p>
<p>方法中。由于 iOS11 默认开启了 estimatedRowHeight，导致</p>
<p>方法先执行，</p>
<p>后执行，因此 cell 没有被注册成功，代码走进了异常处理逻辑。为了尽量不修改之前的业务逻辑，我们采用的适配方式的将估算高度关闭。</p>
<p>除此之外，IM 还存在适配安全区域的问题。未适配之前，IM 会话页面的输入框在 iPhoneX 的非安全区域内，见图 16 标注区域。</p>
<p>图 16 IM 会话页底部输入未适配前图<br>因此页面的底部需要设置 34 点的边距。iPhoneX 与其他手机很明显的不同就是键盘的高度，iPhoneX 的键盘高度为 333，这个键盘是从屏幕底部抬起并跨过了底部的虚拟 home 区域，键盘在安全区域内的高度为（333-34）。因此在监听键盘的事件中要注意对抬起高度的处理，以 IM 会话页为例，在非 iPhoneX 手机上输入框会上升 keyboardHeight 的高度，但是在 iPhoneX 上则只需要上升 keyboardHeight-34 点的高度。在 iPhoneX 手机上我们要格外注意键盘高度和安全区域结合带来的潜在问题。</p>
<ol>
<li>发布</li>
</ol>
<p>在适配发布页面的时候，我们发现小区搜索页面的 titleView 在 iOS11 手机上变得很小，没有完全展开，效果如图 17 所示：</p>
<p>图 17 小区选择未适配前图<br>图 16 中的导航栏的 titleView 是 WBPUBSearchBar 类型的。由于自定义的 WBPUBSearchBar 是原来是通过 initWithFrame: 来创建并指明宽高的，WBPUBSearchBar 内部布局是依赖 Masonry 的，但是布局并没有设置 textFiled 和 button 的宽度，仅仅指明了 textFiled 和 button 各自的左右间距。在此情况下，自定义的 titleView 无法依赖内部子视图的约束得到正确的宽度，因此 titleView 的宽度并不正确。因此需要实现方法：</p>
<p>向外界提供自身的 size。当然除了实现 intrinsicContentSize 方法外也可以通过添加自身约束的方式来设置自身的正确合理的 size。</p>
<ol>
<li>视频</li>
</ol>
<p>58 同城的二手房详情页支持视频展示房源，当全屏播放视频的时候会导致虚拟 home 条遮挡住视频内容，适配前视频全屏播放效果如图 18。</p>
<p>图 18 房源视频全屏播放图<br>由于在播放视频的时候有交互较少，苹果允许开发者在当前页面隐藏虚拟 home 条。因此可以在视频播放控制器中实现下述方法来隐藏虚拟 home 条：</p>
<p>在适当时机刷新虚拟 home。</p>
<p>实现 prefersHomeIndicatorAutoHidden 方法,返回是否需要隐藏虚拟 home。</p>
<p>当用户触碰屏幕时虚拟 home 会再次出现。这样就可以解决横屏虚拟 home 遮挡屏幕的问题。</p>
<ol>
<li>宠物</li>
</ol>
<p>在使用 iOS11 beta 版时我们发现导航栏的自定义返回按钮距离屏幕左侧过远。这种情况只有在 Xcode9 编译时才会出现，Xcode8 编译打包在 iOS11 beta 的手机上运行并不会出现这种问题。对比导航栏的视图层级结构我们发现导航栏的层级做了很大的变动。</p>
<p>图 19 iOS 11 前导航栏层级结构和实际展示图</p>
<p>图 20 iOS11 导航栏层级结构和实际展示图<br>在 iOS11 下设置 UIBarButtonItem 时，系统新增了 _UINavigationBarContentView 和 _UIButtonBarStackView 两层 View，新增的两层 frame 是有偏移的，而且布局采用的是约束方式。因此需要遍历层级找到 _UIButtonBarStackView 这层视图并修改它与 _UINavigationBarContentView 间的约束，修改约束的时机放自定义导航控制器的在 viewDidLayoutSubviews 方法中。修改约束关键代码如图 21 所示：</p>
<p>图 21 修改约束关键代码<br>四、总结</p>
<p>总结一下，58 同城 iOS 客户端在适配过程中遇到了以下问题：</p>
<p>由于安全区域的引入，引起了 UIScrollView 的偏移。安全区域引起的 UIScrollView 偏移导致的问题非常多，文中仅仅以首页为例向大家展示了 58 同城的解决方式。当然，解决方式有很多种，只要了解问题的原因，那么解决方式可以根据自己的场景自由决定。文中没有提及 RN 和 web 的适配方式，主要原因是 RN 和 web 的适配方式与 Native 的适配方式类似，最主要的工作仍然是适配安全区域。</p>
<p>tableView 的变化总体而言还是很大的，因此需要我们仔细观察现象排查代码。</p>
<p>对于导航栏的适配，我们应该注意 titleView 的内部约束，返回按钮的适配需要注意的是修改约束的时机。</p>
<p>键盘抬起本身并不会引起适配问题，但是涉及到安全区域的适配可能就会导致 UI 处理不正确。</p>
<p>开发者应该根据场景来控制虚拟 home 的显示和隐藏。</p>
<p>以上是 58 同城 iOS 客户端在适配过程中遇到的问题。当然，实际适配过程中遇到的问题远比文中描述的多，且情况要更为复杂。文中只是列出了一些比较典型的问题，希望对读者有所帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、前言&lt;/p&gt;
&lt;p&gt;前段时间 WWDC 大会上苹果推出了 iOS11 系统 和 iPhone X 新机型，相信各个 iOS 团队的开发者都已经在计划新系统和新机型的适配工作了。不得不说，新系统和新机型的发布确实是给 iOS 开发者带来了不小的工作量，因此有必要将 58 
    
    </summary>
    
      <category term="iOS" scheme="http://www.xiangzhihong.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://www.xiangzhihong.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Scala入门</title>
    <link href="http://www.xiangzhihong.com/2017/08/11/Scala%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.xiangzhihong.com/2017/08/11/Scala入门笔记/</id>
    <published>2017-08-10T16:00:00.000Z</published>
    <updated>2017-09-30T02:13:43.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scala入门"><a href="#Scala入门" class="headerlink" title="Scala入门"></a>Scala入门</h1><h2 id="Scala简介"><a href="#Scala简介" class="headerlink" title="Scala简介"></a>Scala简介</h2><p>ps：在最新的薪资调查中，Scala程序员的工资是平均最高的<a href="https://yq.aliyun.com/roundtable/57909?spm=5176.8091938.0.0.020PfH" target="_blank" rel="external">Scala工资</a>。<br>Scala是一门多范式的编程语言，一种类似java的编程语言，设计初衷是实现可伸缩的语言 、并集成面向对象编程和函数式编程的各种特性。Scala的官网地址为：<a href="http://www.Scala-lang.org/" target="_blank" rel="external">http://www.Scala-lang.org/</a><br>Scala有几项关键特性表明了它的面向对象的本质。例如，Scala中的每个值都是一个对象，包括基本数据类型（即布尔值、数字等）在内，连函数也是对象。另外，类可以被子类化，而且Scala还提供了基于mixin的组合（mixin-based composition）。与只支持单继承的语言相比，Scala具有更广泛意义上的类重用。Scala还包含了若干函数式语言的关键概念，包括高阶函数（Higher-Order Function）、局部套用（Currying）、嵌套函数（Nested Function）、序列解读（Sequence Comprehensions）等等。</p>
<p>Scala运行于Java平台（Java虚拟机），并兼容现有的Java程序。它也能运行于Java ME, CLDC（Java Platform, Micro Edition Connected Limited Device Configuration）上。还有另一.NET平台的实现，不过该版本更新有些滞后。Scala的编译模型（独立编译，动态类加载）与Java和C#一样，所以Scala代码可以调用Java类库（对于.NET实现则可调用.NET类库）。Scala包中包含了编译器和类库，以BSD许可证发布。</p>
<h2 id="Scala发展历史"><a href="#Scala发展历史" class="headerlink" title="Scala发展历史"></a>Scala发展历史</h2><ol>
<li>联邦理工学院洛桑（EPFL）的Martin Odersky于2001年基于Funnel的工作开始设计Scala。Funnel是把函数式编程思想和Petri网相结合的一种编程语言。Odersky先前的工作是Generic Java和javac（Sun Java编译器）。Java平台的Scala于2003年底/2004年初发布。.NET平台的Scala发布于2004年6月。该语言第二个版本，v2.0，发布于2006年3月。</li>
<li>截至2009年9月，最新版本是版本2.7.6。Scala 2.8预计的特性包括重写的Scala类库（Scala collections library）、方法的命名参数和默认参数、包对象（package object），以及Continuation.</li>
<li>2009年4月，Twitter宣布他们已经把大部分后端程序从Ruby迁移到Scala，其余部分也打算要迁移。此外，Wattzon已经公开宣称，其整个平台都已经是基于Scala基础设施编写的。</li>
</ol>
<h2 id="Scale语言特点"><a href="#Scale语言特点" class="headerlink" title="Scale语言特点"></a>Scale语言特点</h2><p><strong>快速实验</strong>:  Scala有交互式命令行(REPL),可以在上面快速的试各种语法和代码。这对学习新特性，或者实验新想法非常有用。</p>
<p><strong>一致性</strong>:  尽管Scala融合了静态类型系统、面向对象、函数式编程等语言特性，但却很少能看出融合的痕迹。Scala是我见到融合最多语言特性而又不显得杂乱的编程语言之一。</p>
<p><strong>类型安全</strong>： Scala创始人是教授，他先带领创建了java 5编译器，而后觉得Java有太多羁绊而发明了Scala。Scala编译器和类型系统非常强大，它的目标是尽量把软件错误消灭在编写过程中。Scala类型系统是图灵完备的，甚至可以在编译期间解决问题。</p>
<p><strong>面向对象</strong>:  Scala是面向对象的编程语言，所有的变量和方法都封装在对象中，可以把信息封装起来供外部使用。</p>
<p><strong>函数式编程</strong>： Scala同时又是函数式编程语言，函数可以独立存在，可以定义一个函数作为另一个函数的返回值，也可以接受函数作为函数的参数。这给组合函数带来了很大的便利。如何把面向对象编程形容成搭积木的话，函数式编程就像拼线条，更灵活和更有创意。</p>
<p><strong>异步编程</strong>:  由于函数式编程提倡变量不可变，使异步编程变得非常容易。同时Scala提供的Future，和akka类库，使得异步编程变得非常容易。</p>
<p><strong>基于JVM</strong>:  Scala会被编译成为jvm bytecode,所以Scala能无缝集成已有的Java类库。你可以非常自然的使用已经存在的非常庞大且稳定的Java类库，比如小巧好用的apache.common.*,或者Java上的各种工具类库。</p>
<p><strong>静态类型</strong>:  Scala是具备类型系统，通过编译时的检查，保证代码的安全性和一致性。类型系统具体支持以下特性：泛型类，型变注释（Variance Annotation），类型继承结构的上限和下限，把类别和抽象类型作为对象成员，复合类型，引用自己时显式指定类型，视图，多态方法。</p>
<p><strong>扩展性</strong>:  Scala的设计承认一个事实，即在实践中，某个领域特定的应用程序开发往往需要特定于该领域的语言扩展。Scala提供了许多独特的语言机制，可以以库的形式轻易无缝添加新的语言结构：任何方法可用作前缀或后缀操作符，可以根据预期类型自动构造闭包。联合使用以上两个特性，使你可以定义新的语句而无须扩展语法也无须使用宏之类的元编程特性。</p>
<p>其他特定：更高层的并发模型Actor、轻量级的函数语法、高阶、嵌套、局部套用（Currying）、与Java无缝地互操作</p>
<p>因为如此众多特性，用Scala可以优雅地编写简洁的代码，同时又能减少很多低级错误；能快速进行开发，又能保证系统性能、团队协作和长期维护。Scala的风格和特性已经吸引了大量的开发者。总而言之，Scala是一种函数式面向对象语言，它融汇了许多前所未有的特性，而同时又运行于JVM之上。随着开发者对Scala的兴趣日增，以及越来越多的工具支持，无疑Scala语言将成为你手上一件必不可少的工具。</p>
<h1 id="Scala语法"><a href="#Scala语法" class="headerlink" title="Scala语法"></a>Scala语法</h1><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>构造函数不是特殊的方法，他们是除了类的方法定义之外的代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class MyClass(x: Int, y: Int) &#123;           // Defines a new type MyClass with a constructor  </div><div class="line">  require(y &gt; 0, &quot;y must be positive&quot;)    // precondition, triggering an IllegalArgumentException if not met  </div><div class="line">  def this (x: Int) = &#123; ... &#125;             // auxiliary constructor   </div><div class="line">  def nb1 = x                             // public method computed every time it is called  </div><div class="line">  def nb2 = y  </div><div class="line">  private def test(a: Int): Int = &#123; ... &#125; // private method  </div><div class="line">  val nb3 = x + y                         // computed only once  </div><div class="line">  override def toString =                 // overridden method  </div><div class="line">      member1 + &quot;, &quot; + member2 </div><div class="line">  &#125;</div><div class="line"></div><div class="line">new MyClass(1, 2) // creates a new object of type</div></pre></td></tr></table></figure>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承和Java的语法类似。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">abstract class TopLevel &#123;     // abstract class  </div><div class="line">  def method1(x: Int): Int   // abstract method  </div><div class="line">  def method2(x: Int): Int = &#123; ... &#125;  </div><div class="line">&#125;</div><div class="line"></div><div class="line">class Level1 extends TopLevel &#123;  </div><div class="line">  def method1(x: Int): Int = &#123; ... &#125;  </div><div class="line">  override def method2(x: Int): Int = &#123; ...&#125; // TopLevel&apos;s method2 needs to be explicitly overridden  </div><div class="line">&#125;</div><div class="line"></div><div class="line">object MyObject extends TopLevel &#123; ... &#125; // defines a singleton object. No other instance can be created</div></pre></td></tr></table></figure></p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Scala 定义了两种类型的变量val和var，val类似于Java中的final变量，一旦初始化之后，不可以重新赋值。而var类似于一般的非final变量，可以任意重新赋值。<br>例如，定义一个字符串常变量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; val msg=&quot;Hello,World&quot;</div><div class="line">msg:String= Hello,World</div></pre></td></tr></table></figure>
<p>可以看到我们在定义这个变量时并不需要像Java一样定义其类型，Scala 可以根据赋值的内容推算出变量的类型。此外Scala语句也不需要以分号结尾。 如果在命令行中需要分多行输入，Scala解释器在新行前面显示|，表示该行接着上一行。例如，上面的代码可以改为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; val msg3=    </div><div class="line"></div><div class="line">           |&quot;Hello world 3rd time&quot;</div><div class="line"></div><div class="line">msg3:String= Hello world 3rd time</div></pre></td></tr></table></figure>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>scala类型系统以Any为根，分为AnyRef和AnyVal 两个分支体系，在AnyRef分支的最底层，有个Null类型的特殊类型，它被当作是所有AnyRef类型的子类型。更进一步在两个分支共同的最底层类型是Nothing类型，它被当作所有AnyRef和AnyVal类型的子类型。</p>
<h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>Scala的数值类型包含：</p>
<ul>
<li>Byte 1字节</li>
<li>Short 2</li>
<li>Int 4</li>
<li>Long 8</li>
<li>Foat</li>
<li>Double<br> 高精度类型 a = 低精度类型 b (同c自动转换)<br>低精度类型 b = 高精度类型 a (error :type mismatch)<h3 id="Boolen-类型"><a href="#Boolen-类型" class="headerlink" title="Boolen 类型"></a>Boolen 类型</h3></li>
<li>false</li>
<li>true</li>
</ul>
<h3 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a>Null类型</h3><p>Null类型只有一个唯一的值：null，可以被赋给所有的AnyRef类型变量List(Null,Null,1)</p>
<h2 id="Block代码块"><a href="#Block代码块" class="headerlink" title="Block代码块"></a>Block代码块</h2><p>Block 也是一个表达式,其最终的求得的值是最后一个表达式的结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;exp1;exp2&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">exp1</div><div class="line">exp2</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>第五步使用while来实现循环，和使用Java实现无太大差异，而Scala是面向函数的语言，更好的方法是采用“函数式”风格来编写代码。比如使用foreach方法来实现循环，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">args.foreach(arg =&gt; println(arg))</div></pre></td></tr></table></figure>
<p>该表达式，调用args的foreach方法，传入一个参数，这个参数类型也是一个函数（lambda表达式，和C#中概念类似）。这段代码可以再写的精简些，你可以利用Scala支持的缩写形式，如果一个函数只有一个参数并且只包含一个表达式，那么你无需明确指明参数。因此，上面的表达式还可以简写为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">args.foreach( println)</div></pre></td></tr></table></figure>
<p>而Scala的for循环比Java更加强大，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">for( a &lt;- 1 to 10)&#123; </div><div class="line">         println( &quot;Value of a: &quot; + a );</div><div class="line">         </div><div class="line">//或者</div><div class="line">// for loop execution with a range</div><div class="line">for( a &lt;- 1 until 10)&#123; </div><div class="line">       println( &quot;Value of a: &quot; + a );      &#125;</div></pre></td></tr></table></figure>
<h3 id="while-和-do-while"><a href="#while-和-do-while" class="headerlink" title="while 和 do while"></a>while 和 do while</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var a = 10;</div><div class="line">     // while loop execution</div><div class="line">      while( a &lt; 20 )&#123;</div><div class="line">         println( &quot;Value of a: &quot; + a ); </div><div class="line">         a = a + 1;&#125;</div><div class="line"> // do loop execution</div><div class="line">do &#123;        </div><div class="line">        println( &quot;Value of a: &quot; + a );</div><div class="line">         a = a + 1;</div><div class="line">      &#125;</div><div class="line">      while( a &lt; 20 )   &#125;</div></pre></td></tr></table></figure>
<h2 id="match表达式"><a href="#match表达式" class="headerlink" title="match表达式"></a>match表达式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">val alice = new Person(&quot;Alice&quot;, 25)</div><div class="line">val bob = new Person(&quot;Bob&quot;, 32)</div><div class="line">val charlie = new Person(&quot;Charlie&quot;, 32)</div><div class="line">for (person &lt;- List(alice, bob, charlie)) &#123;</div><div class="line"></div><div class="line">         person match &#123; </div><div class="line">            case Person(&quot;Alice&quot;, 25) =&gt; println(&quot;Hi Alice!&quot;)</div><div class="line">            case Person(&quot;Bob&quot;, 32) =&gt; println(&quot;Hi Bob!&quot;) </div><div class="line">            case Person(name, age) =&gt; println(</div><div class="line">               &quot;Age: &quot; + age + &quot; year, name: &quot; + name + &quot;?&quot;)</div><div class="line">         &#125;</div><div class="line">      &#125; </div><div class="line">   &#125;</div><div class="line">#这个类是特殊的用以比较的类</div><div class="line">case class Person(name: String, age: Int)</div><div class="line">&gt;&gt;&gt;</div><div class="line">Hi Alice!</div><div class="line">Hi Bob! </div><div class="line">Age: 32 year, name: Charlie?</div></pre></td></tr></table></figure>
<h2 id="Traits"><a href="#Traits" class="headerlink" title="Traits"></a>Traits</h2><p>是一些字段和行为的集合，可以扩展或混入（mixin）你的类中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">trait Car &#123;</div><div class="line">  val brand: String</div><div class="line">&#125;</div><div class="line"></div><div class="line">trait Shiny &#123;</div><div class="line">  val shineRefraction: Int</div><div class="line">&#125;</div><div class="line">class BMW extends Car &#123;</div><div class="line">  val brand = &quot;BMW&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过with关键字，一个类可以扩展多个特质：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class BMW extends Car with Shiny &#123;</div><div class="line">  val brand = &quot;BMW&quot;</div><div class="line">  val shineRefraction = 12</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">object IdFactory &#123;</div><div class="line">  private var counter = 0</div><div class="line">  def create(): Int = &#123;</div><div class="line">    counter += 1</div><div class="line">    counter</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">//获取单例实例</div><div class="line">val newId: Int = IdFactory.create()</div><div class="line">println(newId) // 1</div></pre></td></tr></table></figure>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>Scala语言的一个特点是支持面向函数编程，因此学习Scala的一个重要方面是改变之前的指令式编程思想（尤其是来自Java或C#背景的程序员），观念要向函数式编程转变。首先在看代码上要认识哪种是指令编程，哪种是函数式编程。一个简单的原则，如果代码中含有var类型的变量，这段代码就是传统的指令式编程，如果代码只有val变量，这段代码就很有可能是函数式代码，因此学会函数式编程关键是不使用vars来编写代码。更多Scala的知识请访问<a href="http://www.Scala-lang.org/" target="_blank" rel="external">官网</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Scala入门&quot;&gt;&lt;a href=&quot;#Scala入门&quot; class=&quot;headerlink&quot; title=&quot;Scala入门&quot;&gt;&lt;/a&gt;Scala入门&lt;/h1&gt;&lt;h2 id=&quot;Scala简介&quot;&gt;&lt;a href=&quot;#Scala简介&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="后端" scheme="http://www.xiangzhihong.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://www.xiangzhihong.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Android热修复技术总结</title>
    <link href="http://www.xiangzhihong.com/2017/08/05/Android%E7%83%AD%E4%BF%AE%E5%A4%8D%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    <id>http://www.xiangzhihong.com/2017/08/05/Android热修复技术总结/</id>
    <published>2017-08-04T16:00:00.000Z</published>
    <updated>2017-09-30T02:15:11.902Z</updated>
    
    <content type="html"><![CDATA[<p>插件化和热修复技术是Android开发中比较高级的知识点，是中级开发人员通向高级开发中必须掌握的技能，插件化的知识可以查我我之前的介绍：<a href="http://blog.csdn.net/xiangzhihong8/article/details/52876440" target="_blank" rel="external">Android插件化</a>。本篇重点讲解热修复，并对当前流行的热修复技术做一个简单的总结。</p>
<h1 id="热修复"><a href="#热修复" class="headerlink" title="热修复"></a>热修复</h1><h3 id="什么是热修复？"><a href="#什么是热修复？" class="headerlink" title="什么是热修复？"></a>什么是热修复？</h3><p>简单来讲，为了修复线上问题而提出的修补方案，程序修补过程无需重新发版！</p>
<h3 id="技术背景"><a href="#技术背景" class="headerlink" title="技术背景"></a>技术背景</h3><p>在正常软件开发流程中，线下开发-&gt;上线-&gt;发现bug-&gt;紧急修复上线。不过对于这种方式代价太大。<br><img src="http://img.blog.csdn.net/20170830150512155?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>而热修复的开发流程显得更加灵活，无需重新发版，实时高效热修复，无需下载新的应用，代价小，最重要的是及时的修复了bug。<br><img src="http://img.blog.csdn.net/20170830150614435?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h3 id="当前热门的热修复技术"><a href="#当前热门的热修复技术" class="headerlink" title="当前热门的热修复技术"></a>当前热门的热修复技术</h3><p>当前热门的热修复技术有：</p>
<ul>
<li><a href="http://blog.csdn.net/asialiyazhou/article/details/70495589" target="_blank" rel="external">QQ空间超级补丁</a>、微信[Tinker]</li>
<li><a href="https://help.aliyun.com/document_detail/53240.html" target="_blank" rel="external">阿里的Sophix</a>、<a href="http://baichuan.taobao.com/docs/doc.htm?spm=a3c0d.7629140.0.0.1EKYpC&amp;treeId=234&amp;articleId=105517&amp;docType=1" target="_blank" rel="external">阿里Hotfix</a></li>
<li>饿了么<a href="https://github.com/eleme/Amigo" target="_blank" rel="external">Amigo</a></li>
<li>美团<a href="https://github.com/Meituan-Dianping/Robust" target="_blank" rel="external">Robust</a></li>
<li><p>360<a href="https://github.com/Qihoo360/RePlugin" target="_blank" rel="external">RePlugin</a></p>
</li>
<li><p>…</p>
</li>
</ul>
<h2 id="热修复技术"><a href="#热修复技术" class="headerlink" title="热修复技术"></a>热修复技术</h2><p>要弄清热修复技术的原理，就要先弄清Android的ClassLoader机制，相关文章可以阅读之前的介绍：<a href="http://blog.csdn.net/xiangzhihong8/article/details/52880327" target="_blank" rel="external">ClassLoader类加载机制</a>。Android的ClassLoader分为PathClassLoader和DexClassLoader，它们都都继承自BaseDexClassLoader，其中PathClassLoader用来加载系统类和应用类；DexClassLoader用来加载jar、apk、dex文件。例如下面要介绍的阿里的Andfix和Sophix的原理如下：</p>
<h3 id="AndFix"><a href="#AndFix" class="headerlink" title="AndFix"></a>AndFix</h3><p><strong>AndFix</strong>：由补丁类的classLoader加载补丁类，在native层针对不同Android架构中的不同的ArtMethod结构调用对应的replaceMethod方法按照定义好的ArtMethod结构一一替换方法的所有信息如所属类、访问权限、代码内存地址等。<br>稳定性较差，会受到国内ROM厂商对ArtMethod结构更改的影响,所以这正是AndFix不支持很多机型的原因。</p>
<h3 id="Sophix"><a href="#Sophix" class="headerlink" title="Sophix"></a>Sophix</h3><p><strong>Sophix</strong>:由补丁类的classLoader加载补丁类，在native层直接memcpy(smeth,dmth,sizeof(ArtMethod))替换整个artMethod的结构。初始化类时会为这个类分配空间，AllocArtMethodArray会紧挨着的new出来放入art中的方法数组中。通过计算辅助类的前后两个方法的起始地址就可以计算出artMethod结构的大小了。<br>注：补丁类初始化时，也会分配自己的artMethod空间，拿这个修复过的新ArtMethod去替换旧ArtMethod的内容，不用管ArtMethod的结构。稳定性大大提高！</p>
<h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><h2 id="内部类编译"><a href="#内部类编译" class="headerlink" title="内部类编译"></a>内部类编译</h2><h3 id="静态内部类-非静态内部类区别"><a href="#静态内部类-非静态内部类区别" class="headerlink" title="静态内部类/非静态内部类区别"></a>静态内部类/非静态内部类区别</h3><p>内部类会被编译器生成同外部类一样的顶级类。只不过非静态内部类会持有外部类的引用。这也是Android性能优化建议Handler使用静态内部类，防止外部类Activity不能被回收导致造成OOM。</p>
<p>###内部类和外部类互相访问<br>内部类和外部类互相访问private方法和字段时，会自动在对应类为对方生成public的access&amp;**方法。</p>
<h3 id="热部署解决方案"><a href="#热部署解决方案" class="headerlink" title="热部署解决方案"></a>热部署解决方案</h3><p>外部类如果有内部类把所有的field/method的private访问权限改成proteced或者public内部类将所有的field/method的private访问权限改成proteced或者public。</p>
<h2 id="匿名内部类编译"><a href="#匿名内部类编译" class="headerlink" title="匿名内部类编译"></a>匿名内部类编译</h2><h3 id="匿名内部类命名规则"><a href="#匿名内部类命名规则" class="headerlink" title="匿名内部类命名规则"></a>匿名内部类命名规则</h3><p>外部类&amp;number。number即编译器根据匿名内部类出现在外部类中的顺序，依次累加。</p>
<h3 id="热部署解决方案-1"><a href="#热部署解决方案-1" class="headerlink" title="热部署解决方案"></a>热部署解决方案</h3><p>新增/减少匿名内部类对热部署是无解的，因为补丁修复工具拿到的是class文件，无法区别DexFileDemo&amp;1和DexFileDemo&amp;2，会导致类的顺序乱套。如果匿名内部类插入到末尾则是允许。</p>
<h2 id="域编译"><a href="#域编译" class="headerlink" title="域编译"></a>域编译</h2><h3 id="静态field-非静态field编译"><a href="#静态field-非静态field编译" class="headerlink" title="静态field,非静态field编译"></a>静态field,非静态field编译</h3><p>热部署不支持field/method增加和删除和 clinit方法的修改，静态field的初始化和静态代码块会被编译在编译器合成的方法clinit中，非静态字段的初始化会被编译在编译器生成的init无参构造函数中，</p>
<h3 id="静态field-静态代码块"><a href="#静态field-静态代码块" class="headerlink" title="静态field,静态代码块"></a>静态field,静态代码块</h3><p>clinit方法会在类加载阶段的类初始化时调用，clinit中静态field和静态代码块的出现顺序就是二者在源码中出现的顺序。因为类已经加载过了，所以就算修复了clinit方法也不会生效了。<br>dvmResolveClass-&gt;dvmLinkClass-&gt;dvmInitClass,然后执行clinit方法<br>以下情况会去加载一个类<br>1.new 一个类的对象时new instance<br>2.调用类的静态方法（invoke static）<br>3.获取类的静态域的值（sget）</p>
<h3 id="非静态field-非静态代码块"><a href="#非静态field-非静态代码块" class="headerlink" title="非静态field,非静态代码块"></a>非静态field,非静态代码块</h3><p>类的构造函数会被编译器翻译成init方法，会先进行非静态field和非静态代码块的初始化。它们出现的顺序也是和在源码中出现的顺序一样。<br>执行new instance指令时，如果类没有加载过，就尝试加载类。然后对对象内存分配，再然后执行invoke direct指令调用类的init构造函数进行初始化</p>
<h3 id="热部署解决方案-2"><a href="#热部署解决方案-2" class="headerlink" title="热部署解决方案"></a>热部署解决方案</h3><p>不支持对静态字段和静态代码块的修改，会导致热部署失败，只能冷启动生效。支持非静态字段和非静态代码块修改，热部署只是将init构造函数作为普通的方法变更。</p>
<h2 id="final-static-域编译"><a href="#final-static-域编译" class="headerlink" title="final static 域编译"></a>final static 域编译</h2><h3 id="final-static-域编译规则"><a href="#final-static-域编译规则" class="headerlink" title="final static 域编译规则"></a>final static 域编译规则</h3><p>final static引用类型初始化仍在clinit中final static基本类型和String类型，类加载初始化dvminitClass在执行clinit方法之前，先执行initSFields，这个方法为static域赋予默认值。引用类型默认NULL，final static修饰的基本类型和String类型会在这里初始化赋值。</p>
<h3 id="final-static-域优化原理"><a href="#final-static-域优化原理" class="headerlink" title="final static 域优化原理"></a>final static 域优化原理</h3><p>final static基本类型执行const/4指令,操作数在dex中的位置(encoded_array_item)就是在opcode后一个字节。<br>final static String类型执行const-string指令，本质同上只不过拿到的是字符串常量在dex文件结构中字符串常量区的索引id。dex文件有一块区域存储所有的字符串常量会被完整的加载到虚拟机内存中-字符串常量区。<br>final static引用类型执行sget指令,首先调用dvmDexGetResolveField看这个域是否之前解析过，没有的话调用dvmDexResolveField尝试解析域，如果这个静态域所在的类没有解析过，尝试调用dvmResolveClass,拿到这个sField，然后通过dvmDexGetResolveField(sField)获取这个静态值。</p>
<h3 id="热部署解决方案-3"><a href="#热部署解决方案-3" class="headerlink" title="热部署解决方案"></a>热部署解决方案</h3><p>final static基本类型/string类型最终引用的类型会被热部署替换掉。<br>final static引用类型因为会被翻译到clinit方法中，热部署失败。</p>
<h2 id="泛型编译"><a href="#泛型编译" class="headerlink" title="泛型编译"></a>泛型编译</h2><h3 id="为什么需要泛型"><a href="#为什么需要泛型" class="headerlink" title="为什么需要泛型"></a>为什么需要泛型</h3><p>Java泛型完全有编译器实现，由编译器执行类型检查和类型推断，生成非泛型字节码，称之为擦除。<br>没有泛型之前想要实现类泛型，利用所有类的父类时Object进行强转，这完全依赖程序员的自主性，很容易出现ClassCastException。泛型的出现解决了类型检查和类型推断的问题。</p>
<h3 id="泛型类型擦除"><a href="#泛型类型擦除" class="headerlink" title="泛型类型擦除"></a>泛型类型擦除</h3><p>Java字节码中不包含泛型类型信息，想要区别类型定义可以限定泛型类型 <t extends="" number=""></t></p>
<h3 id="类型擦除与多态的冲突和解决"><a href="#类型擦除与多态的冲突和解决" class="headerlink" title="类型擦除与多态的冲突和解决"></a>类型擦除与多态的冲突和解决</h3><p>父类是泛型类有setNumber(T value),子类想override setNumber(Number value)。然而实际父类的方法实际是setNumber(Object value),子类想重写却变成了重载，这就出现了类型擦除和多态之间的冲突。然而编译器自动帮我们合成了Bridge方法实现了重载，在子类中生成了相同签名bridge方法，内部实际调用子类的重写方法。</p>
<h3 id="泛型类型转换"><a href="#泛型类型转换" class="headerlink" title="泛型类型转换"></a>泛型类型转换</h3><p>编译器如果发现变量声明加上了泛型信息，编译器自动加上了check-cast的强制转换，因为编译器会为泛型做类型检查，所以自动的强制转换不会出现ClassCastException。</p>
<h3 id="热部署解决方案-4"><a href="#热部署解决方案-4" class="headerlink" title="热部署解决方案"></a>热部署解决方案</h3><p>如果父类补丁变成了增加了泛型则会增加Bridge方法，造成热部署失败。<br>将方法从void get(B t) 变成 B extends Number void get(B t)方法逻辑不会发生变化，但是方法的签名会发生变化，这种情况热修复没有意义，需要避免这种情况的发生。</p>
<h2 id="Lambda表达式编译"><a href="#Lambda表达式编译" class="headerlink" title="Lambda表达式编译"></a>Lambda表达式编译</h2><h3 id="Lambda表达式编译规则"><a href="#Lambda表达式编译规则" class="headerlink" title="Lambda表达式编译规则"></a>Lambda表达式编译规则</h3><p>Lamda表达式具有函数式编程的特点，是Java中最接近闭包的概念。函数式接口：一个接口具有唯一一个抽象方法<br>Java中的Runable和Comparator都是典型的函数式接口</p>
<p>Lamada表达式和匿名内部类的区别：<br>1.this关键字指包围Lamada表达式的类而不是指向匿名内部类自己<br>2.编译方式，Java编译器将Lamda表达式编译成类的私有方法，使用了Java7的invokedynamic动态绑定这个私有方法。而匿名内部类则是生成外部类&amp;number的新类.编译器都会在类下生成lamda$main$<em>*{ </em> }私有静态方法，这个方法实现了lamda表达式的逻辑，引用的变量都会变成方法的参数。</p>
<p>在HostSpot VM下解释class文件的lamda表达式：<br>invokeDynamic指令调用java/lang/invoke/LamdaMetafactory的metafactory这个静态方法。这个方法会在运行时生成实现函数式接口的具体类，这个具体类会调用那个静态私有方法。<br>在Android虚拟机下解释dex文件中的lamda表达式：则是在优化成dex文件的时候就生成了这个具体类。</p>
<h3 id="热部署解决方案-5"><a href="#热部署解决方案-5" class="headerlink" title="热部署解决方案"></a>热部署解决方案</h3><p>新增lamada表达式会导致外部类新增一个辅助方法。修改的lamda表达式逻辑引用了外部变量，会导致辅助类持有了外部对象，会新增这个外部对象的变量。也是会导致热修复失败。</p>
<p>#Sophix与QQ超级补丁和Tinker技术比较<br>针对现在市面上比较流行的热修复方案，这里选择Sophix、QQ超级补丁和Tinker进行简单的介绍。前面说过，类似于qq空间和微信的实现方式都需要重新启动才能修复bug，而阿里的Sophix采用的是非浸入式的方式不需要冷启动。</p>
<h2 id="QQ空间超级补丁"><a href="#QQ空间超级补丁" class="headerlink" title="QQ空间超级补丁"></a>QQ空间超级补丁</h2><p>QQ空间超级补丁采用的插桩方式，入侵打包流程，单独放一个帮助类在独立的dex中让其他类调用，阻止类在dexopt时被打伤CLASS_ISPREVERIFIED标记。其原理如下图：<br><img src="http://img.blog.csdn.net/20170830155305761?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>加载补丁dex得到dexFile对象作为参数构建一个Element对象插入到dexElement数组最前面。<br>Tinker提供差量包，整体替换dex的方案。将patch.dex与应用的class.dex合并生成一个完整的dex，加载完整的dex得到dexFile对象为参数构建一个Element对象替换dexElements数组。<br>官方multiDex没有补丁查询更新，下载补丁待下次启动时生效。<br>其流程可以总结为如下图所示：<br><img src="http://img.blog.csdn.net/20170830155426086?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>不过细心的读者会发现，QQ空间超级补丁在使用 过程中还存在如下问题：<br>1.不支持即时生效，必须通过重启才能生效。</p>
<p>2.为了实现修复这个过程，必须在应用中加入两个dex!dalvikhack.dex中只有一个类，对性能影响不大，但是对于patch.dex来说，修复的类到了一定数量，就需要花不少的时间加载。对手淘这种航母级应用来说，启动耗时增加2s以上是不能够接受的事。</p>
<p>3.在ART模式下，如果类修改了结构，就会出现内存错乱的问题。为了解决这个问题，就必须把所有相关的调用类、父类子类等等全部加载到patch.dex中，导致补丁包异常的大，进一步增加应用启动加载的时候，耗时更加严重。</p>
<p>针对上面的问题，腾讯出了QFix方案。<br>在native层提前调用dvmResolveClass，是的在dvmResolve中调用dvmDexGetResolve不为null，也避免了校验一致性的问题。<br>这个方案要求传递的在多dex情况下，referrer类必须跟patch类是同一个dex。fromUnverifiedConstant必须为true。referrer必须提前加载。<br>这方案还要一些问题，在dexopt之后绕过，但是dexopt会改变很多原先的逻辑，许多odex层面的优化会写死字段和访问方法的偏移。这会造成很严重的BUG。</p>
<h2 id="微信Tinker"><a href="#微信Tinker" class="headerlink" title="微信Tinker"></a>微信Tinker</h2><p>微信针对QQ空间超级补丁技术的不足提出了一个提供DEX差量包，整体替换DEX的方案。主要的原理是与QQ空间超级补丁技术基本相同，区别在于不再将patch.dex增加到elements数组中，而是差量的方式给出patch.dex，然后将patch.dex与应用的classes.dex合并，然后整体替换掉旧的DEX文件，以达到修复的目的。其原理图如下：<br><img src="http://img.blog.csdn.net/20170830160319806?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>微信的热修复的流程如图所示：<br><img src="http://img.blog.csdn.net/20170830160404197?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>不过微信的方案仍然会有如下问题：</p>
<p>1.与超级补丁技术一样，不支持即时生效，必须通过重启应用的方式才能生效。</p>
<p>2.需要给应用开启新的进程才能进行合并，并且很容易因为内存消耗等原因合并失败。</p>
<p>3.合并时占用额外磁盘空间，对于多DEX的应用来说，如果修改了多个DEX文件，就需要下发多个patch.dex与对应的classes.dex进行合并操作时这种情况会更严重，因此合并过程的失败率也会更高。</p>
<h2 id="HotFix"><a href="#HotFix" class="headerlink" title="HotFix"></a>HotFix</h2><p>阿里的HotFix方案，相对于QQ空间超级补丁技术和微信Tinker来说，定位于紧急BUG修复的场景下，能够最及时的修复BUG，下拉补丁立即生效无需等待。<br><img src="http://img.blog.csdn.net/20170830160645779?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>AndFix不同于QQ空间超级补丁技术和微信Tinker通过增加或替换整个DEX的方案，提供了一种运行时在Native修改Filed指针的方式，实现方法的替换，达到即时生效无需重启，对应用无性能消耗的目的。其原理如下：<br><img src="http://img.blog.csdn.net/20170830160828982?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>对于实现方法的替换，需要在Native层操作，主要经过三个步骤：<br><img src="http://img.blog.csdn.net/20170830160953982?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>不过HotFix也有不足：<br>1.不支持新增字段，以及修改方法，也不支持对资源的替换。</p>
<p>2.由于厂商的自定义ROM，对少数机型暂不支持。兼容性差。<br>综上，对于上面的几种框架技术总结如下：<br><img src="http://img.blog.csdn.net/20170830161151595?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h1 id="热修复方案总结"><a href="#热修复方案总结" class="headerlink" title="热修复方案总结"></a>热修复方案总结</h1><p>代码修复有两大主要方案：一种是阿里系的底层替换方案，另一种是腾讯系的类加载方案。底层替换方案限制颇多，但时效性最好，加载轻快，立即见效。类加载方案时效性差，需要重新冷启动才能见效，但修复范围广，限制少。</p>
<h2 id="底层替换方案"><a href="#底层替换方案" class="headerlink" title="底层替换方案"></a>底层替换方案</h2><p>底层替换方案是在已经加载了的类中直接替换掉原有方法，是在原来类的基础上进行修改的。因而无法实现对与原有类进行方法和字段的增减，因为这样将破坏原有类的结构。</p>
<p>一旦补丁类中出现了方法的增加和减少，就会导致这个类以及整个Dex的方法数的变化。方法数的变化伴随着方法索引的变化，这样在访问方法时就无法正常地索引到正确的方法了。</p>
<p>如果字段发生了增加和减少，和方法变化的情况一样，所有字段的索引都会发生变化。并且更严重的问题是，如果在程序运行中间某个类突然增加了一个字段，那么对于原先已经产生的这个类的实例，它们还是原来的结构，这是无法改变的。而新方法使用到这些老的实例对象时，访问新增字段就会产生不可预期的结果。</p>
<p>这是这类方案的固有限制，而底层替换方案最为人诟病的地方，在于底层替换的不稳定性。</p>
<p>传统的底层替换方式，不论是Dexposed、Andfix或者其他安全界的Hook方案，都是直接依赖修改虚拟机方法实体的具体字段。例如，改Dalvik方法的jni函数指针、改类或方法的访问权限等等。这样就带来一个很严重的问题，由于Android是开源的，各个手机厂商都可以对代码进行改造，而Andfix里ArtMethod的结构是根据公开的Android源码中的结构写死的。如果某个厂商对这个ArtMethod结构体进行了修改，就和原先开源代码里的结构不一致，那么在这个修改过了的设备上，通用性的替换机制就会出问题。这便是不稳定的根源。</p>
<p>而我们也对代码的底层替换原理重新进行了深入思考，从克服其限制和兼容性入手，以一种更加优雅的替换思路，实现了即时生效的代码热修复。sophix实现的是一种无视底层具体结构的替换方式，也就是把原先这样的逐一替换：</p>
<p>这么一来，我们不仅解决了兼容性问题，并且由于忽略了底层ArtMethod结构的差异，对于所有的Android版本都不再需要区分，代码量大大减少。即使以后的Android版本不断修改ArtMethod的成员，只要保证ArtMethod数组仍是以线性结构排列，就能直接适用于将来的Android 8.0、9.0等新版本，无需再针对新的系统版本进行适配了。</p>
<h2 id="类加载方案"><a href="#类加载方案" class="headerlink" title="类加载方案"></a>类加载方案</h2><p>类加载方案的原理是在app重新启动后让Classloader去加载新的类。因为在app运行到一半的时候，所有需要发生变更的类已经被加载过了，在Android上是无法对一个类进行卸载的。如果不重启，原来的类还在虚拟机中，就无法加载新类。因此，只有在下次重启的时候，在还没走到业务逻辑之前抢先加载补丁中的新类，这样后续访问这个类时，就会Resolve为新类。从而达到热修复的目的。</p>
<p>再来看看腾讯系三大类加载方案的实现原理。QQ空间方案会侵入打包流程，并且为了hack添加一些无用的信息，实现起来很不优雅。而QFix的方案，需要获取底层虚拟机的函数，不够稳定可靠，并且有个比较大的问题是无法新增public函数。</p>
<p>微信的Tinker方案是完整的全量dex加载，并且可谓是将补丁合成做到了极致，然而我们发现，精密的武器并非适用于所有战场。Tinker的合成方案，是从dex的方法和指令维度进行全量合成，整个过程都是自己研发的。</p>
<p>虽然可以很大地节省空间，但由于对dex内容的比较粒度过细，实现较为复杂，性能消耗比较严重。实际上，dex的大小占整个apk的比例是比较低的，一个app里面的dex文件大小并不是主要部分，而占空间大的主要还是资源文件。因此，Tinker方案的时空代价转换的性价比不高。</p>
<p>其实，dex比较的最佳粒度，应该是在类的维度。它既不像方法和指令维度那样的细微，也不像bsbiff比较那般的粗糙。在类的维度，可以达到时间和空间平衡的最佳效果。基于这个准则，我们另辟蹊径，实现了一种完全不同的全量dex替换方案。</p>
<p>sophix采用的也是全量合成dex的技术，这个技术是从手淘插件化框架Atlas汲取的。直接利用Android原先的类查找和合成机制，快速合成新的全量dex。这么一来，我们既不需要处理合成时方法数超过的情况，对于dex的结构也不用进行破坏性重构。</p>
<p><img src="http://img.blog.csdn.net/20170830163628022?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>从图中可以看到，我们重新编排了包中dex的顺序。这样，在虚拟机查找类的时候，会优先找到classes.dex中的类，然后才是classes2.dex、classes3.dex，也可以看做是dex文件级别的类插桩方案。这个方式十分巧妙，它对旧包与补丁包中classes.dex的顺序进行了打破与重组，最终使得系统可以自然地识别到这个顺序，以实现类覆盖的目的。这将会大大减少合成补丁的开销。</p>
<h2 id="资源修复"><a href="#资源修复" class="headerlink" title="资源修复"></a>资源修复</h2><p>在Android热修复的过程中，不仅需要对错误的代码进行修复，还需要对资源文件进行修复。目前市面上的资源热修复方案基本上都是参考<a href="http://blog.csdn.net/xiangzhihong8/article/details/64906131" target="_blank" rel="external">Instant Run</a>的实现。Instant Run实现过程大概分为两部：<br>1、构造一个新的AssetManager,并通过反射条用addAssetPath,把这个完整的新资源包加入到AssetManager中。这样就得到了一个含有所有新资源的AssetManager。</p>
<p>2、找到所有之前引用到原AssetManager的地方，通过反射，把引用处替换为AssetManager</p>
<p>这种方式下发完整的包很占用空间。而像有些方案，是先进行对资源包做差量，在运行时合成完整包再加载。这样确实减少包的体积，但是在运行时多了合成的操作，耗费了运行时间喝内存。合成后的包也是完整的包，仍旧会占磁盘空间。</p>
<h2 id="so库修复"><a href="#so库修复" class="headerlink" title="so库修复"></a>so库修复</h2><p>so库的修复本质上是对native方法的修复和替换。我们知道在JNI编程中，native方法可以通过动态注册和静态注册两种方式进行。动态注册的native方法必须实现<code>JNI_OnLoad</code>方法，同时实现一个<code>JNINativeMethod[]</code>数组，静态注册的native方法必须是<code>Java+类完整路径+方法名</code>的格式。</p>
<p><img src="http://img.blog.csdn.net/20170830164521841?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>动态注册的native方法映射通过加载so库过程中调用JNI_OnLoad方法调用完成，静态注册的native方法映射是在该native方法第一次执行的时候才完成映射，当然前提是该so库已经load过。</p>
<p>我们采用的是类似类修复反射注入方式。把补丁so库的路径插入到nativeLibraryDirectories数组的最前面，就能够达到加载so库的时候是补丁so库，而不是原来so库的目录，从而达到修复的目的。</p>
<p><img src="http://img.blog.csdn.net/20170830164634717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>参考：<a href="http://www.jianshu.com/p/ed03e8e4b08f" target="_blank" rel="external">http://www.jianshu.com/p/ed03e8e4b08f</a><br><a href="http://tinkerpatch.com/Docs/SDK" target="_blank" rel="external">Tinker集成</a><br><a href="https://help.aliyun.com/document_detail/53240.html" target="_blank" rel="external">Sophix集成</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;插件化和热修复技术是Android开发中比较高级的知识点，是中级开发人员通向高级开发中必须掌握的技能，插件化的知识可以查我我之前的介绍：&lt;a href=&quot;http://blog.csdn.net/xiangzhihong8/article/details/52876440&quot;
    
    </summary>
    
      <category term="Android" scheme="http://www.xiangzhihong.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.xiangzhihong.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>前端ThinkJS框架解析</title>
    <link href="http://www.xiangzhihong.com/2017/07/14/%E5%89%8D%E7%AB%AFThinkJS%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.xiangzhihong.com/2017/07/14/前端ThinkJS框架解析/</id>
    <published>2017-07-13T16:00:00.000Z</published>
    <updated>2017-09-30T02:35:08.956Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://thinkjs.org/" target="_blank" rel="external">Thinkjs</a> 是一个快速、简单的基于MVC和面向对象的轻量级Node.js开发框架，遵循MIT协议发布。秉承简洁易用的设计原则，在保持出色的性能和至简的代码同时，注重开发体验和易用性，为WEB应用开发提供强有力的支持。</p>
<p>Thinkjs里面很多特性来源于ThinkPHP，同时根据Node.js的特点，使用了Promise, WebSocket等特性，让代码更简洁、优雅。</p>
<p>Thinkjs最大的特色是对目前比较潮的语法特性支持的特别好，比如es6、es7、typescript等，有了这些，对aysnc/await等特性支持，让代码更加fashion。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装命令行工具：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g thinkjs</div></pre></td></tr></table></figure>
<p>然后使用thinkjs new demo创建一个新项目。为了确保用户错误操作导致现有文件被覆盖，thinkjs new 命令仅适用于文件夹不存在的，或者空文件夹。否则会报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">path `/data/www/demo` is already a thinkjs project.</div></pre></td></tr></table></figure>
<p>实现这一特性其实是依赖一个项目根目录下的隐藏文件 .thinkjsrc ，使用 ls -a 可以查看隐藏文件，打开这个文件可以看到如下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;createAt&quot;: &quot;2017-02-12 19:08:38&quot;,</div><div class="line">  &quot;mode&quot;: &quot;module&quot;,</div><div class="line">  &quot;es&quot;: true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用命令后，系统就开始构建项目了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">$ thinkjs new demo</div><div class="line">  create : demo</div><div class="line">  create : demo/package.json</div><div class="line">  create : demo/.babelrc</div><div class="line">  create : demo/.thinkjsrc</div><div class="line">  create : demo/nginx.conf</div><div class="line">  create : demo/pm2.json</div><div class="line">  create : demo/.gitignore</div><div class="line">  create : demo/README.md</div><div class="line">  create : demo/www</div><div class="line">  create : demo/www/development.js</div><div class="line">  create : demo/www/production.js</div><div class="line">  create : demo/www/testing.js</div><div class="line">  create : demo/www/README.md</div><div class="line">  create : demo/www/static</div><div class="line">  create : demo/www/static/js</div><div class="line">  create : demo/www/static/css</div><div class="line">  create : demo/www/static/img</div><div class="line">  create : demo/src</div><div class="line">  create : demo/src/common/bootstrap</div><div class="line">  create : demo/src/common/bootstrap/middleware.js</div><div class="line">  create : demo/src/common/bootstrap/global.js</div><div class="line">  create : demo/src/common/config</div><div class="line">  create : demo/src/common/config/config.js</div><div class="line">  create : demo/src/common/config/view.js</div><div class="line">  create : demo/src/common/config/db.js</div><div class="line">  create : demo/src/common/config/hook.js</div><div class="line">  create : demo/src/common/config/session.js</div><div class="line">  create : demo/src/common/config/error.js</div><div class="line">  create : demo/src/common/config/env</div><div class="line">  create : demo/src/common/config/env/development.js</div><div class="line">  create : demo/src/common/config/env/testing.js</div><div class="line">  create : demo/src/common/config/env/production.js</div><div class="line">  create : demo/src/common/config/locale</div><div class="line">  create : demo/src/common/config/locale/en.js</div><div class="line">  create : demo/src/common/controller</div><div class="line">  create : demo/src/common/controller/error.js</div><div class="line">  create : demo/view/common</div><div class="line">  create : demo/view/common/error_400.html</div><div class="line">  create : demo/view/common/error_403.html</div><div class="line">  create : demo/view/common/error_404.html</div><div class="line">  create : demo/view/common/error_500.html</div><div class="line">  create : demo/view/common/error_503.html</div><div class="line">  create : demo/src/home/config</div><div class="line">  create : demo/src/home/config/config.js</div><div class="line">  create : demo/src/home/controller</div><div class="line">  create : demo/src/home/controller/base.js</div><div class="line">  create : demo/src/home/controller/index.js</div><div class="line">  create : demo/src/home/logic</div><div class="line">  create : demo/src/home/logic/index.js</div><div class="line">  create : demo/src/home/model</div><div class="line">  create : demo/src/home/model/index.js</div><div class="line">  create : demo/view/home</div><div class="line">  create : demo/view/home/index_index.html</div><div class="line"></div><div class="line">  enter path:</div><div class="line">  $ cd demo</div><div class="line"></div><div class="line">  install dependencies:</div><div class="line">  $ npm install</div><div class="line"></div><div class="line">  run the app:</div><div class="line">  $ npm start</div></pre></td></tr></table></figure>
<p>需要注意的是，新建项目的时候需要好多babel，所以项目的构建会比较慢，依赖的包主要有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;dependencies&quot;: &#123;</div><div class="line">   &quot;thinkjs&quot;: &quot;2.2.x&quot;,</div><div class="line">   &quot;babel-runtime&quot;: &quot;6.x.x&quot;,</div><div class="line">   &quot;source-map-support&quot;: &quot;0.4.0&quot;</div><div class="line"> &#125;,</div></pre></td></tr></table></figure>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── README.md</div><div class="line">├── app</div><div class="line">│   ├── common</div><div class="line">│   │   ├── bootstrap</div><div class="line">│   │   ├── config</div><div class="line">│   │   └── controller</div><div class="line">│   └── home</div><div class="line">│       ├── config</div><div class="line">│       ├── controller</div><div class="line">│       ├── logic</div><div class="line">│       └── model</div><div class="line">├── nginx.conf</div><div class="line">├── package.json</div><div class="line">├── pm2.json</div><div class="line">├── src</div><div class="line">│   ├── common</div><div class="line">│   │   ├── bootstrap</div><div class="line">│   │   ├── config</div><div class="line">│   │   └── controller</div><div class="line">│   └── home</div><div class="line">│       ├── config</div><div class="line">│       ├── controller</div><div class="line">│       ├── logic</div><div class="line">│       └── model</div><div class="line">├── tree.txt</div><div class="line">├── view</div><div class="line">│   ├── common</div><div class="line">│   │   ├── error_400.html</div><div class="line">│   │   ├── error_403.html</div><div class="line">│   │   ├── error_404.html</div><div class="line">│   │   ├── error_500.html</div><div class="line">│   │   └── error_503.html</div><div class="line">│   └── home</div><div class="line">│       └── index_index.html</div><div class="line">└── www</div><div class="line">    ├── README.md</div><div class="line">    ├── development.js</div><div class="line">    ├── production.js</div><div class="line">    ├── static</div><div class="line">    │   ├── css</div><div class="line">    │   ├── img</div><div class="line">    │   └── js</div><div class="line">    └── testing.js</div><div class="line"></div><div class="line">388 directories, 1381 files</div></pre></td></tr></table></figure>
<h2 id="启动流程分析"><a href="#启动流程分析" class="headerlink" title="启动流程分析"></a>启动流程分析</h2><p>1）启动命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm start</div></pre></td></tr></table></figure>
<p>那使用start后系统做了什么呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">   &quot;start&quot;: &quot;node www/development.js&quot;,</div><div class="line">   &quot;compile&quot;: &quot;babel src/ --out-dir app/&quot;,</div><div class="line">   &quot;watch-compile&quot;: &quot;node -e \&quot;console.log(&apos;&lt;npm run watch-compile&gt; no longer need, use &lt;npm start&gt; command direct.&apos;);console.log();\&quot;&quot;,</div><div class="line">   &quot;watch&quot;: &quot;npm run watch-compile&quot;</div><div class="line"> &#125;,</div></pre></td></tr></table></figure>
<p>即使用Node执行www/development.js，这是env环境处理，thinkjs采用了3中env，比较常见的有：</p>
<ul>
<li>development 开发模式</li>
<li>production 线上模式</li>
<li>testing 测试模式</li>
</ul>
<p>thinkjs是把www当成node项目目录，而www下的static才是静态资源文件目录。<br>www/development.js目录如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var instance = new thinkjs(&#123;</div><div class="line">  APP_PATH: rootPath + path.sep + &apos;app&apos;,</div><div class="line">  RUNTIME_PATH: rootPath + path.sep + &apos;runtime&apos;,</div><div class="line">  ROOT_PATH: rootPath,</div><div class="line">  RESOURCE_PATH: __dirname,</div><div class="line">  env: &apos;development&apos;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>当然，可以使用“tree src -L 3”  命令来查看项目的目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">$ tree src -L 3         </div><div class="line">src</div><div class="line">├── common</div><div class="line">│   ├── bootstrap</div><div class="line">│   │   ├── global.js</div><div class="line">│   │   └── middleware.js</div><div class="line">│   ├── config</div><div class="line">│   │   ├── config.js</div><div class="line">│   │   ├── db.js</div><div class="line">│   │   ├── env</div><div class="line">│   │   ├── error.js</div><div class="line">│   │   ├── hook.js</div><div class="line">│   │   ├── locale</div><div class="line">│   │   ├── session.js</div><div class="line">│   │   └── view.js</div><div class="line">│   └── controller</div><div class="line">│       └── error.js</div><div class="line">├── home</div><div class="line">│   ├── config</div><div class="line">│   │   └── config.js</div><div class="line">│   ├── controller</div><div class="line">│   │   ├── base.js</div><div class="line">│   │   └── index.js</div><div class="line">│   ├── logic</div><div class="line">│   │   └── index.js</div><div class="line">│   └── model</div><div class="line">│       └── index.js</div><div class="line"></div><div class="line"></div><div class="line">16 directories, 19 files</div></pre></td></tr></table></figure>
<p>常见模块配置（后文会具体涉及）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ thinkjs module topic(能创建不能删除，略遗憾)</div><div class="line"></div><div class="line">  create : src/topic/config</div><div class="line">  create : src/topic/config/config.js</div><div class="line">  create : src/topic/controller</div><div class="line">  create : src/topic/controller/base.js</div><div class="line">  create : src/topic/controller/index.js</div><div class="line">  create : src/topic/logic</div><div class="line">  create : src/topic/logic/index.js</div><div class="line">  create : src/topic/model</div><div class="line">  create : src/topic/model/index.js</div><div class="line">  exist : /Users/sang/workspace/github/nodewebframework/demo/view/topic/index_index.html</div></pre></td></tr></table></figure>
<p>此时目录结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">src</div><div class="line">├── common</div><div class="line">├── home</div><div class="line">└── topic</div></pre></td></tr></table></figure>
<p>3）业务模块目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">├── home</div><div class="line">│   ├── config</div><div class="line">│   │   └── config.js</div><div class="line">│   ├── controller</div><div class="line">│   │   ├── base.js</div><div class="line">│   │   └── index.js</div><div class="line">│   ├── logic</div><div class="line">│   │   └── index.js</div><div class="line">│   └── model</div><div class="line">│       └── index.js</div></pre></td></tr></table></figure>
<p>4）路由和view识别<br>路由识别，默认根据 模块/控制器/操作/参数1/参数1值/参数2/参数2值 其实就是一个约定。</p>
<p>比如/解析为：</p>
<ul>
<li>默认模块是home</li>
<li>控制是index</li>
<li>操作是indexAction</li>
</ul>
<p>那如果再来一个呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">import Base from &apos;./base.js&apos;;</div><div class="line"></div><div class="line">export default class extends Base &#123;</div><div class="line">  /**</div><div class="line">   * index action</div><div class="line">   * @return &#123;Promise&#125; []</div><div class="line">   */</div><div class="line">  indexAction()&#123;</div><div class="line">    //auto render template file index_index.html</div><div class="line">    return this.display();</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  myAction()&#123;</div><div class="line">    //auto render template file index_index.html</div><div class="line">    return this.display();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>增加myAction，报错[Error] Error: can’t find template file /Users/sang/workspace/github/nodewebframework/demo/view/home/index_my.html</p>
<p>将view/home/index_index.html复制为view/home/index_my.html。原理是my要对应index_my.html模块。即index是controller，而my是action。</p>
<p>理解了这个，你就会觉得index_index这样的命名也不是很怪异了。剩下的就是view编写之类的，此处就不在熬述。</p>
<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>前面提到了，开发阶段采用babel写的，所以效率不会很高。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ autocannon -c 100 -d 5 -p 10 localhost:8360</div><div class="line">Running 5s test @ http://localhost:8360</div><div class="line">100 connections with 10 pipelining factor</div><div class="line"></div><div class="line">Stat         Avg       Stdev    Max       </div><div class="line">Latency (ms) 108.9     201.32   866       </div><div class="line">Req/Sec      891.8     148.37   1000      </div><div class="line">Bytes/Sec    417.79 kB 50.76 kB 458.75 kB </div><div class="line"></div><div class="line">4k requests in 5s, 2.09 MB read</div></pre></td></tr></table></figure>
<p>点惨，是吧？但是这是开发模式啊，我们肯定要拿线上的production模式来测试。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">$ npm run compile</div><div class="line">$ node www/production.js </div><div class="line">$ autocannon -c 100 -d 5 -p 10 localhost:8360</div><div class="line">Running 5s test @ http://localhost:8360</div><div class="line">100 connections with 10 pipelining factor</div><div class="line"></div><div class="line">Stat         Avg       Stdev     Max       </div><div class="line">Latency (ms) 61.76     124.71    763       </div><div class="line">Req/Sec      1567.2    734.94    1993      </div><div class="line">Bytes/Sec    679.12 kB 242.25 kB 884.74 kB </div><div class="line"></div><div class="line">8k requests in 5s, 3.4 MB read</div><div class="line"></div><div class="line">$ autocannon -c 100 -d 5 -p 10 localhost:8360</div><div class="line">Running 5s test @ http://localhost:8360</div><div class="line">100 connections with 10 pipelining factor</div><div class="line"></div><div class="line">Stat         Avg       Stdev     Max      </div><div class="line">Latency (ms) 54.65     105.47    707      </div><div class="line">Req/Sec      1813.4    368.21    1999     </div><div class="line">Bytes/Sec    807.73 kB 156.09 kB 917.5 kB </div><div class="line"></div><div class="line">9k requests in 5s, 4.09 MB read</div><div class="line"></div><div class="line">$ autocannon -c 100 -d 5 -p 10 localhost:8360</div><div class="line">Running 5s test @ http://localhost:8360</div><div class="line">100 connections with 10 pipelining factor</div><div class="line"></div><div class="line">Stat         Avg       Stdev     Max     </div><div class="line">Latency (ms) 54.14     89.81     465     </div><div class="line">Req/Sec      1816.4    319.14    2000    </div><div class="line">Bytes/Sec    914.23 kB 145.96 kB 1.05 MB </div><div class="line"></div><div class="line">9k requests in 5s, 4.55 MB read</div></pre></td></tr></table></figure>
<p>下面以同样的功能express + ejs模板的方式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">$ autocannon -c 100 -d 5 -p 10 localhost:3000</div><div class="line">Running 5s test @ http://localhost:3000</div><div class="line">100 connections with 10 pipelining factor</div><div class="line"></div><div class="line">Stat         Avg       Stdev     Max       </div><div class="line">Latency (ms) 53.85     177.72    1309      </div><div class="line">Req/Sec      1728      385.85    2075      </div><div class="line">Bytes/Sec    702.87 kB 159.56 kB 851.97 kB </div><div class="line"></div><div class="line">9k requests in 5s, 3.53 MB read</div><div class="line"></div><div class="line">$ autocannon -c 100 -d 5 -p 10 localhost:3000</div><div class="line">Running 5s test @ http://localhost:3000</div><div class="line">100 connections with 10 pipelining factor</div><div class="line"></div><div class="line">Stat         Avg       Stdev     Max       </div><div class="line">Latency (ms) 46.06     141.52    739       </div><div class="line">Req/Sec      2061.2    320.53    2275      </div><div class="line">Bytes/Sec    842.14 kB 134.95 kB 950.27 kB </div><div class="line"></div><div class="line">10k requests in 5s, 4.2 MB read</div><div class="line"></div><div class="line">$ autocannon -c 100 -d 5 -p 10 localhost:3000</div><div class="line">Running 5s test @ http://localhost:3000</div><div class="line">100 connections with 10 pipelining factor</div><div class="line"></div><div class="line">Stat         Avg       Stdev    Max       </div><div class="line">Latency (ms) 45.97     139.58   620       </div><div class="line">Req/Sec      2059.4    122.93   2167      </div><div class="line">Bytes/Sec    829.03 kB 52.43 kB 884.74 kB </div><div class="line"></div><div class="line">10k requests in 5s, 4.2 MB read</div></pre></td></tr></table></figure>
<h2 id="模块分解"><a href="#模块分解" class="headerlink" title="模块分解"></a>模块分解</h2><p>创建项目之后，基本的代码框架已经建立起来了，其中默认的 home 和 common 肯定是无法满足要求的。我们需要给自己的项目建立起相关的层次结构。这里给大家列举一些常见的模块分类方式。仅供参考。</p>
<h3 id="简单网站"><a href="#简单网站" class="headerlink" title="简单网站"></a>简单网站</h3><p>官方网站、博客、社区等，这类系统结构较为简单，通常一个前端一个后端管理即可满足要求。通常需要包含以下模块：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">src/</div><div class="line">src/common/  # 通用模块，放置主配置参数、boostrap adapter middleware service 等相关组件</div><div class="line">src/home/  # 前端默认模块</div><div class="line">src/backend/  # 后端管理模块</div><div class="line">src/util/  # 系统工具类</div></pre></td></tr></table></figure>
<h3 id="电商平台"><a href="#电商平台" class="headerlink" title="电商平台"></a>电商平台</h3><p>电商平台系统主要考虑到入驻的商户、注册的客户、管理人员、运营人员等使用人群，还需要考虑到较大的功能模块切分（如果足够大到类似京东、天猫那种体量的系统，则需要进行数据、功能、服务、位置等角度的分割）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">src/</div><div class="line">src/common/</div><div class="line">src/home/</div><div class="line">src/sso/  # 单点登录、令牌管理等</div><div class="line">src/rest/  # 针对Wap、App等多客户端的 rest api</div><div class="line">src/goods/  # 商品管理及服务</div><div class="line">src/storage/  # 库存管理及服务</div><div class="line">src/cart/  # 购物车</div><div class="line">src/order/  # 订单</div><div class="line">src/delivery/  # 快递</div><div class="line">src/pay/  # 在线支付、空中支付</div><div class="line">src/member/  #</div><div class="line">src/coupon/  # 电子券</div><div class="line">src/promotion/  # 促销</div><div class="line">src/points/  # 积分</div><div class="line">src/merchant/  # 入驻商户</div><div class="line">src/shop/  # 商户门店</div><div class="line">src/finance/  # 财务核算及款项清算</div><div class="line">src/stat/</div><div class="line">src/log/</div><div class="line">src/monitor/</div><div class="line">src/util/</div><div class="line">src/task/</div><div class="line">src/message/  # 消息队列</div></pre></td></tr></table></figure>
<h3 id="即时消息平台"><a href="#即时消息平台" class="headerlink" title="即时消息平台"></a>即时消息平台</h3><p>实时推送平台不仅仅要处理 WebSocket 连接和消息囤积发送，还要处理多用户购买相应服务套餐、统计连接数、统计下行流量、进行连接鉴权等。通常包含的模块如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">src/</div><div class="line">src/common/</div><div class="line">src/home/</div><div class="line">src/rest/</div><div class="line">src/storage/</div><div class="line">src/websocket/  # ws 或者 wss 服务</div><div class="line">src/webhook/  # 钩子服务</div><div class="line">src/middleware/  # 搭载中间件运行</div><div class="line">src/pay/</div><div class="line">src/member/</div><div class="line">src/stat/</div><div class="line">src/log/</div><div class="line">src/monitor/</div><div class="line">src/util/</div><div class="line">src/message/  # 消息队列</div></pre></td></tr></table></figure>
<h3 id="在线教育、直播平台"><a href="#在线教育、直播平台" class="headerlink" title="在线教育、直播平台"></a>在线教育、直播平台</h3><p>在线教育或直播平台通常具备实时音视频上传、转码、存储、广播等硬性要求，因此系统除了管理相关课件、学生、教师、选课等，还要负责处理相关媒体文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">src/</div><div class="line">src/common/</div><div class="line">src/home/</div><div class="line">src/rest/</div><div class="line">src/sso/  # 单点登录、令牌管理等</div><div class="line">src/media/  # 课件、音视频等媒体文件</div><div class="line">src/bulk/  # 流媒体</div><div class="line">src/process/  # 编解码处理</div><div class="line">src/storage/</div><div class="line">src/live/  # 直播</div><div class="line">src/pay/</div><div class="line">src/student/</div><div class="line">src/teacher/</div><div class="line">src/schedule/</div><div class="line">src/stat/</div><div class="line">src/log/</div><div class="line">src/monitor/</div><div class="line">src/util/</div><div class="line">src/task/</div><div class="line">src/message/  # 消息队列</div></pre></td></tr></table></figure>
<h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><p>官网是这么描述配置文件加载顺序的：框架默认的配置 -&gt; 项目模式下框架配置 -&gt; 项目公共配置 -&gt; 项目模式下的公共配置 -&gt; 模块下的配置。</p>
<p>第三个和第四个则是在不同的项目创建模式下的默认 config 配置文件夹，位置在：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># normal mode</div><div class="line">thinkjs_normal/src/config/*</div><div class="line"># module mode</div><div class="line">thinkjs_module/src/common/config/*</div></pre></td></tr></table></figure>
<p>最后一个是指的在 module mode 下的项目，每个 module 自己的 config，位置在：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">thinkjs_module/src/home/config/*</div></pre></td></tr></table></figure>
<p>明白了多个地方多个配置文件的玩法之后，你可以创建多个 module，并给每个 module 配置自身独特的配置参数。</p>
<p>需要注意的是：thinkjs 加载配置文件是有顺序的！！！多个配置文件最终会在 thinkjs 运行时被全部加载，并合并在一起。所以当存在多个配置文件时，需要注意配置参数的 key（即属性名）尽量不要重复，因为按照加载顺序，后加载的 key 的值会覆盖先加载的 key 的值，导致出现不希望的结果。</p>
<p>举例来说，有两个配置文件 src/common/config/assets.js 和 src/home/config/assets.js，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// src/common/config/assets.js</div><div class="line">export default &#123;</div><div class="line">  &quot;site_title&quot;: &quot;my site&quot;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// src/home/config/assets.js</div><div class="line">export default &#123;</div><div class="line">  &quot;site_title&quot;: &quot;my test&quot;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// src/home/controller/index.js</div><div class="line">let assets = this.config(&apos;assets&apos;);</div><div class="line">let siteTitle = assets[&apos;site_title&apos;];</div><div class="line">console.log(&apos;siteTitle is: &apos;, siteTitle); // my test</div></pre></td></tr></table></figure>
<h2 id="Babel-编译时删除注释"><a href="#Babel-编译时删除注释" class="headerlink" title="Babel 编译时删除注释"></a>Babel 编译时删除注释</h2><p>开发时的工作代码都在 src 下面，运行时才会编译到 app 下面成为运行脚本（经过 Babel 编译），如果不想自己写的各种注释也出现在 app 下面的代码中，可以修改项目目录下的一个隐藏文件 .babelrc 增加相应 comments 参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;presets&quot;: [</div><div class="line">    [&quot;es2015&quot;, &#123;&quot;loose&quot;: true&#125;],</div><div class="line">    &quot;stage-1&quot;</div><div class="line">  ],</div><div class="line">  &quot;plugins&quot;: [&quot;transform-runtime&quot;],</div><div class="line">  &quot;sourceMaps&quot;: true,</div><div class="line">  &quot;comments&quot;: false  # &lt;-- 就是这个参数</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><p>目前，thinkJs支持两种控制器：普通的控制器和多级控制器。<br>支持<strong>before和</strong>after这样的回调钩子，对于app和controller控制来说是非常实用的。使用co来实现也是可圈可点，此处如果使用koa可以更加优雅。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">class PathController extends BaseController &#123;</div><div class="line">  constructor(app, ctx, next) &#123;</div><div class="line">    super(app, ctx, next)</div><div class="line">    </div><div class="line">    this.path = &apos;/c&apos;</div><div class="line">    // this.global_filter.push(&apos;custom_filter&apos;)</div><div class="line">    this.post_filter = [this.log]</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  before() &#123;</div><div class="line">  </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  log(ctx, next) &#123;</div><div class="line">    ctx.someText = &apos;some&apos;</div><div class="line">    // console.log(&apos;before&apos;)</div><div class="line">    return next().then(function()&#123;</div><div class="line">      // console.log(&apos;after&apos;)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  post(req, res) &#123;</div><div class="line">    console.log(this.ctx.someText)</div><div class="line">    var a = this.reqbody.a</div><div class="line">    </div><div class="line">    return res.body = this.ctx.someText</div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  after() &#123;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="修改-pm2-日志位置"><a href="#修改-pm2-日志位置" class="headerlink" title="修改 pm2 日志位置"></a>修改 pm2 日志位置</h2><p>pm2 （官网 <a href="http://pm2.keymetrics.io）是一个优秀的" target="_blank" rel="external">http://pm2.keymetrics.io）是一个优秀的</a> Node.js 进程管理器。thinkjs 推荐使用 pm2 来管理项目运行，并自动生成了 pm2 的配置文件 pm2.json 。</p>
<p>它的强大之处在于不仅可以作为 Node.js 项目的守护进程，还具备可配置化启动、分布式支持、内存监控、热重载（优雅重载）、支持数据统计、运行日志记录、实时运行监控、API 和脚本支持等强大的特性。</p>
<p>默认生成的 pm2 配置文件不含日志记录部分，如果不单独配置，pm2 的日志将会保存在安装目录中，查找起来很不方便。普遍的做法是：在项目目录下建立 logs 文件夹，用来放置 pm2 以及其他（诸如 log4js 等等）日志，打开 pm2.json ，给 apps[0] 增加如下几行配置参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;apps&quot;: [&#123;</div><div class="line">    &quot;error_file&quot;      : &quot;/data/www/thinkjs_module/logs/pm2-err.log&quot;,</div><div class="line">    &quot;out_file&quot;        : &quot;/data/www/thinkjs_module/logs/pm2-out.log&quot;,</div><div class="line">    &quot;log_date_format&quot; : &quot;YYYY-MM-DD HH:mm:ss Z&quot;,</div><div class="line">    &quot;merge_logs&quot;      : false</div><div class="line">  &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>error_file pm2 捕捉到的致命错误记录在这里</li>
<li>out_file pm2 接收到的 console 输出记录在这里</li>
<li>log_date_format 日期和时间格式</li>
<li>merge_logs 是否给日志文件增加进程id的后缀</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>主要优势：</p>
<ul>
<li>完全自己实现，对已有框架很少借鉴</li>
<li>内置各种adapter，db，中间件，hook，插件，非常丰富，all in one 比组装更适合新手</li>
<li>遵循mvc和coc</li>
<li>使用最潮的es6/es7/ts特性，对aysnc函数，exports等都非常好的支持</li>
<li>支持i18n等实用功能</li>
<li>内置pm2和nginx集成，部署方便</li>
<li>有自己的脚手架，稍弱</li>
<li>性能不错，虽然比express稍弱，但功能强大许多</li>
<li>测试丰富，代码质量有保障</li>
<li>文档健全，是经过设计的，支持多语言</li>
<li>背后有75团和李成银支持，最近一周内有更新，代码提交2600+，35人贡献，整体来说算健康</li>
</ul>
<p>附：<a href="https://thinkjs.org/doc/index.html" target="_blank" rel="external">ThinkJS官网文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://thinkjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Thinkjs&lt;/a&gt; 是一个快速、简单的基于MVC和面向对象的轻量级Node.js开发框架，遵循MIT协议发布。秉承简洁易用的设计原则，在保持出色的
    
    </summary>
    
      <category term="前端" scheme="http://www.xiangzhihong.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://www.xiangzhihong.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vuejs和其他前端框架的对比</title>
    <link href="http://www.xiangzhihong.com/2017/07/11/Vuejs%E5%92%8C%E5%85%B6%E4%BB%96%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E7%9A%84%E5%AF%B9%E6%AF%94/"/>
    <id>http://www.xiangzhihong.com/2017/07/11/Vuejs和其他前端框架的对比/</id>
    <published>2017-07-10T16:00:00.000Z</published>
    <updated>2017-09-27T02:44:31.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><p>React 和 Vue 有许多相似之处，它们都有：</p>
<ul>
<li>使用 Virtual DOM</li>
<li>提供了响应式 (Reactive) 和组件化 (Composable) 的视图组件。</li>
<li>将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库。</li>
</ul>
<p>由于有着众多的相似处，我们会用更多的时间在这一块进行比较。这里我们不只保证技术内容的准确性，同时也兼顾了平衡的考量。我们需要承认 React 比 Vue 更好的地方，比如更丰富的生态系统。</p>
<h2 id="相似之处"><a href="#相似之处" class="headerlink" title="相似之处"></a>相似之处</h2><p>React与Vue存在很多相似之处，例如他们都是JavaScript的UI框架，专注于创造前端的富应用。不同于早期的JavaScript框架“功能齐全”，Reat与Vue只有框架的骨架，其他的功能如路由、状态管理等是框架分离的组件。</p>
<h3 id="Virtual-DOM"><a href="#Virtual-DOM" class="headerlink" title="Virtual DOM"></a>Virtual DOM</h3><p>Vue.js(2.0版本)与React的其中最大一个相似之处，就是他们都使用了一种叫’Virtual DOM’的东西。所谓的Virtual DOM基本上说就是它名字的意思：虚拟DOM，DOM树的虚拟表现。它的诞生是基于这么一个概念：改变真实的DOM状态远比改变一个JavaScript对象的花销要大得多。</p>
<p>简单来说，Virtual DOM是一个映射真实DOM的JavaScript对象，如果需要改变任何元素的状态，那么是先在Virtual DOM上进行改变，而不是直接改变真实的DOM。当有变化产生时，一个新的Virtual DOM对象会被创建并计算新旧Virtual DOM之间的差别。之后这些差别会应用在真实的DOM上。</p>
<p>例子如下，我们可以看看下面这个列表在HTML中的代码是如何写的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ul class=&quot;list&quot;&gt;</div><div class="line">  &lt;li&gt;item 1&lt;/li&gt;</div><div class="line">  &lt;li&gt;item 2&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>而在JavaScript中，我们可以用对象简单地创造一个针对上面例子的映射：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    type: &apos;ul&apos;, </div><div class="line">    props: &#123;&apos;class&apos;: &apos;list&apos;&#125;, </div><div class="line">    children: [</div><div class="line">        &#123; type: &apos;li&apos;, props: &#123;&#125;, children: [&apos;item 1&apos;] &#125;,</div><div class="line">        &#123; type: &apos;li&apos;, props: &#123;&#125;, children: [&apos;item 2&apos;] &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>真实的Virtual DOM会比上面的例子更复杂，但它本质上是一个嵌套着数组的原生对象。当新一项被加进去这个JavaScript对象时，一个函数会计算新旧Virtual DOM之间的差异并反应在真实的DOM上。计算差异的算法是高性能框架的秘密所在，React和Vue在实现上有点不同。</p>
<p>Vue宣称可以<a href="https://cn.vuejs.org/v2/guide/comparison.html#React" target="_blank" rel="external">更快地计算出Virtual DOM</a>的差异，这是由于它在渲染过程中，会跟踪每一个组件的依赖关系，不需要重新渲染整个组件树。</p>
<p>而对于React而言，<a href="https://facebook.github.io/react/docs/react-component.html?utm_source=caibaojian.com#shouldcomponentupdate" target="_blank" rel="external">每当应用的状态被改变时</a>，全部子组件都会重新渲染。当然，这可以通过shouldComponentUpdate这个生命周期方法来进行控制，但Vue将此视为默认的优化。</p>
<h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p>React与Vue都鼓励组件化应用。这本质上说，是建议你将你的应用分拆成一个个功能明确的模块，每个模块之间可以通过合适的方式互相联系。在Vue中，如果你遵守一定的规则，你可以使用<a href="https://vuejs.org/v2/guide/single-file-components.html?utm_source=caibaojian.com" target="_blank" rel="external">单文件组件</a>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">//PastaItem.vue</div><div class="line"></div><div class="line">&lt;template&gt;</div><div class="line">&lt;li class=&quot;pasta-dish list-unstyled&quot;&gt;</div><div class="line">    &lt;div class=&quot;row&quot;&gt;</div><div class="line">        &lt;div class=&quot;col-md-3&quot;&gt;</div><div class="line">            &lt;img :src=&quot;this.item.image&quot; :alt=&quot;this.item.name&quot; /&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div class=&quot;col-md-9 text-left&quot;&gt;</div><div class="line">            &lt;h3&gt;&#123;&#123;this.item.name&#125;&#125;&lt;/h3&gt;</div><div class="line">            &lt;p&gt;</div><div class="line">                &#123;&#123;this.item.desc&#125;&#125;</div><div class="line">            &lt;/p&gt;</div><div class="line">            &lt;button v-on:click=&quot;addToOrderNew&quot; class=&quot;btn btn-primary&quot;&gt;Add to order&lt;/button&gt; &lt;mark&gt;&#123;&#123;this.orders&#125;&#125;&lt;/mark&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/li&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">    name: &apos;pasta-item&apos;,</div><div class="line">    props: [&apos;item&apos;],</div><div class="line">    data:  function()&#123;</div><div class="line">        return&#123;</div><div class="line">            orders: 0</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">        addToOrderNew: function(y)&#123;</div><div class="line">            this.orders += 1;</div><div class="line">            this.$emit(&apos;order&apos;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;style src=&quot;./Pasta.css&quot;&gt;&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>正如上面你看到的例子中，HTML, JavaScript和CSS都写在一个文件之中，你不再需要在.vue组件文件中引入CSS。<br>而在React语法中，JavaScript与JSX被写入同一个组件文件中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line"></div><div class="line">class PastaItem extends React.Component &#123;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        const &#123; details, index &#125; = this.props;</div><div class="line"></div><div class="line">        return (</div><div class="line">            &lt;li className=&quot;pasta-dish list-unstyled&quot;&gt;</div><div class="line">                &lt;div className=&quot;row&quot;&gt;</div><div class="line">                    &lt;div className=&quot;col-md-3&quot;&gt;</div><div class="line">                        &lt;img src=&#123;details.image&#125; alt=&#123;details.name&#125; /&gt;</div><div class="line">                    &lt;/div&gt;</div><div class="line">                    &lt;div className=&quot;col-md-9 text-left&quot;&gt;</div><div class="line">                        &lt;h3&gt;&#123;details.name&#125;&lt;/h3&gt;</div><div class="line">                        &lt;p&gt;</div><div class="line">                            &#123;details.desc&#125;</div><div class="line">                        &lt;/p&gt;</div><div class="line">                        &lt;button onClick=&#123;() =&gt; this.props.addToOrder(index)&#125; className=&quot;btn btn-primary&quot;&gt;Add to order&lt;/button&gt; &lt;mark&gt;&#123;this.props.orders || 0&#125;&lt;/mark&gt;</div><div class="line">                    &lt;/div&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default PastaItem;</div></pre></td></tr></table></figure>
<h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><p>在上面两个例子中，我们可以看到React和Vue都有’props’的概念，这是properties的简写。props在组件中是一个特殊的属性，允许父组件往子组件传送数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Object.keys(this.state.pastadishes).map(key =&gt;</div><div class="line">    &lt;PastaItem index=&#123;key&#125; key=&#123;key&#125; details=&#123;this.state.pastadishes[key]&#125; addToOrder=&#123;this.addToOrder&#125; orders=&#123;this.state.orders[key]&#125; /&gt;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>上面的JSX库组中，index, key, details, orders 与 addToOrder都是props，数据会被下传到子组件PastaItem中去。</p>
<p>在React中，这是必须的，它依赖一个“单一数据源”作为它的“状态”。而在Vue中，props略有不同。它们一样是在组件中被定义，但Vue依赖于模板语法，你可以通过模板的循环函数更高效地展示传入的数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;pasta-item v-for=&quot;(item, key) in samplePasta&quot; :item=&quot;item&quot; :key=&quot;key&quot; @order=&quot;handleOrder(key)&quot;&gt;&lt;/pasta-item&gt;</div></pre></td></tr></table></figure>
<h3 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h3><p>React和Vue都有自己的构建工具，你可以使用它快速搭建开发环境。React可以使用<a href="https://github.com/facebookincubator/create-react-app?utm_source=caibaojian.com" target="_blank" rel="external">Create React App (CRA)</a>，而Vue对应的则是<a href="https://github.com/vuejs/vue-cli?utm_source=caibaojian.com" target="_blank" rel="external">vue-cli</a>。两个工具都能让你得到一个根据最佳实践设置的项目模板。</p>
<p>由于CRA有很多选项，使用起来会稍微麻烦一点。这个工具会逼迫你使用<a href="https://webpack.js.org/?utm_source=caibaojian.com" target="_blank" rel="external">Webpack</a>和<a href="https://babeljs.io/?utm_source=caibaojian.com" target="_blank" rel="external">Babel</a>。而vue-cli则有<a href="https://github.com/vuejs-templates?utm_source=caibaojian.com" target="_blank" rel="external">模板列表</a>可选，能按需创造不同模板，使用起来更灵活一点。</p>
<p>事实上说，两个工具都非常好用，都能为你建立一个好环境。而且如果可以不配置Webpack的话，我和Jeff认为这是天大的好事。</p>
<h3 id="Chrome-开发工具"><a href="#Chrome-开发工具" class="headerlink" title="Chrome 开发工具"></a>Chrome 开发工具</h3><p>React和Vue都有很好的Chrome扩展工具去帮助你找出bug。它们会检查你的应用，让你看到Vue或者React中的变化。你也可以看到应用中的状态，并实时看到更新。</p>
<p>React的开发工具:<br><a href="https://cdn.deliciousbrains.com/content/uploads/2017/06/15151112/react-devtools.mp4" target="_blank" rel="external">https://cdn.deliciousbrains.com/content/uploads/2017/06/15151112/react-devtools.mp4</a></p>
<p>Vue的开发工具:<br><a href="https://cdn.deliciousbrains.com/content/uploads/2017/06/15151111/vue-devtools.mp4" target="_blank" rel="external">https://cdn.deliciousbrains.com/content/uploads/2017/06/15151111/vue-devtools.mp4</a></p>
<h2 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a>主要区别</h2><p>Vue与React最后一个相似但略有不同之处是它们配套框架的处理方法。相同之处在于，两个框架都专注于UI层，其他的功能如路由、状态管理等都交由同伴框架进行处理。</p>
<p>而不同之处是在于它们如何关联它们各自的配套框架。Vue的核心团队维护着<a href="https://github.com/vuejs/vue-router?utm_source=caibaojian.com" target="_blank" rel="external">vue-router</a>和<a href="https://github.com/vuejs/vuex?utm_source=caibaojian.com" target="_blank" rel="external">vuex</a>，它们都是作为官方推荐的存在。而React的<a href="https://github.com/ReactTraining/react-router?utm_source=caibaojian.com" target="_blank" rel="external">react-router</a>和<a href="http://redux.js.org/?utm_source=caibaojian.com" target="_blank" rel="external">react-redux</a>则是由社区成员维护，它们都不是官方维护的。</p>
<h3 id="模板-vs-JSX"><a href="#模板-vs-JSX" class="headerlink" title="模板 vs JSX"></a>模板 vs JSX</h3><p>React与Vue最大的不同是模板的编写。Vue鼓励你去写近似常规HTML的模板。写起来很接近标准HTML元素，只是多了一些属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">    &lt;template v-for=&quot;item in items&quot;&gt;</div><div class="line">        &lt;li&gt;&#123;&#123; item.msg &#125;&#125;&lt;/li&gt;</div><div class="line">        &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;</div><div class="line">    &lt;/template&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>这些属性也可以被使用在单文件组件中，尽管它需要在在<a href="https://vuejs.org/v2/guide/single-file-components.html?utm_source=caibaojian.com" target="_blank" rel="external">构建时</a>将组件转换为合法的JavaScript和HTML。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">  &lt;pasta-item v-for=&quot;(item, key) in samplePasta&quot; :item=&quot;item&quot; :key=&quot;key&quot; @order=&quot;handleOrder(key)&quot;&gt;&lt;/pasta-item&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>Vue鼓励你去使用HTML模板去进行渲染，使用相似于Angular风格的方法去输出动态的内容。因此，通过把原有的模板整合成新的Vue模板，Vue很容易提供旧的应用的升级。这也让新来者很容易适应它的语法。</p>
<p>React推荐你所有的模板通用JavaScript的语法扩展——<a href="https://facebook.github.io/react/docs/introducing-jsx.html?utm_source=caibaojian.com" target="_blank" rel="external">JSX</a>书写，不过这对于传统的前端开发人员需要相应的学习。同样的代码，用JSX书写的例子如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;ul className=&quot;pasta-list&quot;&gt;</div><div class="line">    &#123;</div><div class="line">        Object.keys(this.state.pastadishes).map(key =&gt;</div><div class="line">            &lt;PastaItem index=&#123;key&#125; key=&#123;key&#125; details=&#123;this.state.pastadishes[key]&#125; addToOrder=&#123;this.addToOrder&#125; orders=&#123;this.state.orders[key]&#125; /&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>React/JSX乍看之下，觉得非常啰嗦，但使用JavaScript而不是模板来开发，赋予了开发者许多编程能力。</p>
<h3 id="状态管理-vs-对象属性"><a href="#状态管理-vs-对象属性" class="headerlink" title="状态管理 vs 对象属性"></a>状态管理 vs 对象属性</h3><p>如果你对React熟悉，你就会知道应用中的状态是（React）关键的概念。也有一些配套框架被设计为管理一个大的state对象，如Redux。此外，state对象在React应用中是不可变的，意味着它不能被直接改变，在React中你需要使用setState()方法去更新状态。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">addToOrder(key) &#123;</div><div class="line">       //Make a copy of this.state</div><div class="line">       const orders = &#123; ...this.state.orders &#125;;</div><div class="line"></div><div class="line">       //update or add</div><div class="line">       orders[ key ] = orders[ key ] + 1 || 1;</div><div class="line">       this.setState( &#123; orders &#125; );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Vue中，state对象并不是必须的，数据由data属性在Vue对象中进行管理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">export default &#123;</div><div class="line">  name: &apos;app&apos;,</div><div class="line">  data() &#123;</div><div class="line">    return &#123;</div><div class="line">      samplePasta: samplePasta,</div><div class="line">      orders: &#123;&#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">...</div><div class="line">  methods: &#123;</div><div class="line">    handleOrder: function (key) &#123;</div><div class="line"></div><div class="line">      if (!this.orders.hasOwnProperty(key)) &#123;</div><div class="line">        this.$set(this.orders, key, &#123; count: 0 &#125;);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      this.orders[key].count += 1;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而在Vue中，则不需要使用如setState()之类的方法去改变它的状态，在Vue对象中，data参数就是应用中数据的保存者。</p>
<p>不过恶心的是React出了一个霸王条款：<a href="https://yq.aliyun.com/roundtable/59146?spm=5176.8217306.rtmain.26.ZEwc2t" target="_blank" rel="external">Facebook拒修改React开源许可</a></p>
<h1 id="Angularjs"><a href="#Angularjs" class="headerlink" title="Angularjs"></a>Angularjs</h1><p>Vue 的一些语法和 AngularJS 的很相似 (例如 v-if vs ng-if)。因为 AngularJS 是 Vue 早期开发的灵感来源。然而，AngularJS 中存在的许多问题，在 Vue 中已经得到解决。</p>
<h3 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h3><p>1，MVVM（Model）(View)(View-model)<br>2，模块化（Module）控制器（Contoller）依赖注入：<br>3，双向数据绑定：界面的操作能实时反映到数据，数据的变更能实时展现到界面。<br>4，指令(ng-click ng-model ng-href ng-src ng-if…)<br>5，服务Service($compile $filter $interval $timeout $http…)<br>其中双向数据绑定的实现使用了$scope变量的脏值检测，使用$scope.$watch（视图到模型），$scope.$apply(模型到视图)检测，内部调用的都是digest，当然也可以直接调用$scope.$digest进行脏检查。值得注意的是当数据变化十分频繁时，脏检测对浏览器性能的消耗将会很大，官方注明的最大检测脏值为2000个数据。</p>
<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>vue.js官网：是一套构建用户界面的 渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue 完全有能力驱动采用单文件组件和 Vue 生态系统支持的库开发的复杂单页应用。</p>
<p>Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p>
<p>（1）模块化，目前最热的方式是在项目中直接使用ES6的模块化，结合Webpack进行项目打包<br>（2）组件化，创造单个component后缀为.vue的文件，包含template(html代码)，script(es6代码),style(css样式)<br>（3）路由，<br>vue非常小巧，压缩后min源码为72.9kb，gzip压缩后只有25.11kb，想比Angular为144kb，可以自驾搭配使用需要的库插件，类似路由插件(Vue-router)，Ajax插件(vue-resource)等</p>
<p>下面从几个方面来比较一下Vue.js和Angular.js的区别</p>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><p>Angular 事实上必须用 TypeScript 来开发，因为它的文档和学习资源几乎全部是面向 TS 的。TS 有很多显而易见的好处 —— 静态类型检查在大规模的应用中非常有用，同时对于 Java 和 C# 背景的开发者也是非常提升开发效率的。<br>然而，并不是所有人都想用 TS —— 在中小型规模的项目中，引入 TS 可能并不会带来太多明显的优势。在这些情况下，用 Vue 会是更好的选择，因为在不用 TS 的情况下使用 Angular 会很有挑战性。<br>最后，虽然 Vue 和 TS 的整合可能不如 Angular 那么深入，我们也提供了官方的 类型声明 和 组件装饰器，并且知道有大量用户在生产环境中使用 Vue + TS 的组合。我们也和微软的 TS / VSCode 团队进行着积极的合作，目标是为 Vue + TS 用户提供更好的类型检查和 IDE 开发体验。</p>
<p>##大小和性能</p>
<p>在性能方面，这两个框架都非常的快，我们也没有足够的实际应用数据来下一个结论。如果你一定想看些数据的话，你可以参考这个<a href="http://stefankrause.net/js-frameworks-benchmark4/webdriver-ts/table.html" target="_blank" rel="external">第三方跑分</a>。单就这个跑分来看，Vue 似乎比 Angular 要更快一些。<br>在大小方面，最近的 Angular 版本中在使用了 AOT 和 tree-shaking 技术后使得最终的代码体积减小了许多。但即使如此，一个包含了 Vuex + Vue Router 的 Vue 项目 (30kb gzipped) 相比使用了这些优化的 angular-cli 生成的默认项目尺寸 (~130kb) 还是要小的多。<br>灵活性</p>
<p>Vue 相比于 Angular 更加灵活，Vue 官方提供了构建工具来协助你构建项目，但它并不限制你去如何组织你的应用代码。有人可能喜欢有严格的代码组织规范，但也有开发者喜欢更灵活自由的方式。<br>学习曲线</p>
<p>要学习 Vue，你只需要有良好的 HTML 和 JavaScript 基础。有了这些基本的技能，你就可以非常快速地通过阅读 指南 投入开发。<br>Angular 的学习曲线是非常陡峭的 —— 作为一个框架，它的 API 面积比起 Vue 要大得多，你也因此需要理解更多的概念才能开始有效率地工作。当然，Angular 本身的复杂度是因为它的设计目标就是只针对大型的复杂应用；但不可否认的是，这也使得它对于经验不甚丰富的开发者相当的不友好。</p>
<p>不过就算有这么多好处，但是相比Angular2，Vue还是有很多的不足：</p>
<ol>
<li>Angular2原生Form支持： Angular2原生的Form模块功能相当强大。除了双向绑定之类的基本功能，还能通过programatic API 控制dom元素的表单行为。也有成型API提供自定义validator。这一点Vue只有v-model和第三方库。对于后台之类的重表单应用，还是Ng2有优势。</li>
<li>依赖注入无论你喜不喜欢DI，这就是Angular2的强大功能之一。有DI可以在不改变代码结构的情况下完成功能替换。（如，在desktop和mobile有不同功能，可以通过注入不同service实现，而共用相同的template和directive）。Vue则需要程序员自己规划代码组织，用来支持共享组件。DI也可以用于类似module local state的功能。比如，一个视频播放控件有几个子组件完成，子组件需要分享一个状态。这一点Angular2有原生的service injection pattern。而Vue则没有官方推荐。</li>
<li>对标准向后兼容Angular2在一些细节上对标准有更好的支持。比如 list differ 算法中 Angular2 可以支持实现了Symbol.iterator的对象，而Vue只能支持Array。对Observable和Promise，Angular2在应用的各个地方，甚至模板级别都有支持(async pipe)。而Vue需要vue-rx等第三方库支持。Angular2的组件有shadow dom的实现可以选择，而Vue目前还没有。</li>
<li>测试Angular2一开始就设计好了如何对组件进行测试，而Vue组件虽然也很好写测试，但是没有官方推荐的唯一标准（当然，对视图是否需要测试还有待探讨）。除此以外，Angular2还有一些小功能比如检验模板的类型安全（即，模板里能在编译器保证没有引用model未定义的变量），不过AoT本身似乎还没有稳定，所以不能算优势。对TS的支持也是Angular好，当然前提是你喜欢TS。</li>
</ol>
<h1 id="Ember"><a href="#Ember" class="headerlink" title="Ember"></a>Ember</h1><p>Ember 是一个全能框架。它提供了大量的约定，一旦你熟悉了它们，开发会变得很高效。不过，这也意味着学习曲线较高，而且并不灵活。这意味着在框架和库 (加上一系列松散耦合的工具) 之间做权衡选择。后者会更自由，但是也要求你做更多架构上的决定。<br>也就是说，我们最好比较的是 Vue 内核和 Ember 的模板与数据模型层：</p>
<ul>
<li>Vue 在普通 JavaScript 对象上建立响应，提供自动化的计算属性。在 Ember 中需要将所有东西放在 Ember<br>对象内，并且手工为计算属性声明依赖。</li>
<li>Vue 的模板语法可以用全功能的 JavaScript 表达式，而 Handlebars 的语法和帮助函数相比来说非常受限。</li>
<li>在性能上，Vue 比 Ember 好很多，即使是 Ember 2.x 的最新 Glimmer 引擎。Vue 能够自动批量更新，而Ember 在关键性能场景时需要手动管理。</li>
</ul>
<h1 id="Knockout"><a href="#Knockout" class="headerlink" title="Knockout"></a>Knockout</h1><p>Knockout 是 MVVM 领域内的先驱，并且追踪依赖。它的响应系统和 Vue 也很相似。它在<a href="http://knockoutjs.com/documentation/browser-support.html" target="_blank" rel="external">浏览器支持</a>以及其他方面的表现也是让人印象深刻的。它最低能支持到 IE6，而 Vue 最低只能支持到 IE9。<br>随着时间的推移，Knockout 的发展已有所放缓，并且略显有点老旧了。比如，它的组件系统缺少完备的生命周期事件方法，尽管这些在现在是非常常见的。以及相比于 Vue 调用子组件的接口它的方法显得有点笨重。<br>如果你有兴趣研究，你还会发现二者在接口设计的理念上是不同的。这可以通过各自创建的 simple Todo List 体现出来。或许有点主观，但是很多人认为 Vue 的 API 接口更简单结构更优雅。</p>
<h1 id="Polymer"><a href="#Polymer" class="headerlink" title="Polymer"></a>Polymer</h1><p>Polymer 是另一个由谷歌赞助的项目，事实上也是 Vue 的一个灵感来源。Vue 的组件可以粗略的类比于 Polymer 的自定义元素，并且两者具有相似的开发风格。最大的不同之处在于，Polymer 是基于最新版的 Web Components 标准之上，并且需要重量级的 polyfills 来帮助工作 (性能下降)，浏览器本身并不支持这些功能。相比而言，Vue 在支持到 IE9 的情况下并不需要依赖 polyfills 来工作。<br>在 Polymer 1.0 版本中，为了弥补性能，团队非常有限的使用数据绑定系统。例如，在 Polymer 中唯一支持的表达式只有布尔值否定和单一的方法调用，它的 computed 方法的实现也并不是很灵活。<br>Polymer 自定义的元素是用 HTML 文件来创建的，这会限制使用 JavaScript/CSS (和被现代浏览器普遍支持的语言特性)。相比之下，Vue 的单文件组件允许你非常容易的使用 ES2015 和你想用的 CSS 预编译处理器。<br>在部署生产环境时，Polymer 建议使用 HTML Imports 加载所有资源。而这要求服务器和客户端都支持 Http 2.0 协议，并且浏览器实现了此标准。这是否可行就取决于你的目标用户和部署环境了。如果状况不佳，你必须用 Vulcanizer 工具来打包 Polymer 元素。而在这方面，Vue 可以结合异步组件的特性和 Webpack 的代码分割特性来实现懒加载 (lazy-loaded)。这同时确保了对旧浏览器的兼容且又能更快加载。<br>而 Vue 和 Web Component 标准进行深层次的整合也是完全可行的，比如使用 Custom Elements、Shadow DOM 的样式封装。然而在我们做出严肃的实现承诺之前，我们目前仍在等待相关标准成熟，进而再广泛应用于主流的浏览器中。</p>
<h1 id="Riot"><a href="#Riot" class="headerlink" title="Riot"></a>Riot</h1><p>Riot 2.0 提供了一个类似于基于组件的开发模型 (在 Riot 中称之为 Tag)，它提供了小巧精美的 API。Riot 和 Vue 在设计理念上可能有许多相似处。尽管相比 Riot ，Vue 要显得重一点，Vue 还是有很多显著优势的：</p>
<ul>
<li>过渡效果系统。Riot 现在还没有提供。</li>
<li>功能更加强大的路由机制，Riot 的路由功能的 API 是极少的。</li>
<li>更好的性能。Riot 使用了 遍历 DOM 树 而不是虚拟 DOM，但实际上用的还是脏检查机制，因此和 AngularJS患有相同的性能问题。</li>
<li>更多成熟工具的支持。Vue 提供官方支持 webpack 和 Browserify，而 Riot 是依靠社区来建立集成系统。</li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink&quot; title=&quot;React&quot;&gt;&lt;/a&gt;React&lt;/h1&gt;&lt;p&gt;React 和 Vue 有许多相似之处，它们都有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 Virtual DOM&lt;/li&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.xiangzhihong.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://www.xiangzhihong.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="知识库" scheme="http://www.xiangzhihong.com/tags/%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序之picker组件</title>
    <link href="http://www.xiangzhihong.com/2017/06/14/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8Bpicker%E7%BB%84%E4%BB%B6/"/>
    <id>http://www.xiangzhihong.com/2017/06/14/微信小程序之picker组件/</id>
    <published>2017-06-13T16:00:00.000Z</published>
    <updated>2017-09-30T02:34:01.665Z</updated>
    
    <content type="html"><![CDATA[<p>作为移动端的分发入口，微信小程序虽然没有当初期望的那么火，但是却是一个不能忽视的入口。撇开微信小程序对于腾讯生态的原因不说，微信小程序对于开发还是很方便的，特别是对于白痴选手来说，基本不需要多少过多的学习，就能写一个不错的小程序。</p>
<p>下面就微信小程序常见的组件分别做详细的介绍，本篇主要介绍picker组件。运行效果如下：<br><img src="http://img.blog.csdn.net/20170926170228873?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>picker选择器分为5种：分别是普通选择器，多列选择器，时间选择器，日期选择器，省市区选择器，默认是普通选择器，可以用mode属性区分。</p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="普通选择器"><a href="#普通选择器" class="headerlink" title="普通选择器"></a>普通选择器</h3><p>设置mode = selector。</p>
<table><br>        <tr><br>            <th>属性名</th><br>            <th>类型</th><br>            <th>默认值</th><br>            <th>说明</th><br>        </tr><br>         <tr><br>            <th>range</th><br>            <th>Array / Object Array</th><br>            <th>[]</th><br>            <th>mode为 selector 或 multiSelector 时，range 有效</th><br>        </tr><br>        <tr><br>            <th>range-key</th><br>            <th>String</th><br>            <th></th><br>            <th>当 range 是一个 Object Array 时，通过 range-key 来指定 Object 中 key 的值作为选择器显示内容</th><br>        </tr><br>         <tr><br>            <th>value</th><br>            <th>Number</th><br>            <th>0</th><br>            <th>value 的值表示选择了 range 中的第几个（下标从 0 开始）</th><br>        </tr><br>        <tr><br>            <th>bindchange</th><br>            <th>EventHandle</th><br>            <th> </th><br>            <th>value 改变时触发 change 事件，event.detail = {value: value}</th><br>        </tr><br>        <tr><br>            <th>disabled</th><br>            <th>Boolean</th><br>            <th> false</th><br>            <th>是否禁用</th><br>        </tr><br></table>

<h3 id="多列选择器"><a href="#多列选择器" class="headerlink" title="多列选择器"></a>多列选择器</h3><p>mode = multiSelector（最低版本：1.4.0）。</p>
<table><br>        <tr><br>            <th>属性名</th><br>            <th>类型</th><br>            <th>默认值</th><br>            <th>说明</th><br>        </tr><br>        <tr><br>            <th>range</th><br>            <th>二维Array / 二维Object Array</th><br>            <th>[]</th><br>            <th>mode为 selector 或 multiSelector 时，range 有效。二维数组，长度表示多少列，数组的每项表示每列的数据，如[[“a”,”b”], [“c”,”d”]]</th><br>        </tr><br>         <tr><br>            <th>range-key</th><br>            <th>String</th><br>            <th></th><br>            <th>当 range 是一个 二维Object Array 时，通过 range-key 来指定 Object 中 key 的值作为选择器显示内容</th><br>        </tr><br>         <tr><br>            <th>value</th><br>            <th>Array</th><br>            <th>[]</th><br>            <th>value 每一项的值表示选择了 range 对应项中的第几个（下标从 0 开始）</th><br>        </tr><br>        <tr><br>            <th>bindchange</th><br>            <th>EventHandle</th><br>            <th></th><br>            <th>value 改变时触发 change 事件，event.detail = {value: value}</th><br>        </tr><br>        <tr><br>            <th>bindcolumnchange</th><br>            <th>EventHandle</th><br>            <th></th><br>            <th>某一列的值改变时触发 columnchange 事件，event.detail = {column: column, value: value}，column 的值表示改变了第几列（下标从0开始），value 的值表示变更值的下标</th><br>        </tr><br>        <tr><br>            <th>disabled</th><br>            <th>Boolean</th><br>            <th>false</th><br>            <th>是否禁用</th><br>        </tr><br> </table>       

<h3 id="时间选择器"><a href="#时间选择器" class="headerlink" title="时间选择器"></a>时间选择器</h3><p>时间选择器：mode = time。</p>
<p><img src="http://img.blog.csdn.net/20170926195025866?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h3 id="日期选择器"><a href="#日期选择器" class="headerlink" title="日期选择器"></a>日期选择器</h3><p>日期选择器：mode = date。<br><img src="http://img.blog.csdn.net/20170926195218972?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>fields 自动对应的有效值：<br><img src="http://img.blog.csdn.net/20170926195316306?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h3 id="省市区选择器"><a href="#省市区选择器" class="headerlink" title="省市区选择器"></a>省市区选择器</h3><p>mode = region（最低版本：1.4.0）。<br><img src="http://img.blog.csdn.net/20170926195408230?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="官方示例"><a href="#官方示例" class="headerlink" title="官方示例"></a>官方示例</h2><p><img src="http://img.blog.csdn.net/20170926195852338?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><p>picker.wxml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;view class=&quot;section&quot;&gt;</div><div class="line">  &lt;view class=&quot;section__title&quot;&gt;普通选择器&lt;/view&gt;</div><div class="line">  &lt;picker bindchange=&quot;bindPickerChange&quot; value=&quot;&#123;&#123;index&#125;&#125;&quot; range=&quot;&#123;&#123;array&#125;&#125;&quot;&gt;</div><div class="line">    &lt;view class=&quot;picker&quot;&gt;</div><div class="line">      当前选择：&#123;&#123;array[index]&#125;&#125;</div><div class="line">    &lt;/view&gt;</div><div class="line">  &lt;/picker&gt;</div><div class="line">&lt;/view&gt;</div><div class="line">&lt;view class=&quot;section&quot;&gt;</div><div class="line">  &lt;view class=&quot;section__title&quot;&gt;多列选择器&lt;/view&gt;</div><div class="line">  &lt;picker mode=&quot;multiSelector&quot; bindchange=&quot;bindMultiPickerChange&quot; bindcolumnchange=&quot;bindMultiPickerColumnChange&quot; value=&quot;&#123;&#123;multiIndex&#125;&#125;&quot; range=&quot;&#123;&#123;multiArray&#125;&#125;&quot;&gt;</div><div class="line">    &lt;view class=&quot;picker&quot;&gt;</div><div class="line">      当前选择：&#123;&#123;multiArray[0][multiIndex[0]]&#125;&#125;，&#123;&#123;multiArray[1][multiIndex[1]]&#125;&#125;，&#123;&#123;multiArray[2][multiIndex[2]]&#125;&#125;</div><div class="line">    &lt;/view&gt;</div><div class="line">  &lt;/picker&gt;</div><div class="line">&lt;/view&gt;</div><div class="line">&lt;view class=&quot;section&quot;&gt;</div><div class="line">  &lt;view class=&quot;section__title&quot;&gt;时间选择器&lt;/view&gt;</div><div class="line">  &lt;picker mode=&quot;time&quot; value=&quot;&#123;&#123;time&#125;&#125;&quot; start=&quot;09:01&quot; end=&quot;21:01&quot; bindchange=&quot;bindTimeChange&quot;&gt;</div><div class="line">    &lt;view class=&quot;picker&quot;&gt;</div><div class="line">      当前选择: &#123;&#123;time&#125;&#125;</div><div class="line">    &lt;/view&gt;</div><div class="line">  &lt;/picker&gt;</div><div class="line">&lt;/view&gt;</div><div class="line"></div><div class="line">&lt;view class=&quot;section&quot;&gt;</div><div class="line">  &lt;view class=&quot;section__title&quot;&gt;日期选择器&lt;/view&gt;</div><div class="line">  &lt;picker mode=&quot;date&quot; value=&quot;&#123;&#123;date&#125;&#125;&quot; start=&quot;2015-09-01&quot; end=&quot;2017-09-01&quot; bindchange=&quot;bindDateChange&quot;&gt;</div><div class="line">    &lt;view class=&quot;picker&quot;&gt;</div><div class="line">      当前选择: &#123;&#123;date&#125;&#125;</div><div class="line">    &lt;/view&gt;</div><div class="line">  &lt;/picker&gt;</div><div class="line">&lt;/view&gt;</div><div class="line">&lt;view class=&quot;section&quot;&gt;</div><div class="line">  &lt;view class=&quot;section__title&quot;&gt;省市区选择器&lt;/view&gt;</div><div class="line">  &lt;picker mode=&quot;region&quot; bindchange=&quot;bindRegionChange&quot; value=&quot;&#123;&#123;region&#125;&#125;&quot; custom-item=&quot;&#123;&#123;customItem&#125;&#125;&quot;&gt;</div><div class="line">    &lt;view class=&quot;picker&quot;&gt;</div><div class="line">      当前选择：&#123;&#123;region[0]&#125;&#125;，&#123;&#123;region[1]&#125;&#125;，&#123;&#123;region[2]&#125;&#125;</div><div class="line">    &lt;/view&gt;</div><div class="line">  &lt;/picker&gt;</div><div class="line">&lt;/view&gt;</div></pre></td></tr></table></figure></p>
<p>对应的packer.js文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div></pre></td><td class="code"><pre><div class="line">Page(&#123;</div><div class="line">  data: &#123;</div><div class="line">    array: [&apos;美国&apos;, &apos;中国&apos;, &apos;巴西&apos;, &apos;日本&apos;],</div><div class="line">    objectArray: [</div><div class="line">      &#123;</div><div class="line">        id: 0,</div><div class="line">        name: &apos;美国&apos;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        id: 1,</div><div class="line">        name: &apos;中国&apos;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        id: 2,</div><div class="line">        name: &apos;巴西&apos;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        id: 3,</div><div class="line">        name: &apos;日本&apos;</div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    index: 0,</div><div class="line">    multiArray: [[&apos;无脊柱动物&apos;, &apos;脊柱动物&apos;], [&apos;扁性动物&apos;, &apos;线形动物&apos;, &apos;环节动物&apos;, &apos;软体动物&apos;, &apos;节肢动物&apos;], [&apos;猪肉绦虫&apos;, &apos;吸血虫&apos;]],</div><div class="line">    objectMultiArray: [</div><div class="line">      [</div><div class="line">        &#123;</div><div class="line">          id: 0,</div><div class="line">          name: &apos;无脊柱动物&apos;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          id: 1,</div><div class="line">          name: &apos;脊柱动物&apos;</div><div class="line">        &#125;</div><div class="line">      ], [</div><div class="line">        &#123;</div><div class="line">          id: 0,</div><div class="line">          name: &apos;扁性动物&apos;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          id: 1,</div><div class="line">          name: &apos;线形动物&apos;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          id: 2,</div><div class="line">          name: &apos;环节动物&apos;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          id: 3,</div><div class="line">          name: &apos;软体动物&apos;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          id: 3,</div><div class="line">          name: &apos;节肢动物&apos;</div><div class="line">        &#125;</div><div class="line">      ], [</div><div class="line">        &#123;</div><div class="line">          id: 0,</div><div class="line">          name: &apos;猪肉绦虫&apos;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          id: 1,</div><div class="line">          name: &apos;吸血虫&apos;</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    ],</div><div class="line">    multiIndex: [0, 0, 0],</div><div class="line">    date: &apos;2016-09-01&apos;,</div><div class="line">    time: &apos;12:01&apos;,</div><div class="line">    region: [&apos;广东省&apos;, &apos;广州市&apos;, &apos;海珠区&apos;],</div><div class="line">    customItem: &apos;全部&apos;</div><div class="line">  &#125;,</div><div class="line">  bindPickerChange: function(e) &#123;</div><div class="line">    console.log(&apos;picker发送选择改变，携带值为&apos;, e.detail.value)</div><div class="line">    this.setData(&#123;</div><div class="line">      index: e.detail.value</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  bindMultiPickerChange: function (e) &#123;</div><div class="line">    console.log(&apos;picker发送选择改变，携带值为&apos;, e.detail.value)</div><div class="line">    this.setData(&#123;</div><div class="line">      multiIndex: e.detail.value</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  bindMultiPickerColumnChange: function (e) &#123;</div><div class="line">    console.log(&apos;修改的列为&apos;, e.detail.column, &apos;，值为&apos;, e.detail.value);</div><div class="line">    var data = &#123;</div><div class="line">      multiArray: this.data.multiArray,</div><div class="line">      multiIndex: this.data.multiIndex</div><div class="line">    &#125;;</div><div class="line">    data.multiIndex[e.detail.column] = e.detail.value;</div><div class="line">    switch (e.detail.column) &#123;</div><div class="line">      case 0:</div><div class="line">        switch (data.multiIndex[0]) &#123;</div><div class="line">          case 0:</div><div class="line">            data.multiArray[1] = [&apos;扁性动物&apos;, &apos;线形动物&apos;, &apos;环节动物&apos;, &apos;软体动物&apos;, &apos;节肢动物&apos;];</div><div class="line">            data.multiArray[2] = [&apos;猪肉绦虫&apos;, &apos;吸血虫&apos;];</div><div class="line">            break;</div><div class="line">          case 1:</div><div class="line">            data.multiArray[1] = [&apos;鱼&apos;, &apos;两栖动物&apos;, &apos;爬行动物&apos;];</div><div class="line">            data.multiArray[2] = [&apos;鲫鱼&apos;, &apos;带鱼&apos;];</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        data.multiIndex[1] = 0;</div><div class="line">        data.multiIndex[2] = 0;</div><div class="line">        break;</div><div class="line">      case 1:</div><div class="line">        switch (data.multiIndex[0]) &#123;</div><div class="line">          case 0:</div><div class="line">            switch (data.multiIndex[1]) &#123;</div><div class="line">              case 0:</div><div class="line">                data.multiArray[2] = [&apos;猪肉绦虫&apos;, &apos;吸血虫&apos;];</div><div class="line">                break;</div><div class="line">              case 1:</div><div class="line">                data.multiArray[2] = [&apos;蛔虫&apos;];</div><div class="line">                break;</div><div class="line">              case 2:</div><div class="line">                data.multiArray[2] = [&apos;蚂蚁&apos;, &apos;蚂蟥&apos;];</div><div class="line">                break;</div><div class="line">              case 3:</div><div class="line">                data.multiArray[2] = [&apos;河蚌&apos;, &apos;蜗牛&apos;, &apos;蛞蝓&apos;];</div><div class="line">                break;</div><div class="line">              case 4:</div><div class="line">                data.multiArray[2] = [&apos;昆虫&apos;, &apos;甲壳动物&apos;, &apos;蛛形动物&apos;, &apos;多足动物&apos;];</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            break;</div><div class="line">          case 1:</div><div class="line">            switch (data.multiIndex[1]) &#123;</div><div class="line">              case 0:</div><div class="line">                data.multiArray[2] = [&apos;鲫鱼&apos;, &apos;带鱼&apos;];</div><div class="line">                break;</div><div class="line">              case 1:</div><div class="line">                data.multiArray[2] = [&apos;青蛙&apos;, &apos;娃娃鱼&apos;];</div><div class="line">                break;</div><div class="line">              case 2:</div><div class="line">                data.multiArray[2] = [&apos;蜥蜴&apos;, &apos;龟&apos;, &apos;壁虎&apos;];</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        data.multiIndex[2] = 0;</div><div class="line">        console.log(data.multiIndex);</div><div class="line">        break;</div><div class="line">    &#125;</div><div class="line">    this.setData(data);</div><div class="line">  &#125;,</div><div class="line">  bindDateChange: function(e) &#123;</div><div class="line">    console.log(&apos;picker发送选择改变，携带值为&apos;, e.detail.value)</div><div class="line">    this.setData(&#123;</div><div class="line">      date: e.detail.value</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  bindTimeChange: function(e) &#123;</div><div class="line">    console.log(&apos;picker发送选择改变，携带值为&apos;, e.detail.value)</div><div class="line">    this.setData(&#123;</div><div class="line">      time: e.detail.value</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  bindRegionChange: function (e) &#123;</div><div class="line">    console.log(&apos;picker发送选择改变，携带值为&apos;, e.detail.value)</div><div class="line">    this.setData(&#123;</div><div class="line">      region: e.detail.value</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>注：关于wxss样式文件这里不再罗列</p>
<h2 id="省市县示例"><a href="#省市县示例" class="headerlink" title="省市县示例"></a>省市县示例</h2><p>我们再来看一下本文开始的时候的例子：<br><img src="http://img.blog.csdn.net/20170926170228873?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>相关代码如下：<br>feedback.wxml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;view class=&quot;container&quot;&gt;</div><div class="line">  &lt;picker bindchange=&quot;bindPickerChange&quot; value=&quot;&#123;&#123;index&#125;&#125;&quot; range=&quot;&#123;&#123;array&#125;&#125;&quot;&gt;</div><div class="line">    &lt;view class=&quot;picker&quot;&gt;</div><div class="line">      &lt;view class=&quot;fb-type&quot;&gt;</div><div class="line">        &lt;view class=&quot;type-label&quot;&gt;&#123;&#123;array[index]&#125;&#125;&lt;/view&gt;</div><div class="line">        &lt;image class=&quot;type-icon&quot; src=&quot;http://yanxuan.nosdn.127.net/hxm/yanxuan-wap/p/20161201/style/img/icon-normal/pickerArrow-a8b918f05f.png&quot;&gt;&lt;/image&gt;</div><div class="line"></div><div class="line">      &lt;/view&gt;</div><div class="line">    &lt;/view&gt;</div><div class="line">  &lt;/picker&gt;</div><div class="line">  &lt;view class=&quot;fb-body&quot;&gt;</div><div class="line">    &lt;textarea class=&quot;content&quot; placeholder=&quot;对我们网站、商品、服务，你还有什么建议吗？你还希望在严选上买到什么？请告诉我们...&quot; /&gt;</div><div class="line">    &lt;view class=&quot;text-count&quot;&gt;0/500&lt;/view&gt;</div><div class="line">  &lt;/view&gt;</div><div class="line">  &lt;view class=&quot;fb-mobile&quot;&gt;</div><div class="line">    &lt;view class=&quot;label&quot;&gt;手机号码&lt;/view&gt;</div><div class="line">    &lt;view class=&quot;mobile-box&quot;&gt;</div><div class="line">      &lt;input class=&quot;mobile&quot; placeholder=&quot;方便我们与你联系&quot; /&gt;</div><div class="line">      &lt;image class=&quot;clear-icon&quot; src=&quot;http://yanxuan.nosdn.127.net/hxm/yanxuan-wap/p/20161201/style/img/icon-normal/clear-fb-dd9d604f86.png&quot;&gt;&lt;/image&gt;</div><div class="line">    &lt;/view&gt;</div><div class="line">  &lt;/view&gt;</div><div class="line"></div><div class="line">  &lt;button class=&quot;fb-btn&quot;&gt;提交&lt;/button&gt;</div><div class="line">&lt;/view&gt;</div></pre></td></tr></table></figure>
<p>样式文件feedback.wxss</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line">page&#123;</div><div class="line">    background: #f4f4f4;</div><div class="line">    min-height: 100%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.container&#123;</div><div class="line">    background: #f4f4f4;</div><div class="line">    min-height: 100%;</div><div class="line">    padding-top: 30rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fb-type&#123;</div><div class="line">  height: 104rpx;</div><div class="line">  width: 100%;</div><div class="line">  background: #fff;</div><div class="line">  margin-bottom: 20rpx;</div><div class="line">  display: flex;</div><div class="line">  flex-direction: row;</div><div class="line">  align-items: center;</div><div class="line">  padding-left: 30rpx;</div><div class="line">  padding-right: 30rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fb-type .type-label&#123;</div><div class="line">  height: 36rpx;</div><div class="line">  flex: 1;</div><div class="line">  color: #333;</div><div class="line">  font-size: 28rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fb-type .type-icon&#123;</div><div class="line">  height: 36rpx;</div><div class="line">  width: 36rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fb-body&#123;</div><div class="line">  width: 100%;</div><div class="line">  background: #fff;</div><div class="line">  height: 374rpx;</div><div class="line">  padding: 18rpx 30rpx 64rpx 30rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fb-body .content&#123;</div><div class="line">  width: 100%;</div><div class="line">  height: 100%;</div><div class="line">  color: #333;</div><div class="line">  line-height: 40rpx;</div><div class="line">  font-size: 28rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fb-body .text-count&#123;</div><div class="line">  padding-top: 17rpx;</div><div class="line">  line-height: 30rpx;</div><div class="line">  float: right;</div><div class="line">  color: #666;</div><div class="line">  font-size: 24rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fb-mobile&#123;</div><div class="line">  height: 162rpx;</div><div class="line">  width: 100%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fb-mobile .label&#123;</div><div class="line">  height: 58rpx;</div><div class="line">  width: 100%;</div><div class="line">  padding-top: 14rpx;</div><div class="line">  padding-bottom: 11rpx;</div><div class="line">  color: #7f7f7f;</div><div class="line">  font-size: 24rpx;</div><div class="line">  padding-left: 30rpx;</div><div class="line">  padding-right: 30rpx;</div><div class="line">  line-height: 33rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fb-mobile .mobile-box&#123;</div><div class="line">  height: 104rpx;</div><div class="line">  width: 100%;</div><div class="line">  color: #333;</div><div class="line">  padding-left: 30rpx;</div><div class="line">  padding-right: 30rpx;</div><div class="line">  font-size: 24rpx;</div><div class="line">  background: #fff;</div><div class="line">  position: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fb-mobile .mobile&#123;</div><div class="line">  position: absolute;</div><div class="line">  top: 27rpx;</div><div class="line">  left: 30rpx;</div><div class="line">  height: 50rpx;</div><div class="line">  width: 100%;</div><div class="line">  color: #333;</div><div class="line">  line-height: 50rpx;</div><div class="line">  font-size: 24rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.clear-icon&#123;</div><div class="line">  position: absolute;</div><div class="line">  top: 43rpx;</div><div class="line">  right: 30rpx;</div><div class="line">  width: 28rpx;</div><div class="line">  height: 28rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fb-btn&#123;</div><div class="line">  width: 100%;</div><div class="line">  height: 98rpx;</div><div class="line">  line-height: 98rpx;</div><div class="line">  background: #b4282d;</div><div class="line">  position: fixed;</div><div class="line">  bottom: 0;</div><div class="line">  left: 0;</div><div class="line">  border-radius: 0;</div><div class="line">  color: #fff;</div><div class="line">  font-size: 28rpx;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>逻辑js：feedback.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">var app = getApp();</div><div class="line"></div><div class="line">Page(&#123;</div><div class="line">  data: &#123;</div><div class="line">    array: [&apos;请选择反馈类型&apos;, &apos;商品相关&apos;, &apos;物流状况&apos;, &apos;客户服务&apos;, &apos;优惠活动&apos;, &apos;功能异常&apos;, &apos;产品建议&apos;, &apos;其他&apos;],</div><div class="line">    index: 0,</div><div class="line">  &#125;,</div><div class="line">  bindPickerChange: function (e) &#123;</div><div class="line">    console.log(&apos;picker发送选择改变，携带值为&apos;, e.detail.value)</div><div class="line">    this.setData(&#123;</div><div class="line">      index: e.detail.value</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  onLoad: function (options) &#123;</div><div class="line">  &#125;,</div><div class="line">  onReady: function () &#123;</div><div class="line"></div><div class="line">  &#125;,</div><div class="line">  onShow: function () &#123;</div><div class="line"></div><div class="line">  &#125;,</div><div class="line">  onHide: function () &#123;</div><div class="line">    // 页面隐藏</div><div class="line"></div><div class="line">  &#125;,</div><div class="line">  onUnload: function () &#123;</div><div class="line">    // 页面关闭</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为移动端的分发入口，微信小程序虽然没有当初期望的那么火，但是却是一个不能忽视的入口。撇开微信小程序对于腾讯生态的原因不说，微信小程序对于开发还是很方便的，特别是对于白痴选手来说，基本不需要多少过多的学习，就能写一个不错的小程序。&lt;/p&gt;
&lt;p&gt;下面就微信小程序常见的组件分
    
    </summary>
    
      <category term="小程序" scheme="http://www.xiangzhihong.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://www.xiangzhihong.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="微信" scheme="http://www.xiangzhihong.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>Google V8引擎</title>
    <link href="http://www.xiangzhihong.com/2017/06/03/Google%20V8%E5%BC%95%E6%93%8E/"/>
    <id>http://www.xiangzhihong.com/2017/06/03/Google V8引擎/</id>
    <published>2017-06-02T16:00:00.000Z</published>
    <updated>2017-08-09T01:59:22.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V8的前世今生"><a href="#V8的前世今生" class="headerlink" title="V8的前世今生"></a>V8的前世今生</h1><p>V8是JavaScript渲染引擎，第一个版本随着Chrome的发布而发布(具体时间为2008年9月2日)。在运行JavaScript之前，相比其它的JavaScript的引擎转换成字节码或解释执行，V8将其编译成原生机器码（IA-32, x86-64, ARM, or MIPS CPUs），并且使用了如内联缓存（inline caching）等方法来提高性能。V8可以独立运行，也可以嵌入到C++应用程序中运行。</p>
<p>随着Web技术的快速发展，JavaScript所要承担的工作也越来越多，早就超越了“表单验证”的范畴，这就更需要快速的解析和执行JavaScript脚本。V8引擎就是为解决这一问题而生，在Node中也采用该引擎来解析JavaScript。</p>
<p>那么，V8是如何使得实现对JavaScript的解析，又是如何实现高性能的呢？下面从几个方面来分析下V8是如何渲染页面的。</p>
<h1 id="渲染引擎与网页渲染"><a href="#渲染引擎与网页渲染" class="headerlink" title="渲染引擎与网页渲染"></a>渲染引擎与网页渲染</h1><h3 id="编程分类"><a href="#编程分类" class="headerlink" title="编程分类"></a>编程分类</h3><p>编程语言分为编译型语言和解释型语言两类，编译型语言在执行之前要先进行完全编译，而解释型语言一边编译一边执行，很明显解释型语言的执行速度是慢于编译型语言的，而JavaScript就是一种解释型脚本语言，支持动态类型、弱类型、基于原型的语言，内置支持类型。</p>
<h2 id="网页渲染"><a href="#网页渲染" class="headerlink" title="网页渲染"></a>网页渲染</h2><p>浏览器自从上世纪80年代后期90年代初期诞生以来，已经得到了长足的发展，其功能也越来越丰富，包括网络、资源管理、网页浏览、多页面管理、插件和扩展、书签管理、历史记录管理、设置管理、下载管理、账户和同步、安全机制、隐私管理、外观主题、开发者工具等。而在这之中，最重要的莫过于网页渲染。</p>
<h3 id="渲染引擎"><a href="#渲染引擎" class="headerlink" title="渲染引擎"></a>渲染引擎</h3><p><strong>渲染引擎</strong>：所谓渲染引擎，就是将HTML/CSS/JavaScript等文本或图片等信息转换成图像结果的转换程序。在浏览器的发展过程中，不同的厂商开发了不同的渲染引擎，如Tridend(IE)、Gecko(FF)、WebKit(Safari,Chrome,Andriod浏览器)等。而在这里面不得不提下WebKit，一个由苹果发起的一个开源项目，如今它在移动端占据着垄断地位，更有基于WebKit的web操作系统不断涌现(如：Chrome OS、Web OS)。</p>
<p>WebKit内部结构大体如下(来自网络)：</p>
<p><img src="http://img.blog.csdn.net/20170711212539052?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>上图中实线框内模块是所有移植的共有部分，虚线框内不同的厂商可以自己实现。由上图可知，WebKit主要有操作系统、WebCore 、WebKit嵌入式接口和第三方库组成。</p>
<ul>
<li><strong>操作系统</strong>：是管理和控制计算机硬件与软件资源的计算机程序，是直接运行在“裸机”上的最基本的系统软件，任何其他软件都必须在操作系统的支持下才能运行。WebKit也是在操作系统上工作的。</li>
<li><strong>WebCore</strong>：本部分包含各个浏览器使用的共享部分，包括HTML解析器、CSS解析器、DOM和SVG等。JavaScriptCore是WebKit的默认引擎，在谷歌系列产品中被替换为V8引擎。WebKit Ports是WebKit中的非共享部分，由于平台差异、第三方库和需求的不同等原因，导致不同浏览器性能和功能差异的关键部分。</li>
<li><strong>WebKit嵌入式接口</strong>：该接口主要供浏览器调用，与移植密切相关，不同的移植有不同的接口规范。</li>
<li><strong>第三方库</strong>：主要是诸如图形库、网络库、视频库、数据存储库等第三方库。</li>
</ul>
<h2 id="网页渲染流程简析"><a href="#网页渲染流程简析" class="headerlink" title="网页渲染流程简析"></a>网页渲染流程简析</h2><p>对于一个网页，要经历怎样的过程，才能呈现在用户面前呢？或许下面的一张图可以给你提供答案。<br><img src="http://img.blog.csdn.net/20170711213832415?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>首先，系统将网页输入到HTML解析器，HTML解析器解析，然后构建DOM树，在这期间如果遇到JavaScript代码则交给JavaScript引擎处理；如果遇到CSS样式信息，则构建一个内部绘图模型。该模型由布局模块计算模型内部各个元素的位置和大小信息，最后由绘图模块完成从该模型到图像的绘制。<br>对于网页的绘制过程，大体可以分为3个阶段：</p>
<h4 id="1，从输入URL到生成DOM树"><a href="#1，从输入URL到生成DOM树" class="headerlink" title="1，从输入URL到生成DOM树"></a>1，从输入URL到生成DOM树</h4><p>在这个阶段中，主要会经历一下几个步骤：</p>
<ol>
<li>地址栏输入URL，WebKit调用资源加载器加载相应资源；</li>
<li>加载器依赖网络模块建立连接，发送请求并接收答复；</li>
<li>WebKit接收各种网页或者资源数据，其中某些资源可能同步或异步获取；</li>
<li>网页交给HTML解析器转变为词语；</li>
<li>解释器根据词语构建节点，形成DOM树；</li>
<li>如果节点是JavaScript代码，调用JavaScript引擎解释并执行；</li>
<li>JavaScript代码可能会修改DOM树结构；</li>
<li>如果节点依赖其他资源，如图片、视频等，调用资源加载器加载它们，但这些是异步加载的，不会阻碍当前DOM树继续创建；如果是JavaScript资源URL（没有标记异步方式），则需要停止当前DOM树创建，直到JavaScript加载并被JavaScript引擎执行后才继续DOM树的创建。</li>
</ol>
<h4 id="2，从DOM树到构建WebKit绘图上下文"><a href="#2，从DOM树到构建WebKit绘图上下文" class="headerlink" title="2，从DOM树到构建WebKit绘图上下文"></a>2，从DOM树到构建WebKit绘图上下文</h4><p>在这个阶段，主要完成一下几个操作：</p>
<ol>
<li>CSS文件被CSS解释器解释成内部表示；</li>
<li>CSS解释器完成工作后，在DOM树上附加样式信息，生成RenderObject树；</li>
<li>RenderObject节点在创建的同时，WebKit会根据网页层次结构构建RenderLayer树，同时构建一个虚拟绘图上下文。</li>
</ol>
<h4 id="3，绘图上下文内容并呈现图像内容"><a href="#3，绘图上下文内容并呈现图像内容" class="headerlink" title="3，绘图上下文内容并呈现图像内容"></a>3，绘图上下文内容并呈现图像内容</h4><p>在这个阶段，主要完成一下操作：</p>
<ol>
<li>绘图上下文是一个与平台无关的抽象类，它将每个绘图操作桥接到不同的具体实现类，也就是绘图具体实现类；</li>
<li>绘图实现类也可能有简单的实现，也可能有复杂的实现，软件渲染、硬件渲染、合成渲染等；</li>
<li>绘图实现类将2D图形库或者3D图形库绘制结果保存，交给浏览器界面进行展示。</li>
</ol>
<p>##JavaScript引擎<br>JavaScript本质上是一种解释型语言，与编译型语言不同的是它需要一遍执行一边解析，而编译型语言在执行时已经完成编译。<br>那么对于JavaScript这种解释性语言来讲，如何提高解析速度就是当务之急。JavaScript引擎和渲染引擎的关系如下图所示.<br><img src="http://img.blog.csdn.net/20170711214942371?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>为了提高性能，JavaScript引入了Java虚拟机和C++编译器中的众多技术。而一个完整JavaScript引擎的执行过程大致流程如下：源代码-→抽象语法树-→字节码-→JIT-→本地代码。一个典型的抽象语法树如下图所示：<br><img src="http://img.blog.csdn.net/20170711215256338?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>为了节约将抽象语法树通过JIT技术转换成本地代码的时间，V8放弃了生成字节码阶段的性能优化。而通过Profiler采集一些信息，来优化本地代码。</p>
<p>在2017年4月底，v8 发布了5.9 版本，在此版本中新增了一个 Ignition 字节码解释器，并默认开启。做出这一改变的原因为：（主要动机）减轻机器码占用的内存空间，即牺牲时间换空间；提高代码的启动速度；对 v8 的代码进行重构，降低 v8 的代码复杂度（详细介绍请查阅：<a href="https://cnodejs.org/topic/59084a9cbbaf2f3f569be482" target="_blank" rel="external">JS 引擎与字节码的不解之缘</a>）</p>
<h1 id="V8引擎"><a href="#V8引擎" class="headerlink" title="V8引擎"></a>V8引擎</h1><p>前面，我们介绍了V8引擎的一些历史，下面我们重点来看看V8项目一些知识。首先，V8项目的结构如下：<br><img src="http://img.blog.csdn.net/20170711220207609?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h2><p>JavaScript作为一种无类型的语言，在编译时并不能准确知道变量的类型，只可以在运行时确定。而java、C++等静态类型语言，在编译时候就可以确切知道变量的类型。因而JavaScript运行效率比C++或Java低。</p>
<p>在C++中，源代码需要经过编译才能执行，在生成本地代码的过程中，变量的地址和类型已经确定，运行本地代码时利用数组和位移就可以存取变量和方法的地址，不需要再进行额外的查找，几个机器指令即可完成，节省了确定类型和地址的时间。</p>
<p>而对于JavaScript 来说，并不能像C++那样在执行时已经知道变量的类型和地址，所以在代码解析过程中，会产生很多的临时变量，而变量的存取是非常普遍和频繁的。</p>
<p>对于传统的变量存取来说，使用少数的汇编指令就能完成变量存取。<br><img src="http://img.blog.csdn.net/20170711220958294?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>在JavaScript中，除boolean，number，string，null，undefined这个五个简单变量外，其他的数据都是对象，V8使用一种特殊的方式来表示它们，进而优化JavaScript的内部表示问题。</p>
<p>JavaScript对象在V8中的实现包含三个部分：隐藏类指针，这是v8为JavaScript对象创建的隐藏类；属性值表指针，指向该对象包含的属性值；元素表指针，指向该对象包含的属性。</p>
<p>在V8中，数据的内部表示由数据的实际内容和数据的句柄构成。数据的实际内容是变长的，类型也是不同的；句柄固定大小，包含指向数据的指针。这种设计可以方便V8进行垃圾回收和移动数据内容，如果直接使用指针的话就会出问题或者需要更大的开销，使用句柄的话，只需修改句柄中的指针即可，使用者使用的还是句柄，指针改动是对使用者透明的。</p>
<p>除少数数据(如整型数据)由handle本身存储外，其他内容限于句柄大小和变长等原因，都存储在堆中。整数直接从value中取值，然后使用一个指针指向它，可以减少内存的占用并提高访问速度。一个句柄对象的大小是4字节(32位设备)或者8字节(64位设备)，而在JavaScriptCore中，使用的8个字节表示句柄。在堆中存放的对象都是4字节对齐的，所以它们指针的后两位是不需要的，V8用这两位表示数据的类型，00为整数，01为其他。</p>
<h2 id="V8引擎渲染过程"><a href="#V8引擎渲染过程" class="headerlink" title="V8引擎渲染过程"></a>V8引擎渲染过程</h2><p>V8引擎在执行JavaScript的过程中，主要有两个阶段：编译和运行。</p>
<p>在V8引擎中，源代码先被解析器转变为抽象语法树(AST)，然后使用JIT编译器的全代码生成器从AST直接生成本地可执行代码。这个过程不同于JAVA先生成字节码或中间表示，减少了AST到字节码的转换时间，提高了代码的执行速度。但由于缺少了转换为字节码这一中间过程，也就减少了优化代码的机会。</p>
<p>V8引擎编译本地代码时使用的主要类如下所示：</p>
<ul>
<li><strong>Script</strong>：表示JavaScript代码，即包含源代码，又包含编译之后生成的本地代码，即是编译入口，又是运行入口；</li>
<li><strong>Compiler</strong>：编译器类，辅组Script类来编译生成代码，调用解释器(Parser)来生成AST和全代码生成器，将AST转变为本地代码；</li>
<li><strong>AstNode</strong>：抽象语法树节点类，是其他所有节点的基类，包含非常多的子类，后面会针对不同的子类生成不同的本地代码；</li>
<li><strong>FullCodeGenerator</strong>：AstVisitor类的子类，通过遍历AST来为JavaScript生成本地可执行代码。</li>
</ul>
<h3 id="JavaScript代码编译过程"><a href="#JavaScript代码编译过程" class="headerlink" title="JavaScript代码编译过程"></a>JavaScript代码编译过程</h3><p>JavaScript代码编译的过程大致为：</p>
<ol>
<li>Script类调用Compiler类的Compile函数为其生成本地代码；</li>
<li>Compile函数先使用Parser类生成AST，再使用FullCodeGenerator类来生成本地代码；</li>
<li>本地代码与具体的硬件平台密切相关，FullCodeGenerator使用多个后端来生成与平台相匹配的本地汇编代码。</li>
</ol>
<p>大体的流程图如下所示：<br><img src="http://img.blog.csdn.net/20170711221739459?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>在执行编译之前，V8会构建众多全局对象并加载一些内置的库（如math库），来构建一个运行环境。但是，在JavaScript源代码中，并非所有的函数都被编译生成本地代码，而是采用在调用时才会编译的逻辑来动态编译。</p>
<p>由于V8缺少了生成中间字节码这一环节，为了提升性能，V8会在生成本地代码后，使用数据分析器(profiler)采集一些信息，然后根据这些数据将本地代码进行优化，生成更高效的本地代码，这是一个逐步改进的过程。当发现优化后代码的性能还不如未优化的代码，V8将退回原来的代码，也就是优化回滚。</p>
<p>在这一阶段涉及的类主要有：</p>
<ul>
<li><strong>Script</strong>：表示JavaScript代码，即包含源代码，又包含编译之后生成的本地代码，即是编译入口，又是运行入口；</li>
<li><strong>Execution</strong>：运行代码的辅组类，包含一些重要函数，如Call函数，它辅组进入和执行Script代码；</li>
<li><strong>JSFunction</strong>：需要执行的JavaScript函数表示类；</li>
<li><strong>Runtime</strong>：运行这些本地代码的辅组类，主要提供运行时所需的辅组函数，如：属性访问、类型转换、编译、算术、位操作、比较、正则表达式等；</li>
<li><strong>Heap</strong>：运行本地代码需要使用的内存堆类；</li>
<li><strong>MarkCompactCollector</strong>：垃圾回收机制的主要实现类，用来标记、清除和整理等基本的垃圾回收过程；</li>
<li><strong>SweeperThread</strong>：负责垃圾回收的线程。<br>本阶段大体流程如下如所示：</li>
</ul>
<p>在V8中，函数是一个基本单位，当某个JavaScript函数被调用时，V8会查找该函数是否已经生成本地代码，如果已经生成，则直接调用该函数。否则，V8引擎会生成属于该函数的本地代码。这样，对于那些不用的代码就可以减少执行时间。再次借助Runtime类中的辅组函数，将不用的空间进行标记清除和垃圾回收。</p>
<h3 id="优化回滚"><a href="#优化回滚" class="headerlink" title="优化回滚"></a>优化回滚</h3><p>因为V8是基于AST直接生成本地代码，没有经过中间表示层的优化，所以本地代码尚未经过很好的优化。于是，在2010年，V8引入了新的编译器-Crankshaft，它主要针对热点函数进行优化，基于JavaScript源代码开始分析而非本地代码，同时构建Hydroger图并基于此来进行优化分析。</p>
<p>Crankshaft编译器为了性能考虑，通常会做出比较乐观和大胆的预测—代码稳定且变量类型不变，所以可以生成高效的本地代码。但是，鉴于JavaScript的一个弱类型的语言，变量类型也可能在执行的过程中进行改变，鉴于这种情况，V8会将该编译器做的想当然的优化进行回滚，称为优化回滚。<br>例如，下面的示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var counter = 0;</div><div class="line">function test(x, y) &#123;</div><div class="line">    counter++;</div><div class="line">    if (counter &lt; 1000000) &#123;</div><div class="line">        // do something</div><div class="line">        return &apos;jeri&apos;;</div><div class="line">    &#125;</div><div class="line">    var unknown = new Date();</div><div class="line">    console.log(unknown);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该函数被调用多次之后，V8引擎可能会触发Crankshaft编译器对其进行优化，而优化代码认为示例代码的类型信息都已经被确定。当程序执行到new Date()这个地方，并未获取unknown这个变量的类型，V8只得将该部分代码进行回滚。</p>
<p>优化回滚是一个很耗时的操作，在写代码过程中，尽量不要触发优化该操作。在最近发布的 V8 5.9 版本中，新增了一个 Ignition 字节码解释器，TurboFan 和 Ignition 结合起来共同完成JavaScript的编译。这个版本中消除 Cranshaft 这个旧的编译器，并让新的 Turbofan 直接从字节码来优化代码，并当需要进行反优化的时候直接反优化到字节码，而不需要再考虑 JS 源代码。</p>
<h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><p>Node中通过JavaScript使用内存时就会发现只能使用部分内存（64位系统下约为1.4 GB，32位系统下约为0.7 GB），其深层原因是 V8 垃圾回收机制的限制所致（如果可使用内存太大，V8在进行垃圾回收时需耗费更多的资源和时间，严重影响JS的执行效率）。下面对内存管理进行介绍。<br>内存的管理组要由分配和回收两个部分构成。V8的内存划分如下：</p>
<ul>
<li><strong>Zone</strong>：管理小块内存。其先自己申请一块内存，然后管理和分配一些小内存，当一块小内存被分配之后，不能被Zone回收，只能一次性回收Zone分配的所有小内存。当一个过程需要很多内存，Zone将需要分配大量的内存，却又不能及时回收，会导致内存不足情况。</li>
<li><strong>堆</strong>：管理JavaScript使用的数据、生成的代码、哈希表等。为方便实现垃圾回收，堆被分为三个部分(这和Java等的堆不一样)：</li>
<li><strong>年轻分代</strong>：为新创建的对象分配内存空间，经常需要进行垃圾回收。为方便年轻分代中的内容回收，可再将年轻分代分为两半，一半用来分配，另一半在回收时负责将之前还需要保留的对象复制过来。<br><strong>年老分代</strong>：根据需要将年老的对象、指针、代码等数据保存起来，较少地进行垃圾回收。<br><strong>大对象</strong>：为那些需要使用较多内存对象分配内存，当然同样可能包含数据和代码等分配的内存，一个页面只分配一个对象。</li>
</ul>
<p>用一张图可以表示如下：<br><img src="http://img.blog.csdn.net/20170711230619391?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p>V8 使用了分代和大数据的内存分配，在回收内存时使用精简整理的算法标记未引用的对象，然后消除没有标记的对象，最后整理和压缩那些还未保存的对象，即可完成垃圾回收。</p>
<p>在V8中，使用较多的是年轻分代和年老分代。年轻分代中的对象垃圾回收主要通过Scavenge算法进行垃圾回收。在Scavenge的具体实现中，主要采用了Cheney算法。</p>
<p>Cheney算法：通过复制的方式实现的垃圾回收算法。它将堆内存分为两个 semispace，一个处于使用中（From空间），另一个处于闲置状态（To空间）。当分配对象时，先是在From空间中进行分配。当开始进行垃圾回收时，会检查From空间中的存活对象，这些存活对象将被复制到To空间中，而非存活对象占用的空间将会被释放。完成复制后，From空间和To空间的角色发生对换。在垃圾回收的过程中，就是通过将存活对象在两个 semispace 空间之间进行复制。</p>
<p>年轻分代中的对象有机会晋升为年老分代，条件主要有两个：一个是对象是否经历过Scavenge回收，一个是To空间的内存占用比超过限制。</p>
<p>对于年老分代中的对象，由于存活对象占较大比重，再采用上面的方式会有两个问题：一个是存活对象较多，复制存活对象的效率将会很低；另一个问题依然是浪费一半空间的问题。为此，V8在年老分代中主要采用了Mark-Sweep（标记清除）标记清除和Mark-Compact（标记整理）相结合的方式进行垃圾回收。</p>
<h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p>在V8引擎启动时，需要构建JavaScript运行环境，需要加载很多内置对象，同时也需要建立内置的函数，如Array，String，Math等。为了使V8更加整洁，加载对象和建立函数等任务都是使用JavaScript文件来实现的，V8引擎负责提供机制来支持，就是在编译和执行JavaScript前先加载这些文件。</p>
<p>V8引擎需要编译和执行这些内置的JavaScript代码，同时使用堆等来保存执行过程中创建的对象、代码等，这些都需要时间。为此，V8引入了快照机制，将这些内置的对象和函数加载之后的内存保存并序列化。经过快照机制的启动时间可以缩减几毫秒。</p>
<h1 id="V8-VS-JavaScriptCore"><a href="#V8-VS-JavaScriptCore" class="headerlink" title="V8 VS JavaScriptCore"></a>V8 VS JavaScriptCore</h1><p>JavaScriptCore引擎是WebKit中默认的JavaScript引擎，也是苹果开源的一个项目，应用较为广泛。最初，性能不是很好，从2008年开始了一系列的优化，重新实现了编译器和字节码解释器，使得引擎的性能有较大的提升。随后内嵌缓存、基于正则表达式的JIT、简单的JIT及字节码解释器等技术引入进来，JavaScriptCore引擎也在不断的迭代和发展。</p>
<p>V8引擎自诞生之日起就以性能优化作为目标，引入了众多新技术，极大了带动了整个业界JavaScript引擎性能的快速发展。总的来说，V8引擎较为激进，青睐可以提高性能的新技术，而JavaScriptCore引擎较为稳健，渐进式的改变着自己的性能。总的来说JavaScript引擎工作流程（包含v8和JavaScriptCore）如下所示：</p>
<p><img src="http://img.blog.csdn.net/20170711231059978?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>JavaScriptCore 的大致流程为：源代码-→抽象语法树-→字节码-→JIT-→本地代码。</p>
<p>JavaScriptCore与V8有一些不同之处，其中最大的不同就是新增了字节码的中间表示，并加入了多层JIT编译器（如：简单JIT编译器、DFG JIT编译器、LLVM等）优化性能，不停的对本地代码进行优化(在V8 的 5.9 版本中，新增了一个 Ignition 字节码解释器)。</p>
<h2 id="功能扩展"><a href="#功能扩展" class="headerlink" title="功能扩展"></a>功能扩展</h2><p>JavaScript引擎的主要功能是解析和执行JavaScript代码，往往不能满足使用者多样化的需要，那么就可以增加扩展以提升它的能力。V8引擎有两种扩展机制：绑定和扩展。</p>
<h3 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h3><p>使用IDL文件或接口文件生成绑定文件，将这些文件同V8引擎一起编译。WebKit中使用IDL来定义JavaScript，但又与IDL有所不同，有一些改变。定义一个新的接口的步骤大致如下：<br>1.定义新的接口文件，可以在JavaScript代码进行调用，如mymodule.MyObj.myAttr：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">module mymodule &#123;</div><div class="line">    interface [</div><div class="line">            InterfaceName = MyObject</div><div class="line">    ] MyObj &#123; </div><div class="line">        readonly attribute long myAttr;</div><div class="line">        DOMString myMethod (DOMString myArg);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.按照引擎定义的标准接口为基础实现接口类，生成JavaScript引擎所需的绑定文件。WebKit提供了工具帮助生成所需的绑定类，根据引擎不同和引擎开发语言的不同而有所差异。V8引擎会为上述示例代码生成 v8MyObj.h (MyObj类具体的实现代码)和 V8MyObj.cpp (桥接代码，辅组注册桥接的函数到V8引擎)两个绑定文件。</p>
<p>JavaScript引擎绑定机制需要将扩展代码和JavaScript引擎一块编译和打包，不能根据需要在引擎启动后再动态注入这些本地代码。在实际WEB开发中，开发者都是基于现有浏览器的，根本不可能介入到JavaScript引擎的编译中，绑定机制有很大的局限性，但其非常高效，适用于对性能要求较高的场景。</p>
<h3 id="Extension"><a href="#Extension" class="headerlink" title="Extension"></a>Extension</h3><p>通过V8的基类Extension进行能力扩展，无需和V8引擎一起编译，可以动态为引擎增加功能特性，具有很强的灵活性。</p>
<p>Extension机制的大致思路就是，V8提供一个基类Extension和一个全局注册函数，要想扩展JavaScript能力，需要经过以下步骤：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class MYExtension : public v8::Extension &#123;</div><div class="line">    public:</div><div class="line">        MYExtension() : v8::Extension(&quot;v8/My&quot;, &quot;native function my();&quot;) &#123;&#125;</div><div class="line">        virtual v8::Handle&lt;v8::FunctionTemplate&gt; GetNativeFunction (</div><div class="line">        v8::Handle&lt;v8::String&gt; name) &#123;</div><div class="line">            // 可以根据name来返回不同的函数</div><div class="line">            return v8::FunctionTemplate::New(MYExtention::MY);</div><div class="line">        &#125;</div><div class="line">        static v8::Handle&lt;v8::Value&gt; MY(const v8::Arguments&amp; args) &#123;</div><div class="line">            // Do sth here</div><div class="line">            return v8::Undefined();</div><div class="line">        &#125;</div><div class="line">&#125;;</div><div class="line">MYExtension extension;</div><div class="line">RegisterExtension(&amp;extension);</div></pre></td></tr></table></figure>
<p>1.基于Extension基类构建一个它的子类，并实现它的虚函数—GetNativeFunction，根据参数name来决定返回实函数；<br>2.创建一个该子类的对象，并通过注册函数将该对象注册到V8引擎，当JavaScript调用’my’函数时就可被调用到。<br>Extension机制是调用V8的接口注入新函数，动态扩展非常方便，但没有绑定机制高效，适用于对性能要求不高的场景。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>作为一个提高JavaScript渲染的高效引擎，学习V8引擎应该重点掌握以下几个概念：</p>
<ol>
<li><strong>类型</strong>。对于函数，JavaScript是一种动态类型语言，JavaScriptCore和V8都使用隐藏类和内嵌缓存来提高性能，为了保证缓存命中率，一个函数应该使用较少的数据类型；对于数组，应尽量存放相同类型的数据，这样就可以通过偏移位置来访问。</li>
<li><strong>数据表示</strong>。简单类型数据（如整型）直接保存在句柄中，可以减少寻址时间和内存占用，如果可以使用整数表示的，尽量不要用浮点类型。</li>
<li><strong>内存</strong>。虽然JavaScript语言会自己进行垃圾回收，但我们也应尽量做到及时回收不用的内存，对不再使用的对象设置为null或使用delete方法来删除(使用delete方法删除会触发隐藏类新建，需要更多的额外操作)。</li>
<li><strong>优化回滚</strong>。在执行多次之后，不要出现修改对象类型的语句，尽量不要触发优化回滚，否则会大幅度降低代码的性能。<br>新机制。使用JavaScript引擎或者渲染引擎提供的新机制和新接口提高性能。</li>
</ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;V8的前世今生&quot;&gt;&lt;a href=&quot;#V8的前世今生&quot; class=&quot;headerlink&quot; title=&quot;V8的前世今生&quot;&gt;&lt;/a&gt;V8的前世今生&lt;/h1&gt;&lt;p&gt;V8是JavaScript渲染引擎，第一个版本随着Chrome的发布而发布(具体时间为2008年9月
    
    </summary>
    
      <category term="前端" scheme="http://www.xiangzhihong.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://www.xiangzhihong.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>webpack+react环境搭建</title>
    <link href="http://www.xiangzhihong.com/2017/06/03/webpack+react%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.xiangzhihong.com/2017/06/03/webpack+react环境搭建/</id>
    <published>2017-06-02T16:00:00.000Z</published>
    <updated>2017-07-10T01:35:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们知道前端的框架纷繁复杂，各有各的优点。而我们选择使用React作为开发框架的时候，往往会选择Webpack+Babel+React来开始我们的项目。之前也讲过其他的前端框架，如<a href="http://blog.csdn.net/xiangzhihong8/article/details/53993980" target="_blank" rel="external"> gulp+webpack</a>，准确的说这不是一个框架，只是项目组织的形式而已。</p>
<h1 id="Webpack-Babel-React环境搭建"><a href="#Webpack-Babel-React环境搭建" class="headerlink" title="Webpack+Babel+React环境搭建"></a>Webpack+Babel+React环境搭建</h1><h2 id="安装Webpack"><a href="#安装Webpack" class="headerlink" title="安装Webpack"></a>安装Webpack</h2><p>关于Webpack的介绍这里不讲解，大家可以看之前的讲解<a href="http://blog.csdn.net/xiangzhihong8/article/details/53993980" target="_blank" rel="external">webpack介绍</a>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install webpack -g</div></pre></td></tr></table></figure>
<h2 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h2><p>创建一个名叫learn-webpack项目，并进去项目目录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir learn-webpack </div><div class="line">cd learn-webpack</div></pre></td></tr></table></figure></p>
<p><img src="http://img.blog.csdn.net/20170104224231893?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>接下来我们来创建2个文件:app.js和index.html，我们在也没上输出一个”Hello World”，<br>app.js：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.querySelector(&apos;#app&apos;).innerHTML = &apos;Hello World!&apos;;</div></pre></td></tr></table></figure></p>
<p>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">  &lt;title&gt;Learn-webpack&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;script src=&quot;dist/bundle.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>然后在终端执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack ./app.js ./dist/bundle.js</div></pre></td></tr></table></figure>
<p>最后执行启动本地的http服务，我们这里用python：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -m SimpleHTTPServer</div></pre></td></tr></table></figure>
<p>然后我们访问：<a href="http://localhost:8000就可以看到效果了。" target="_blank" rel="external">http://localhost:8000就可以看到效果了。</a></p>
<h2 id="webpack文件配置"><a href="#webpack文件配置" class="headerlink" title="webpack文件配置"></a>webpack文件配置</h2><p>实际上每个项目下都应该包含一个webpack.config.js，用来告诉Webpack需要做些什么，这个我们之前文章也说过。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  entry: &quot;app.js&quot;,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname+&quot;/dist&quot;,</div><div class="line">    filename: &quot;bundle.js&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来我们在终端运行命令，看看是不是和之前输入 webpack ./app.js ./dist/bundle.js 的打包编译结果一样呢，答案是肯定的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure>
<p>注：<br><strong>entry：指定打包的入口文件</strong></p>
<ul>
<li>单个文件打包为单个输出文件，直接写该文件的名字，例如：entry:”main.js”</li>
<li>多个文件打包为单个输出文件，将文件名放进一个数组，例如：entry:[‘main.js’,’xx.js’]</li>
<li>多个文件打包为多个输出文件，将文件名放入一个键字对，例如：entry: {a:’main.js’,b:’xx.js’}<br><strong>output：配置打包结果</strong><br>path为定义输出文件夹，filename为打包结果文件的名称，如果指定打包入口文件为上面的1、2种情况，filename里面直接跟你想输出的文件名。若为第3种情况filename里面需写成[name].文件名.js，filename里面的[name]为entry中的键。<h3 id="监听变化自动打包"><a href="#监听变化自动打包" class="headerlink" title="监听变化自动打包"></a>监听变化自动打包</h3>当我们在不停的对代码进行变动的时候，为了不修改一次然后又手动去进行打包一次，可以使用webpack的watch功能。这也算是webpack的一个黑科技，以前做后端的时候必须重新部署，这个是很蛋疼的。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --watch 或者 webpack -w</div></pre></td></tr></table></figure>
<p>或者我们可以直接在配置代码里面把watch设置为true。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  entry: &quot;app.js&quot;,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname+&quot;/dist&quot;,</div><div class="line">    filename: &quot;bundle.js&quot;</div><div class="line">  &#125;,</div><div class="line">  watch: true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Babel配置"><a href="#Babel配置" class="headerlink" title="Babel配置"></a>Babel配置</h2><p>Babel 是一个 JavaScript 编译器。使用它可以将ES6的语法转换为ES5的语法，以便在现在有的环境执行之前的代码。<br>首先安装basel。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install webpack babel-loader babel-core babel-preset-es2015 --save-dev</div></pre></td></tr></table></figure>
<p>执行安装完成后需要将之前的webpack.config.js修改为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  entry: &quot;./app.js&quot;,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname+&quot;/dist&quot;,</div><div class="line">    filename: &quot;bundle.js&quot;</div><div class="line">  &#125;,</div><div class="line">  module: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123;</div><div class="line">        test: /\.jsx?$/,</div><div class="line">        loader: &apos;babel-loader&apos;,</div><div class="line">        exclude: /node_modules/,</div><div class="line">        query: &#123;</div><div class="line">          presets: [&apos;es2015&apos;]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  resolve: &#123;</div><div class="line">    extensions: [&apos;&apos;,&apos;.coffee&apos;,&apos;.js&apos;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在就能在文件里面以ES6的语法进行代码编写，如在app.js加入:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var func = str =&gt; &#123;</div><div class="line">  console.log(str);</div><div class="line">&#125;;</div><div class="line">func(&apos;Hello Babel!&apos;);</div></pre></td></tr></table></figure>
<p>我们再次运行，如果看到输出，就说明配置成功了。这里有关Loader的知识和配置就不讲究了，大家可以网上补补。</p>
<h2 id="与React结合"><a href="#与React结合" class="headerlink" title="与React结合"></a>与React结合</h2><p>终端输入以下代码对react和react-dom进行安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install react react-dom --save</div></pre></td></tr></table></figure>
<p>安装Babel针对React的预设插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install babel-preset-react --save-dev</div></pre></td></tr></table></figure>
<p>由于我们增加了react的预设插件，所以需要对webpack.config.js进行修改。将module -&gt; loaders下面的query修改如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">query: &#123;</div><div class="line">    presets: [&apos;es2015&apos;,&apos;react&apos;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来我们创建一个hello.js.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line"></div><div class="line">class Hello extends React.Component&#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">          Hello, World!</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default Hello;</div></pre></td></tr></table></figure>
<p>在app.js做一下配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line">import ReactDOM from &quot;react-dom&quot;;</div><div class="line">import Hello from &quot;./hello&quot;;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;Hello /&gt;,</div><div class="line">  document.querySelector(&apos;#app&apos;)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>哈哈哈，这里如果大家做过React Native的，这里是不是感觉很亲切，只不过React Native还是用的npm在做管理。我们同样启动服务在看看，如果看到Hello World!就说明环境配置成功。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我们知道前端的框架纷繁复杂，各有各的优点。而我们选择使用React作为开发框架的时候，往往会选择Webpack+Babel+React来开始
    
    </summary>
    
      <category term="前端" scheme="http://www.xiangzhihong.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端开发" scheme="http://www.xiangzhihong.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="react" scheme="http://www.xiangzhihong.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React Native调用原生组件</title>
    <link href="http://www.xiangzhihong.com/2017/06/03/React%20Native%E8%B0%83%E7%94%A8%E5%8E%9F%E7%94%9F%E7%BB%84%E4%BB%B6/"/>
    <id>http://www.xiangzhihong.com/2017/06/03/React Native调用原生组件/</id>
    <published>2017-06-02T16:00:00.000Z</published>
    <updated>2017-09-30T02:12:16.245Z</updated>
    
    <content type="html"><![CDATA[<p>在React Native开发过程中，有时候我们可能需要访问平台的API，但react Native还没有相应的实现，或者是React Native还不支持一些原生的属性，我们需要调用原生代码来实现，或者是我们需要复用一些原来的Java代码，这个时候我们就需要创建一个原生模块来自己实现对我们需要功能的封装。 相关文档可以参照<a href="http://reactnative.cn/docs/0.41/native-modules-android.html#content" target="_blank" rel="external">官方</a>的介绍。</p>
<p>#实例</p>
<p>下面我们就通过实现一个自定义模块，来熟悉编写原生模块需要用的一些知识。该模块主要实现调用一些Android原生的功能，比如弹Toast，启动Activity等。 </p>
<h2 id="实现模块"><a href="#实现模块" class="headerlink" title="实现模块"></a>实现模块</h2><p>首先来创建一个原生模块。一个原生模块是一个继承了 ReactContextBaseJavaModule 的Java类，它有一个必须实现的方法getName()，它返回一个字符串名字，在js中我们就使用这个名字调用这个模块；还有构造函数NativeModule。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public class MyNativeModule extends ReactContextBaseJavaModule &#123;</div><div class="line">    private final static String MODULE_NAME = &quot;MyNativeModule&quot;;</div><div class="line">    private static final  String TestEvent = &quot;TestEvent&quot;;</div><div class="line">    private ReactApplicationContext mContext;</div><div class="line">    public MyNativeModule(ReactApplicationContext reactContext) &#123;</div><div class="line">        super(reactContext);</div><div class="line">        mContext = reactContext;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getName() &#123;</div><div class="line">        return MODULE_NAME;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Nullable</div><div class="line">    @Override</div><div class="line">    public Map&lt;String, Object&gt; getConstants() &#123;</div><div class="line">        final Map&lt;String, Object&gt; constants = new HashMap&lt;&gt;();</div><div class="line">        constants.put(&quot;SHORT&quot;, Toast.LENGTH_SHORT);</div><div class="line">        constants.put(&quot;LONG&quot;, Toast.LENGTH_LONG);</div><div class="line">        constants.put(&quot;NATIVE_MODULE_NAME&quot;, MODULE_NAME);</div><div class="line">        constants.put(TestEvent, TestEvent);</div><div class="line">        return constants;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @ReactMethod</div><div class="line">    public void startActivity()&#123;</div><div class="line">        Intent intent = new Intent(mContext,SecondActivity.class);</div><div class="line">        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">        mContext.startActivity(intent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @ReactMethod</div><div class="line">    public void showToast(String msg, int duration)&#123;</div><div class="line">        Toast.makeText(mContext, msg, duration).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里需要对React Native和原生的类型映射做一个简单的介绍。详细的还可以参考<a href="https://github.com/facebook/react-native/blob/master/ReactAndroid/src/main/java/com/facebook/react/bridge/ReadableMap.java" target="_blank" rel="external">ReadableMap</a>和<a href="https://github.com/facebook/react-native/blob/master/ReactAndroid/src/main/java/com/facebook/react/bridge/ReadableArray.java" target="_blank" rel="external">ReadableArray</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Boolean -&gt; Bool</div><div class="line">Integer -&gt; Number</div><div class="line">Double -&gt; Number</div><div class="line">Float -&gt; Number</div><div class="line">String -&gt; String</div><div class="line">Callback -&gt; function</div><div class="line">ReadableMap -&gt; Object</div><div class="line">ReadableArray -&gt; Array</div></pre></td></tr></table></figure>
<p>例如，实现getContants方法导出需要给JavaScript使用的常量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Nullable</div><div class="line">    @Override</div><div class="line">    public Map&lt;String, Object&gt; getConstants() &#123;</div><div class="line">        final Map&lt;String, Object&gt; constants = new HashMap&lt;&gt;();</div><div class="line">        constants.put(&quot;SHORT&quot;, Toast.LENGTH_SHORT);</div><div class="line">        constants.put(&quot;LONG&quot;, Toast.LENGTH_LONG);</div><div class="line">        constants.put(&quot;NATIVE_MODULE_NAME&quot;, MODULE_NAME);</div><div class="line">        constants.put(TestEvent, TestEvent);</div><div class="line">        return constants;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="注册模块"><a href="#注册模块" class="headerlink" title="注册模块"></a>注册模块</h2><p>接下来我们需要向系统注册这个模块，通过实现ReactPackage接口来实现。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class MyReactPackage implements ReactPackage &#123;</div><div class="line">    @Override</div><div class="line">    public List&lt;NativeModule&gt; createNativeModules(ReactApplicationContext reactContext) &#123;</div><div class="line">        List&lt;NativeModule&gt; modules = new ArrayList&lt;&gt;();</div><div class="line">        modules.add(new MyNativeModule(reactContext));</div><div class="line">        return modules;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public List&lt;Class&lt;? extends JavaScriptModule&gt;&gt; createJSModules() &#123;</div><div class="line">        return Collections.emptyList();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) &#123;</div><div class="line">        return Collections.emptyList();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="添加模块"><a href="#添加模块" class="headerlink" title="添加模块"></a>添加模块</h2><p>在Application的getPackages()方法中添加上面的模块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">       protected List&lt;ReactPackage&gt; getPackages() &#123;</div><div class="line">           return Arrays.&lt;ReactPackage&gt;asList(</div><div class="line">                   new MainReactPackage(), </div><div class="line">                   //添加的模块</div><div class="line">                   new MyReactPackage()</div><div class="line">           );</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p>或者这MainActivity的onCreate中，添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">       super.onCreate(savedInstanceState);</div><div class="line">       mReactRootView = new ReactRootView(this);</div><div class="line">       mReactInstanceManager = ReactInstanceManager.builder()</div><div class="line">               .setApplication(getApplication())</div><div class="line">               .setBundleAssetName(&quot;index.android.bundle&quot;)</div><div class="line">               .setJSMainModuleName(&quot;index.android&quot;)</div><div class="line">               .addPackage(new MainReactPackage())</div><div class="line">               .addPackage(new MyReactPackage())</div><div class="line">               .setUseDeveloperSupport(BuildConfig.DEBUG)</div><div class="line">               .setInitialLifecycleState(LifecycleState.RESUMED)</div><div class="line">               .build();</div><div class="line">       mReactRootView.startReactApplication(mReactInstanceManager, &quot;HelloWorld&quot;, null);</div><div class="line">       setContentView(mReactRootView);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="Js端封装模块"><a href="#Js端封装模块" class="headerlink" title="Js端封装模块"></a>Js端封装模块</h2><p>为了使javascript端访问起来更为方便，通常我们都会把原生模块封装成一个JavaScript模块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import &#123; NativeModules &#125; from &apos;react-native&apos;; </div><div class="line"></div><div class="line">// 这里的MyNativeModule必须对应</div><div class="line">// public String getName()中返回的字符串</div><div class="line"></div><div class="line">export default NativeModules.MyNativeModule;</div></pre></td></tr></table></figure>
<p>接下来，就可以直接使用了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">import MyNativeModule from &apos;./MyNativeModule&apos;; </div><div class="line">class HelloWorld extends React.Component &#123;</div><div class="line">  startActivity()&#123;</div><div class="line">    console.log(&quot;MODULE NAME: &quot;,MyNativeModule.NATIVE_MODULE_NAME);</div><div class="line">    MyNativeModule.startActivity();</div><div class="line">  &#125;</div><div class="line">  showToast()&#123;</div><div class="line">    console.log(&quot;MODULE NAME: &quot;,MyNativeModule.NATIVE_MODULE_NAME);</div><div class="line">    MyNativeModule.showToast(&quot;From JS&quot;, MyNativeModule.LONG);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;TouchableOpacity onPress=&#123;this.startActivity&#125;&gt;  </div><div class="line">          &lt;Text style=&#123;styles.hello&#125;&gt;start Activity&lt;/Text&gt;  </div><div class="line">        &lt;/TouchableOpacity&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="其他知识"><a href="#其他知识" class="headerlink" title="其他知识"></a>其他知识</h1><p>React Native的跨语言访问是异步进行的，所以想要给JavaScript返回一个值的唯一办法是使用回调函数或者发送事件。</p>
<h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>原生模块还支持一种特殊的参数——回调函数。它提供了一个函数来把返回值传回给JS。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@ReactMethod</div><div class="line">    public void testCallback(int para1, int para2, Callback resultCallback)&#123;</div><div class="line">        int result = para1 + para2;</div><div class="line">        resultCallback.invoke(result);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>也可以在JS中调用。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">testCallback()&#123;</div><div class="line">    MyNativeModule.testCallback(100,100,(result) =&gt; &#123;</div><div class="line">    console.log(&quot;result: &quot;,result); //&apos;result: &apos;, 200</div><div class="line">    &#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>原生模块通常只应调用回调函数一次。但是，它可以保存callback并在将来调用。<br>callback并非在对应的原生函数返回后立即被执行——注意跨语言通讯是异步的，这个执行过程会通过消息循环来进行。</p>
<h2 id="RCTDeviceEventEmitter"><a href="#RCTDeviceEventEmitter" class="headerlink" title="RCTDeviceEventEmitter"></a>RCTDeviceEventEmitter</h2><p>生模块可以在没有被调用的情况下往JavaScript发送事件通知。最简单的办法就是通过RCTDeviceEventEmitter，这可以通过ReactContext来获得对应的引用。RCTDeviceEventEmitter相当于客户端的广播机制。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public void sendEvent()&#123;</div><div class="line">        WritableMap params = Arguments.createMap();</div><div class="line">        params.putString(&quot;module&quot;, &quot;MyNativeModule&quot;);</div><div class="line">        mContext</div><div class="line">                .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)</div><div class="line">                .emit(TestEvent, params);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在JS中调用的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import &#123; DeviceEventEmitter &#125; from &apos;react-native&apos;;</div><div class="line">......</div><div class="line">  componentWillMount() &#123;</div><div class="line">    console.log(&quot;componentWillMount&quot;);</div><div class="line">    //接收事件</div><div class="line">    DeviceEventEmitter.addListener(MyNativeModule.TestEvent, info =&gt; &#123;</div><div class="line">      console.log(info);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h2 id="startActivityForResult"><a href="#startActivityForResult" class="headerlink" title="startActivityForResult"></a>startActivityForResult</h2><p>如果需要监听activity的生命周期事件（比如onResume, onPause等等），模块必须实现LifecycleEventListener，然后需要在构造函数中注册一个监听函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public MyNativeModule(ReactApplicationContext reactContext) &#123;</div><div class="line">        super(reactContext);</div><div class="line">        mContext = reactContext;</div><div class="line">        //添加监听</div><div class="line">        reactContext.addLifecycleEventListener(this);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>实现LifecycleEventListener的几个接口。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    public void onHostResume() &#123;</div><div class="line">        Log.e(MODULE_NAME, &quot;onHostResume&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onHostPause() &#123;</div><div class="line">        Log.e(MODULE_NAME, &quot;onHostPause&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onHostDestroy() &#123;</div><div class="line">        Log.e(MODULE_NAME, &quot;onHostDestroy&quot;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在React Native开发过程中，有时候我们可能需要访问平台的API，但react Native还没有相应的实现，或者是React Native还不支持一些原生的属性，我们需要调用原生代码来实现，或者是我们需要复用一些原来的Java代码，这个时候我们就需要创建一个原生模
    
    </summary>
    
      <category term="React Native" scheme="http://www.xiangzhihong.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://www.xiangzhihong.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React-Native 组件之 Modal</title>
    <link href="http://www.xiangzhihong.com/2017/05/29/React-Native%20%E7%BB%84%E4%BB%B6%E4%B9%8B%20Modal/"/>
    <id>http://www.xiangzhihong.com/2017/05/29/React-Native 组件之 Modal/</id>
    <published>2017-05-28T16:00:00.000Z</published>
    <updated>2017-09-30T02:00:21.878Z</updated>
    
    <content type="html"><![CDATA[<p>Modal组件可以用来覆盖包含React Native根视图的原生视图（如UIViewController，Activity），用它可以实现遮罩的效果。</p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>Modal提供的属性有：</p>
<p> <strong>animationType（动画类型）</strong> PropTypes.oneOf([‘none’, ‘slide’, ‘fade’]</p>
<ul>
<li>none：没有动画</li>
<li>slide：从底部滑入</li>
<li>fade：淡入视野</li>
</ul>
<p><strong>onRequestClose（被销毁时会调用此函数）</strong></p>
<ul>
<li>在 ‘Android’ 平台，必需调用此函数</li>
</ul>
<p><strong>onShow（模态显示的时候被调用）</strong></p>
<p><strong>transparent (透明度) </strong> bool</p>
<ul>
<li>为true时，使用透明背景渲染模态。</li>
</ul>
<p><strong>visible（可见性）</strong> bool</p>
<p><strong>onOrientationChange（方向改变时调用）</strong></p>
<ul>
<li>在模态方向变化时调用，提供的方向只是 ‘’ 或 ‘’。在初始化渲染的时候也会调用，但是不考虑当前方向。</li>
</ul>
<p><strong>supportedOrientations（允许模态旋转到任何指定取向）</strong>[‘portrait’, ‘portrait-upside-down’, ‘landscape’，’landscape-left’，’landscape-right’]）</p>
<ul>
<li>在iOS上，模态仍然受 info.plist 中的 UISupportedInterfaceOrientations字段中指定的限制。</li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>Modal的使用非常简单，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Modal</div><div class="line"> animationType=&apos;slide&apos;           // 从底部滑入  </div><div class="line"> transparent=&#123;false&#125;             // 不透明</div><div class="line"> visible=&#123;this.state.isModal&#125;    // 根据isModal决定是否显示</div><div class="line"> onRequestClose=&#123;() =&gt; &#123;this.onRequestClose()&#125;&#125;  // android必须实现</div><div class="line"> &gt;</div></pre></td></tr></table></figure>
<p>综合例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component&#125; from &apos;react&apos;;</div><div class="line">import  &#123;</div><div class="line">    AppRegistry,</div><div class="line">    View,</div><div class="line">    Modal,</div><div class="line">    TouchableOpacity,</div><div class="line">    Text</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line">export default class ModalView extends Component &#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">        this.state = &#123;</div><div class="line">            modalVisible: false,</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    setModalVisible = (visible)=&gt; &#123;</div><div class="line">        this.setState(&#123;</div><div class="line">           modalVisible: visible</div><div class="line">        &#125;)</div><div class="line">    &#125;;</div><div class="line">    render()&#123;</div><div class="line">        return(</div><div class="line">            &lt;View style=&#123;&#123;flex: 1, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, backgroundColor: &apos;#ffaaff&apos;&#125;&#125;&gt;</div><div class="line">                &lt;Modal animationType=&#123;&apos;none&apos;&#125;</div><div class="line">                       transparent=&#123;true&#125;</div><div class="line">                       visible=&#123;this.state.modalVisible&#125;</div><div class="line">                       onrequestclose=&#123;() =&gt; &#123;alert(&quot;Modal has been closed.&quot;)&#125;&#125;</div><div class="line">                       onShow=&#123;() =&gt; &#123;alert(&quot;Modal has been open.&quot;)&#125;&#125;</div><div class="line">                       supportedOrientations=&#123;[&apos;portrait&apos;, &apos;portrait-upside-down&apos;, &apos;landscape&apos;, &apos;landscape-left&apos;, &apos;landscape-right&apos;]&#125;</div><div class="line">                       onOrientationChange=&#123;() =&gt; &#123;alert(&quot;Modal has been OrientationChange.&quot;)&#125;&#125;&gt;</div><div class="line">                    &lt;View style=&#123;&#123;flex:1, marginTop: 22, backgroundColor: &apos;#aaaaaa&apos;, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;&#125;&#125;&gt;</div><div class="line">                        &lt;View&gt;</div><div class="line">                            &lt;Text&gt;Hello World!&lt;/Text&gt;</div><div class="line">                            &lt;TouchableOpacity onPress=&#123;() =&gt; &#123;</div><div class="line">                                this.setModalVisible(false)</div><div class="line">                            &#125;&#125;&gt;</div><div class="line">                                &lt;Text&gt;隐藏 Modal&lt;/Text&gt;</div><div class="line">                            &lt;/TouchableOpacity&gt;</div><div class="line">                        &lt;/View&gt;</div><div class="line">                    &lt;/View&gt;</div><div class="line">                &lt;/Modal&gt;</div><div class="line">                &lt;TouchableOpacity onPress=&#123;() =&gt; &#123;</div><div class="line">                    this.setModalVisible(true)</div><div class="line">                &#125;&#125;&gt;</div><div class="line">                    &lt;Text&gt;显示 Modal&lt;/Text&gt;</div><div class="line">                &lt;/TouchableOpacity&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">AppRegistry.registerComponent(&apos;ModalView&apos;, ()=&gt;ModalView);</div></pre></td></tr></table></figure>
<p>运行效果：<br><img src="http://img.blog.csdn.net/20170726093308258?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>从 modal 的源码可以看出，modal 其实就是使用了 绝对定位，所以当 modal 无法满足我们的需求的时候，我们就可以通过 绝对定位 自己来封装一个 modal </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Modal组件可以用来覆盖包含React Native根视图的原生视图（如UIViewController，Activity），用它可以实现遮罩的效果。&lt;/p&gt;
&lt;h2 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.xiangzhihong.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://www.xiangzhihong.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>iOS自动布局框架之Masonry</title>
    <link href="http://www.xiangzhihong.com/2017/05/28/iOS%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80%E6%A1%86%E6%9E%B6%E4%B9%8BMasonry/"/>
    <id>http://www.xiangzhihong.com/2017/05/28/iOS自动布局框架之Masonry/</id>
    <published>2017-05-27T16:00:00.000Z</published>
    <updated>2017-09-30T02:16:47.981Z</updated>
    
    <content type="html"><![CDATA[<p>目前iOS开发中大多数页面都已经开始使用Interface Builder的方式进行UI开发了，但是在一些变化比较复杂的页面，还是需要通过代码来进行UI开发的。而且有很多比较老的项目，本身就还在采用纯代码的方式进行开发。而现在iPhone和iPad屏幕尺寸越来越多，虽然开发者只需要根据屏幕点进行开发，而不需要基于像素点进行UI开发。但如果在项目中根据不同屏幕尺寸进行各种判断，写死坐标的话，这样开发起来是很吃力的。所以一般用纯代码开发UI的话，一般都是配合一些自动化布局的框架进行屏幕适配。苹果为我们提供的适配框架有：VFL、UIViewAutoresizing、Auto Layout、Size Classes等。其中Auto Layout是使用频率最高的布局框架，但是其也有弊端。就是在使用UILayoutConstraint的时候，会发现代码量很多，而且大多都是重复性的代码，以至于好多人都不想用这个框架。<br>今天要给大家介绍的这个框架Masonry是基于UILayoutConstraint封装的。这个框架已经出来有三年了，现在也比较成熟了。Masonry开源地址<a href="https://github.com/SnapKit/Masonry" target="_blank" rel="external">Masonry</a>。</p>
<h2 id="Masonry简介"><a href="#Masonry简介" class="headerlink" title="Masonry简介"></a>Masonry简介</h2><p>Masonry是一个对系统NSLayoutConstraint进行封装的第三方自动布局框架，采用链式编程的方式提供给开发者API。系统AutoLayout支持的操作，Masonry都支持，相比系统API功能来说，Masonry是有过之而无不及。</p>
<p>Masonry采取了链式编程的方式，代码理解起来非常清晰易懂，而且写完之后代码量看起来非常少。之前用NSLayoutConstraint写很多代码才能实现的布局，用Masonry最少一行代码就可以搞定。</p>
<p>Masonry是同时支持Mac和iOS两个平台的，在这两个平台上都可以使用Masonry进行自动布局。我们可以从MASUtilities.h文件中，看到下面的定义，这就是Masonry通过宏定义的方式，区分两个平台独有的一些关键字。</p>
<p>通过CocoaPods，在项目中可以很容易的集成Masonry。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod &apos;Masonry&apos;</div></pre></td></tr></table></figure>
<h3 id="学习曲线"><a href="#学习曲线" class="headerlink" title="学习曲线"></a>学习曲线</h3><p>对于初学者学习纯代码AutoLayout，我建议还是先学会Interface Builder方式的AutoLayout，领悟苹果对自动布局的规则和思想，然后再把这套思想嵌套在纯代码上。这样学习起来更好入手，也可以避免踩好多坑。在项目中设置的AutoLayout约束，起到对视图布局的标记作用。设置好约束之后，程序运行过程中创建视图时，会根据设置好的约束计算frame，并渲染到视图上。</p>
<h2 id="Masonry使用"><a href="#Masonry使用" class="headerlink" title="Masonry使用"></a>Masonry使用</h2><p>在正式使用Masonry之前,最后先学会AutoLayout。Masonry提供的的API有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mas_makeConstraints()    添加约束</div><div class="line">mas_remakeConstraints()  移除之前的约束，重新添加新的约束</div><div class="line">mas_updateConstraints()  更新约束</div><div class="line"> </div><div class="line">equalTo()       参数是对象类型，一般是视图对象或者mas_width这样的坐标系对象</div><div class="line">mas_equalTo()   和上面功能相同，参数可以传递基础数据类型对象，可以理解为比上面的API更强大</div><div class="line"> </div><div class="line">width()         用来表示宽度，例如代表view的宽度</div><div class="line">mas_width()     用来获取宽度的值。和上面的区别在于，一个代表某个坐标系对象，一个用来获取坐标系对象的值</div></pre></td></tr></table></figure>
<p><strong>说明</strong>：上面例如equalTo或者width这样的，有时候需要涉及到使用mas<em>前缀，这在开发中需要注意作区分。如果在当前类引入#import “Masonry.h”之前，用下面两种宏定义声明一下，就不需要区分mas</em>前缀。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 定义这个常量，就可以不用在开发过程中使用&quot;mas_&quot;前缀。</div><div class="line">#define MAS_SHORTHAND</div><div class="line">// 定义这个常量，就可以让Masonry帮我们自动把基础数据类型的数据，自动装箱为对象类型。</div><div class="line">#define MAS_SHORTHAND_GLOBALS</div></pre></td></tr></table></figure>
<p>Masonry为了让代码使用和阅读更容易理解，所以直接通过点语法就可以调用，还添加了and和with两个方法。这两个方法内部实际上什么都没干，只是在内部将self直接返回，功能就是为了更加方便阅读，对代码执行没有实际作用。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make.top.and.bottom.equalTo(self.containerView).with.offset(padding);</div></pre></td></tr></table></figure>
<p>其内部代码实现，实际上就是直接将self返回。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (MASConstraint *)with &#123;</div><div class="line">    return self;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="约束和布局"><a href="#约束和布局" class="headerlink" title="约束和布局"></a>约束和布局</h3><p>关于更新约束布局相关的API，主要用以下四个API：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (void)updateConstraintsIfNeeded  调用此方法，如果有标记为需要重新布局的约束，则立即进行重新布局，内部会调用updateConstraints方法</div><div class="line">- (void)updateConstraints          重写此方法，内部实现自定义布局过程</div><div class="line">- (BOOL)needsUpdateConstraints     当前是否需要重新布局，内部会判断当前有没有被标记的约束</div><div class="line">- (void)setNeedsUpdateConstraints  标记需要进行重新布局</div></pre></td></tr></table></figure>
<p>关于UIView重新布局相关的API，主要用以下三个API：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (void)setNeedsLayout  标记为需要重新布局</div><div class="line">- (void)layoutIfNeeded  查看当前视图是否被标记需要重新布局，有则在内部调用layoutSubviews方法进行重新布局</div><div class="line">- (void)layoutSubviews  重写当前方法，在内部完成重新布局操作</div></pre></td></tr></table></figure>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p><strong>设置内边距</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[self.yellowView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">    make.left.equalTo(self.view).with.offset(10);</div><div class="line">    make.top.equalTo(self.view).with.offset(10);</div><div class="line">    make.right.equalTo(self.view).with.offset(-10);</div><div class="line">    make.bottom.equalTo(self.view).with.offset(-10);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>通过insets简化设置内边距的方式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[self.blueView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">    // 下、右不需要写负号，insets方法中已经为我们做了取反的操作了。</div><div class="line">    make.edges.equalTo(self.view).with.insets(UIEdgeInsetsMake(10, 10, 10, 10));</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>更新约束：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[self.greenView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">    make.center.equalTo(self.view);</div><div class="line">    // 这里通过mas_equalTo给size设置了基础数据类型的参数，参数为CGSize的结构体</div><div class="line">    make.size.mas_equalTo(CGSizeMake(300, 300));</div><div class="line">&#125;];</div><div class="line"> </div><div class="line">// 为了更清楚的看出约束变化的效果，在显示两秒后更新约束。</div><div class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.f * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">    [self.greenView mas_updateConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.centerX.equalTo(self.view).offset(100);</div><div class="line">        make.size.mas_equalTo(CGSizeMake(100, 100));</div><div class="line">    &#125;];</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>大于等于和小于等于某个值的约束。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[self.textLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">    make.center.equalTo(self.view);</div><div class="line">    // 设置宽度小于等于200</div><div class="line">    make.width.lessThanOrEqualTo(@200);</div><div class="line">    // 设置高度大于等于10</div><div class="line">    make.height.greaterThanOrEqualTo(@(10));</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>使用基础数据类型当做参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[self.redView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">    make.center.equalTo(self.view);</div><div class="line">    make.width.mas_equalTo(100);</div><div class="line">    make.height.mas_equalTo(100);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>设置约束优先级：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[self.redView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">    make.center.equalTo(self.view);</div><div class="line">    make.width.equalTo(self.view).priorityLow();</div><div class="line">    make.width.mas_equalTo(20).priorityHigh();</div><div class="line">    make.height.equalTo(self.view).priority(200);</div><div class="line">    make.height.mas_equalTo(100).priority(1000);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>设置约束比例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[self.redView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">    make.center.equalTo(self.view);</div><div class="line">    make.height.mas_equalTo(30);</div><div class="line">    make.width.equalTo(self.view).multipliedBy(0.2);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="UITableView动态Cell高度"><a href="#UITableView动态Cell高度" class="headerlink" title="UITableView动态Cell高度"></a>UITableView动态Cell高度</h3><p>在iOS UI开发过程中，UITableView的动态Cell高度一直都是个问题。实现这样的需求，实现方式有很多种，只是实现起来复杂程度和性能的区别。在不考虑性能的情况下，tableView动态Cell高度，可以采取估算高度的方式。如果通过估算高度的方式实现的话，无论是纯代码还是Interface Builder，都只需要两行代码就可以完成Cell自动高度适配。</p>
<p>需要设置tableView的rowHeight属性，这里设置为自动高度，告诉系统Cell的高度是不固定的，需要系统帮我们进行计算。然后设置tableView的estimatedRowHeight属性，设置一个估计的高度。(我这里用的代理方法，实际上都一样)。其原理是：在tableView被创建之后，系统会根据estimatedRowHeight属性设置的值，为tableView设置一个估计的值。然后在Cell显示的时候再获取Cell的高度，并刷新tableView的contentSize。涉及到的代码有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">- (void)tableViewConstraints &#123;</div><div class="line">    [self.tableView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.edges.equalTo(self.view);</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"> </div><div class="line">- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section &#123;</div><div class="line">    return self.dataList.count;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">- (MasonryTableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    MasonryTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:LXZTableViewCellIdentifier];</div><div class="line">    [cell reloadViewWithText:self.dataList[indexPath.row]];</div><div class="line">    return cell;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">// 需要注意的是，这个代理方法和直接返回当前Cell高度的代理方法并不一样。</div><div class="line">// 这个代理方法会将当前所有Cell的高度都预估出来，而不是只计算显示的Cell，所以这种方式对性能消耗还是很大的。</div><div class="line">// 所以通过设置estimatedRowHeight属性的方式，和这种代理方法的方式，最后性能消耗都是一样的。</div><div class="line">- (CGFloat)tableView:(UITableView *)tableView estimatedHeightForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    return 50.f;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">- (UITableView *)tableView &#123;</div><div class="line">    if (!_tableView) &#123;</div><div class="line">        _tableView = [[UITableView alloc] initWithFrame:CGRectZero style:UITableViewStylePlain];</div><div class="line">        _tableView.delegate = self;</div><div class="line">        _tableView.dataSource = self;</div><div class="line">        // 设置tableView自动高度</div><div class="line">        _tableView.rowHeight = UITableViewAutomaticDimension;</div><div class="line">        [_tableView registerClass:[MasonryTableViewCell class] forCellReuseIdentifier:LXZTableViewCellIdentifier];</div><div class="line">        [self.view addSubview:_tableView];</div><div class="line">    &#125;</div><div class="line">    return _tableView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="综合示例"><a href="#综合示例" class="headerlink" title="综合示例"></a>综合示例</h3><p><img src="http://img.blog.csdn.net/20170826112448503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line">- (void)setupFrame &#123;</div><div class="line">    __weak typeof(self) weakSelf = self;</div><div class="line"></div><div class="line">    //上传头像</div><div class="line">    UIButton *iconBtn = [[UIButton alloc]init];</div><div class="line">    [iconBtn setCornerRadius:45];</div><div class="line">    [iconBtn setBackgroundImage:[UIImage imageNamed:@&quot;huantouxiang&quot;] forState:UIControlStateNormal];</div><div class="line">    [iconBtn addTarget:self action:@selector(iconButton) forControlEvents:UIControlEventTouchDown];</div><div class="line">    [self.view addSubview:iconBtn];</div><div class="line">    self.iconBtn = iconBtn;</div><div class="line"></div><div class="line">    [self.iconBtn mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.size.mas_equalTo(CGSizeMake(90, 90));</div><div class="line">        make.centerX.equalTo(weakSelf.view);</div><div class="line">        make.top.width.offset(90);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    //上传社区头像文字提醒</div><div class="line">    UILabel *iconLabel = [[UILabel alloc]init];</div><div class="line">    iconLabel.textColor = c3;</div><div class="line">    iconLabel.text = @&quot;上传社团头像&quot;;</div><div class="line">    iconLabel.font = [UIFont systemFontOfSize:15];</div><div class="line">    [self.view addSubview:iconLabel];</div><div class="line">    </div><div class="line">    [iconLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.centerX.equalTo(iconBtn);</div><div class="line">        make.top.equalTo(iconBtn.mas_bottom).with.offset(20);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    //社团编辑图标</div><div class="line">    UIImageView *editIcon = [[UIImageView alloc]init];</div><div class="line">    editIcon.image = [UIImage imageNamed:@&quot;bianxie&quot;];</div><div class="line">    [self.view addSubview:editIcon];</div><div class="line">    </div><div class="line">    [editIcon mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.size.mas_equalTo(CGSizeMake(25, 20));</div><div class="line">        make.left.equalTo(weakSelf.view).with.offset(10);</div><div class="line">        make.top.equalTo(iconLabel.mas_bottom).with.offset(30);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    //社团名</div><div class="line">    UITextField *nameText = [[UITextField alloc]init];</div><div class="line">    nameText.placeholder = @&quot;请填写社区名(社团名最多6个字)&quot;;</div><div class="line">    [self.view addSubview:nameText];</div><div class="line">    self.nameText = nameText;</div><div class="line">    </div><div class="line">    [nameText mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.height.mas_equalTo(@20);</div><div class="line">        make.centerY.equalTo(editIcon);</div><div class="line">        make.right.equalTo(weakSelf.view).with.offset(-10);</div><div class="line">        make.left.equalTo(editIcon.mas_right).with.offset(5);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    //分割线</div><div class="line">    UIImageView *xian = [[UIImageView alloc]init];</div><div class="line">    xian.backgroundColor = DBColor(226, 226, 226);</div><div class="line">    [self.view addSubview:xian];</div><div class="line">    </div><div class="line">    [xian mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.height.mas_equalTo(@1);</div><div class="line">        make.left.equalTo(weakSelf.view).with.offset(10);</div><div class="line">        make.right.equalTo(weakSelf.view).with.offset(-10);</div><div class="line">        make.top.equalTo(editIcon.mas_bottom).with.offset(5);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    //选择标签</div><div class="line">    UILabel *tagLabel = [[UILabel alloc]init];</div><div class="line">    tagLabel.text = @&quot;选择标签&quot;;</div><div class="line">    tagLabel.textColor = c3;</div><div class="line">    tagLabel.font = [UIFont systemFontOfSize:15];</div><div class="line">    [self.view addSubview:tagLabel];</div><div class="line">    </div><div class="line">    [tagLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.height.mas_equalTo(@20);</div><div class="line">        make.width.mas_equalTo(@60);</div><div class="line">        make.left.equalTo(weakSelf.view).with.offset(10);</div><div class="line">        make.top.equalTo(xian).with.offset(35);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    //跳转标签选择</div><div class="line">    UITextField *tagText = [[UITextField alloc]init];</div><div class="line">    tagText.placeholder = @&quot;美容颜&quot;;</div><div class="line">    tagText.borderStyle=UITextBorderStyleRoundedRect;</div><div class="line">    tagText.delegate = self;</div><div class="line">    [tagText addTarget:self action:@selector(textTag) forControlEvents:UIControlEventTouchDown];</div><div class="line">    [self.view addSubview:tagText];</div><div class="line">    </div><div class="line">    [tagText mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.centerY.equalTo(tagLabel);</div><div class="line">        make.right.equalTo(weakSelf.view).with.offset(-10);</div><div class="line">        make.left.equalTo(tagLabel.mas_right).with.offset(5);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    //tagView</div><div class="line">    self.tagView = (&#123;</div><div class="line">        SKTagView *view = [SKTagView new];</div><div class="line">        view.backgroundColor = [UIColor clearColor];</div><div class="line">        view.padding    = UIEdgeInsetsMake(0, 0, 0, 0);</div><div class="line">        view.insets    = 15;</div><div class="line">        view.lineSpace = 10;</div><div class="line">        __weak SKTagView *weakView = view;</div><div class="line">        view.didClickTagAtIndex = ^(NSUInteger index)&#123;</div><div class="line">            //Remove tag</div><div class="line">            [weakView removeTagAtIndex:index];</div><div class="line">        &#125;;</div><div class="line">        view;</div><div class="line">    &#125;);</div><div class="line">    [self.view addSubview:self.tagView];</div><div class="line">    [self.tagView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.left.equalTo(weakSelf.view).with.offset(10);</div><div class="line">        make.right.equalTo(weakSelf.view).with.offset(-10);</div><div class="line">        make.top.equalTo(tagText.mas_bottom).with.offset(10);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    //label标识语</div><div class="line">    UILabel *label = [[UILabel alloc]init];</div><div class="line">    label.font = [UIFont systemFontOfSize:13];</div><div class="line">    label.textColor = [UIColor redColor];</div><div class="line">    label.text = @&quot;PS:成员和视频越多得社团越容易被发现!&quot;;</div><div class="line">    [self.view addSubview:label];</div><div class="line">    </div><div class="line">    [label mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.left.equalTo(weakSelf.view).with.offset(10);</div><div class="line">        make.right.equalTo(weakSelf.view).with.offset(-10);</div><div class="line">        make.top.equalTo(self.tagView.mas_bottom).with.offset(20);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    UIButton *commitBtn = [[UIButton alloc]init];</div><div class="line">    [commitBtn setCornerRadius:5];</div><div class="line">    [commitBtn setBorderWidth:1 color:DBTextThemeColor];</div><div class="line">    [commitBtn setTitleColor:DBTextThemeColor forState:UIControlStateNormal];</div><div class="line">    commitBtn.titleLabel.font = [UIFont systemFontOfSize:15];</div><div class="line">    [commitBtn setTitle:@&quot;确认发布&quot; forState:UIControlStateNormal];</div><div class="line">    [commitBtn addTarget:self action:@selector(commitButton) forControlEvents:UIControlEventTouchDown];</div><div class="line">    [self.view addSubview:commitBtn];</div><div class="line">    </div><div class="line">    [commitBtn mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.height.mas_equalTo(@30);</div><div class="line">        make.left.equalTo(weakSelf.view).with.offset(10);</div><div class="line">        make.right.equalTo(weakSelf.view).with.offset(-10);</div><div class="line">        make.top.equalTo(label.mas_bottom).with.offset(50);</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前iOS开发中大多数页面都已经开始使用Interface Builder的方式进行UI开发了，但是在一些变化比较复杂的页面，还是需要通过代码来进行UI开发的。而且有很多比较老的项目，本身就还在采用纯代码的方式进行开发。而现在iPhone和iPad屏幕尺寸越来越多，虽然开发
    
    </summary>
    
      <category term="iOS" scheme="http://www.xiangzhihong.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://www.xiangzhihong.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>React Native 自定义控件专题</title>
    <link href="http://www.xiangzhihong.com/2017/05/18/React%20Native%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E4%B9%8B%E9%AA%8C%E8%AF%81%E7%A0%81%E5%92%8CToast/"/>
    <id>http://www.xiangzhihong.com/2017/05/18/React Native 自定义控件之验证码和Toast/</id>
    <published>2017-05-17T16:00:00.000Z</published>
    <updated>2017-07-17T06:35:46.458Z</updated>
    
    <content type="html"><![CDATA[<p>React Native通过近两年的迭代和维护，最新版本已经到了0.45.1，关于最新版本的介绍请查看我之前的博客：<a href="http://blog.csdn.net/xiangzhihong8/article/details/72930431" target="_blank" rel="external">0.45新特性</a>。话说回来，尽管迭代的挺快，但还是有很多坑，很多基础的组件和API还是不完善。</p>
<p>今天给大家带来的自定义小专题，其实对于React Native来说，自定义组件的过程更像是Android、iOS的组合控件。大体步骤有如下几个步骤（不完全准确，但是方向大体准确）：<br>1，定义构造函数constructor；<br>2，定义组件属性propTypes；<br>3，绘制界面；<br>4，添加更新界面逻辑等</p>
<h2 id="自定义Toast"><a href="#自定义Toast" class="headerlink" title="自定义Toast"></a>自定义Toast</h2><p>在系统组件中，RN为我们提供了ToastAndroid组件，但是对于iOS好像并没有直接提供，这时候我们就想到了自定义控件了。如下图所示：<br><img src="http://img.blog.csdn.net/20170621213545477?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>我们之前讲过Animated组件，这个组件可以实现渐变，缩放，旋转等动画效果，在这里，我们可以用它来实现Toast的功能。比如，显示两秒后消失，为了对显示的位置进行设置，我们还可以设置显示的位置，所以绘制render的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">        let top;</div><div class="line">        switch (this.props.position)&#123;</div><div class="line">            case &apos;top&apos;:</div><div class="line">                top=160;</div><div class="line">                break;</div><div class="line">            case &apos;center&apos;:</div><div class="line">                top=height /2;</div><div class="line">                break;</div><div class="line">            case &apos;bottom&apos;:</div><div class="line">                top=height - 160;</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        let view = this.state.isShow ?</div><div class="line">            &lt;View</div><div class="line">                style=&#123;[styles.container,&#123;top:top&#125;]&#125;</div><div class="line">                pointerEvents=&quot;none&quot;</div><div class="line">            &gt;</div><div class="line">                &lt;Animated.View</div><div class="line">                    style=&#123;[styles.content,&#123;opacity:this.state.opacityValue&#125;]&#125;</div><div class="line">                &gt;</div><div class="line">                    &lt;Text style=&#123;styles.text&#125;&gt;&#123;this.state.text&#125;&lt;/Text&gt;</div><div class="line">                &lt;/Animated.View&gt;</div><div class="line">            &lt;/View&gt; : null;</div><div class="line">        return view;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>显示时长控制方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">show(text, duration) &#123;</div><div class="line">        if(duration&gt;=DURATION.LENGTH_LONG)&#123;</div><div class="line">            this.duration=DURATION.LENGTH_LONG;</div><div class="line">        &#125;else &#123;</div><div class="line">            this.duration=DURATION.LENGTH_SHORT;</div><div class="line">        &#125;</div><div class="line">        this.setState(&#123;</div><div class="line">            isShow: true,</div><div class="line">            text: text,</div><div class="line">        &#125;);</div><div class="line">        this.isShow=true;</div><div class="line">        this.state.opacityValue.setValue(OPACITY)</div><div class="line">        this.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>完整代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Sample React Native App</div><div class="line"> * https://github.com/facebook/react-native</div><div class="line"> * @flow</div><div class="line"> */</div><div class="line"></div><div class="line">import React, &#123;Component,PropTypes&#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">    StyleSheet,</div><div class="line">    View,</div><div class="line">    Animated,</div><div class="line">    Dimensions,</div><div class="line">    Text,</div><div class="line">&#125; from &apos;react-native&apos;</div><div class="line">export const DURATION = &#123;LENGTH_LONG: 2000, LENGTH_SHORT: 500&#125;;</div><div class="line">const &#123;height, width&#125; = Dimensions.get(&apos;window&apos;);</div><div class="line">const OPACITY=0.6;</div><div class="line"></div><div class="line">const dismissKeyboard = require(&apos;dismissKeyboard&apos;)</div><div class="line"></div><div class="line">export default class ToastUtil extends Component &#123;</div><div class="line">    static propTypes = &#123;</div><div class="line">        position: PropTypes.oneOf([</div><div class="line">            &apos;top&apos;,</div><div class="line">            &apos;center&apos;,</div><div class="line">            &apos;bottom&apos;,</div><div class="line">        ]),</div><div class="line">    &#125;</div><div class="line">    static defaultProps = &#123;</div><div class="line">        position:&apos;center&apos;,</div><div class="line">    &#125;</div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">        this.state = &#123;</div><div class="line">            isShow: false,</div><div class="line">            text: &apos;&apos;,</div><div class="line">            opacityValue:new Animated.Value(OPACITY),</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    show(text, duration) &#123;</div><div class="line">        if(duration&gt;=DURATION.LENGTH_LONG)&#123;</div><div class="line">            this.duration=DURATION.LENGTH_LONG;</div><div class="line">        &#125;else &#123;</div><div class="line">            this.duration=DURATION.LENGTH_SHORT;</div><div class="line">        &#125;</div><div class="line">        this.setState(&#123;</div><div class="line">            isShow: true,</div><div class="line">            text: text,</div><div class="line">        &#125;);</div><div class="line">        this.isShow=true;</div><div class="line">        this.state.opacityValue.setValue(OPACITY)</div><div class="line">        this.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    close() &#123;</div><div class="line">        if(!this.isShow)return;</div><div class="line">        this.timer &amp;&amp; clearTimeout(this.timer);</div><div class="line">        this.timer = setTimeout(() =&gt; &#123;</div><div class="line">            Animated.timing(</div><div class="line">                this.state.opacityValue,</div><div class="line">                &#123;</div><div class="line">                    toValue: 0.0,</div><div class="line">                    duration:1000,</div><div class="line">                &#125;</div><div class="line">            ).start(()=&gt;&#123;</div><div class="line">                this.setState(&#123;</div><div class="line">                    isShow: false,</div><div class="line">                &#125;);</div><div class="line">                this.isShow=false;</div><div class="line">            &#125;);</div><div class="line">        &#125;, this.duration);</div><div class="line">    &#125;</div><div class="line">    componentWillUnmount() &#123;</div><div class="line">        this.timer &amp;&amp; clearTimeout(this.timer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        let top;</div><div class="line">        switch (this.props.position)&#123;</div><div class="line">            case &apos;top&apos;:</div><div class="line">                top=160;</div><div class="line">                break;</div><div class="line">            case &apos;center&apos;:</div><div class="line">                top=height /2;</div><div class="line">                break;</div><div class="line">            case &apos;bottom&apos;:</div><div class="line">                top=height - 160;</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        let view = this.state.isShow ?</div><div class="line">            &lt;View</div><div class="line">                style=&#123;[styles.container,&#123;top:top&#125;]&#125;</div><div class="line">                pointerEvents=&quot;none&quot;</div><div class="line">            &gt;</div><div class="line">                &lt;Animated.View</div><div class="line">                    style=&#123;[styles.content,&#123;opacity:this.state.opacityValue&#125;]&#125;</div><div class="line">                &gt;</div><div class="line">                    &lt;Text style=&#123;styles.text&#125;&gt;&#123;this.state.text&#125;&lt;/Text&gt;</div><div class="line">                &lt;/Animated.View&gt;</div><div class="line">            &lt;/View&gt; : null;</div><div class="line">        return view;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        position: &apos;absolute&apos;,</div><div class="line">        left: 0,</div><div class="line">        right: 0,</div><div class="line">        alignItems: &apos;center&apos;,</div><div class="line">    &#125;,</div><div class="line">    content: &#123;</div><div class="line">        backgroundColor: &apos;black&apos;,</div><div class="line">        opacity: OPACITY,</div><div class="line">        borderRadius: 5,</div><div class="line">        padding: 10,</div><div class="line">    &#125;,</div><div class="line">    text:&#123;</div><div class="line">        color:&apos;white&apos;</div><div class="line">    &#125;,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>如何使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Toast ref=&quot;toast&quot;/&gt;</div><div class="line">//省略...</div><div class="line">&lt;Text style=&#123;styles.styleText&#125; onPress=&#123;()=&gt;&#123;</div><div class="line">                   this.refs.toast.show(&apos;你点击了忘记密码!&apos;,3000);&#125;&#125;&gt;</div><div class="line"> 忘记密码？</div><div class="line">&lt;/Text&gt;</div><div class="line">//省略...</div></pre></td></tr></table></figure>
<h2 id="获取验证码"><a href="#获取验证码" class="headerlink" title="获取验证码"></a>获取验证码</h2><p>在很多应用开发中都会涉及到获取手机验证码的场景，例如登录或者注册获取验证码。如下图：<br><img src="http://img.blog.csdn.net/20170621214808809?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><img src="http://img.blog.csdn.net/20170621214751957?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>那么按照自定义组件的流程，先添加构造函数，并定义必须的一些字段(相关属性)，并完成初始化：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">static propTypes = &#123;</div><div class="line">        style: PropTypes.object,//style属性</div><div class="line">        textStyle: Text.propTypes.style,//文本文字</div><div class="line">        onClick: PropTypes.func,//点击事件</div><div class="line">        disableColor: PropTypes.string,//倒计时过程中颜色</div><div class="line">        timerTitle: PropTypes.string,//倒计时文本</div><div class="line">        enable: React.PropTypes.oneOfType([React.PropTypes.bool,React.PropTypes.number])</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>2，构造函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">constructor(props) &#123;</div><div class="line">        super(props)</div><div class="line">        this.state = &#123;</div><div class="line">            timerCount: this.props.timerCount || 60,//默认倒计时时间</div><div class="line">            timerTitle: this.props.timerTitle || &apos;获取验证码&apos;,</div><div class="line">            counting: false,</div><div class="line">            selfEnable: true,</div><div class="line">        &#125;;</div><div class="line">        this.shouldStartCountting = this.shouldStartCountting.bind(this)</div><div class="line">        this.countDownAction = this.countDownAction.bind(this)</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>3，添加绘制界面代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">        const &#123;onClick, style, textStyle, disableColor&#125; = this.props;</div><div class="line">        const &#123;counting, timerTitle, selfEnable&#125; = this.state;</div><div class="line">        return (</div><div class="line">            &lt;TouchableOpacity activeOpacity=&#123;counting ? 1 : 0.8&#125; onPress=&#123;() =&gt; &#123;</div><div class="line">                if (!counting &amp;&amp;selfEnable) &#123;</div><div class="line">                    this.setState(&#123;selfEnable: false&#125;);</div><div class="line">                    this.shouldStartCountting(true);</div><div class="line">                &#125;;</div><div class="line">            &#125;&#125;&gt;</div><div class="line">                &lt;View</div><div class="line">                    style=&#123;styles.styleCodeView&#125;&gt;</div><div class="line">                    &lt;Text</div><div class="line">                        style=&#123;[&#123;fontSize: 12&#125;, textStyle, &#123;color: ((!counting &amp;&amp; selfEnable) ? textStyle.color : disableColor || &apos;gray&apos;)&#125;]&#125;&gt;&#123;timerTitle&#125;&lt;/Text&gt;</div><div class="line">                &lt;/View&gt;</div><div class="line">            &lt;/TouchableOpacity&gt;</div><div class="line">        )</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>4，添加逻辑代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">shouldStartCountting(shouldStart) &#123;</div><div class="line">        if (this.state.counting) &#123;</div><div class="line">            return</div><div class="line">        &#125;</div><div class="line">        if (shouldStart) &#123;</div><div class="line">            this.countDownAction()</div><div class="line">            this.setState(&#123;counting: true, selfEnable: false&#125;)</div><div class="line">        &#125; else &#123;</div><div class="line">            this.setState(&#123;selfEnable: true&#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">//倒计时逻辑</div><div class="line">countDownAction() &#123;</div><div class="line">        const codeTime = this.state.timerCount;</div><div class="line">        this.interval = setInterval(() =&gt; &#123;</div><div class="line">            const timer = this.state.timerCount - 1</div><div class="line">            if (timer === 0) &#123;</div><div class="line">                this.interval &amp;&amp; clearInterval(this.interval);</div><div class="line">                this.setState(&#123;</div><div class="line">                    timerCount: codeTime,</div><div class="line">                    timerTitle: this.props.timerTitle || &apos;获取验证码&apos;,</div><div class="line">                    counting: false,</div><div class="line">                    selfEnable: true</div><div class="line">                &#125;)</div><div class="line">            &#125; else &#123;</div><div class="line">                this.setState(&#123;</div><div class="line">                    timerCount: timer,</div><div class="line">                    timerTitle: `重新获取($&#123;timer&#125;s)`,</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;, 1000)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>说明：<br>shouldStartCountting：回调函数，接受一个Bool类型的参数<br>1，shouldStartCountting(true)，开始倒计时，倒计时结束时自动恢复初始状态<br>2，shouldStartCountting(false)， 按钮的selfEnable会立即被置为true<br>所以，获取验证码的完整代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Sample React Native App</div><div class="line"> * https://github.com/facebook/react-native</div><div class="line"> * @flow</div><div class="line"> */</div><div class="line"></div><div class="line">import React, &#123;Component,PropTypes&#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">    Text,</div><div class="line">    StyleSheet,</div><div class="line">    View,</div><div class="line">    TouchableOpacity,</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line"></div><div class="line">var Dimensions = require(&apos;Dimensions&apos;);</div><div class="line">var screenWidth = Dimensions.get(&apos;window&apos;).width;</div><div class="line"></div><div class="line">export default  class TimerButton extends Component &#123;</div><div class="line"></div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props)</div><div class="line">        this.state = &#123;</div><div class="line">            timerCount: this.props.timerCount || 60,</div><div class="line">            timerTitle: this.props.timerTitle || &apos;获取验证码&apos;,</div><div class="line">            counting: false,</div><div class="line">            selfEnable: true,</div><div class="line">        &#125;;</div><div class="line">        this.shouldStartCountting = this.shouldStartCountting.bind(this)</div><div class="line">        this.countDownAction = this.countDownAction.bind(this)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static propTypes = &#123;</div><div class="line">        style: PropTypes.object,</div><div class="line">        textStyle: Text.propTypes.style,</div><div class="line">        onClick: PropTypes.func,</div><div class="line">        disableColor: PropTypes.string,</div><div class="line">        timerTitle: PropTypes.string,</div><div class="line">        enable: React.PropTypes.oneOfType([React.PropTypes.bool,React.PropTypes.number])</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    countDownAction() &#123;</div><div class="line">        const codeTime = this.state.timerCount;</div><div class="line">        this.interval = setInterval(() =&gt; &#123;</div><div class="line">            const timer = this.state.timerCount - 1</div><div class="line">            if (timer === 0) &#123;</div><div class="line">                this.interval &amp;&amp; clearInterval(this.interval);</div><div class="line">                this.setState(&#123;</div><div class="line">                    timerCount: codeTime,</div><div class="line">                    timerTitle: this.props.timerTitle || &apos;获取验证码&apos;,</div><div class="line">                    counting: false,</div><div class="line">                    selfEnable: true</div><div class="line">                &#125;)</div><div class="line">            &#125; else &#123;</div><div class="line">                this.setState(&#123;</div><div class="line">                    timerCount: timer,</div><div class="line">                    timerTitle: `重新获取($&#123;timer&#125;s)`,</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;, 1000)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    shouldStartCountting(shouldStart) &#123;</div><div class="line">        if (this.state.counting) &#123;</div><div class="line">            return</div><div class="line">        &#125;</div><div class="line">        if (shouldStart) &#123;</div><div class="line">            this.countDownAction()</div><div class="line">            this.setState(&#123;counting: true, selfEnable: false&#125;)</div><div class="line">        &#125; else &#123;</div><div class="line">            this.setState(&#123;selfEnable: true&#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentWillUnmount() &#123;</div><div class="line">        clearInterval(this.interval)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        const &#123;onClick, style, textStyle, disableColor&#125; = this.props;</div><div class="line">        const &#123;counting, timerTitle, selfEnable&#125; = this.state;</div><div class="line">        return (</div><div class="line">            &lt;TouchableOpacity activeOpacity=&#123;counting ? 1 : 0.8&#125; onPress=&#123;() =&gt; &#123;</div><div class="line">                if (!counting &amp;&amp;selfEnable) &#123;</div><div class="line">                    this.setState(&#123;selfEnable: false&#125;);</div><div class="line">                    this.shouldStartCountting(true);</div><div class="line">                &#125;;</div><div class="line">            &#125;&#125;&gt;</div><div class="line">                &lt;View</div><div class="line">                    style=&#123;styles.styleCodeView&#125;&gt;</div><div class="line">                    &lt;Text</div><div class="line">                        style=&#123;[&#123;fontSize: 12&#125;, textStyle, &#123;color: ((!counting &amp;&amp; selfEnable) ? textStyle.color : disableColor || &apos;gray&apos;)&#125;]&#125;&gt;&#123;timerTitle&#125;&lt;/Text&gt;</div><div class="line">                &lt;/View&gt;</div><div class="line">            &lt;/TouchableOpacity&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        flex: 1,</div><div class="line">        marginTop: 20</div><div class="line">    &#125;,</div><div class="line">    styleCodeView: &#123;</div><div class="line">        height: 28,</div><div class="line">        width: screenWidth*0.22,</div><div class="line">        borderColor: &apos;#dc1466&apos;,</div><div class="line">        borderWidth: 1,</div><div class="line">        borderRadius: 5,</div><div class="line">        justifyContent: &apos;center&apos;,</div><div class="line">        alignItems: &apos;center&apos;,</div><div class="line">    &#125;,</div><div class="line">    styleTextCode: &#123;</div><div class="line">        fontSize: 12,</div><div class="line">        color: &apos;#dc1466&apos;,</div><div class="line">        textAlign: &apos;center&apos;,</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import TimerButton from &apos;./TimerButton&apos;</div><div class="line"></div><div class="line">var Dimensions = require(&apos;Dimensions&apos;);</div><div class="line">var screenWidth = Dimensions.get(&apos;window&apos;).width;</div><div class="line"></div><div class="line">//省略...</div><div class="line">&lt;TimerButton</div><div class="line"> style=&#123;&#123;width: screenWidth*0.2,marginRight: 10&#125;&#125;</div><div class="line"> timerCount=&#123;60&#125;</div><div class="line"> textStyle=&#123;&#123;color: &apos;#dc1466&apos;&#125;&#125;</div><div class="line"> onclick=&#123;(start)=&gt;&#123;</div><div class="line"> &#125;&#125;/&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Native通过近两年的迭代和维护，最新版本已经到了0.45.1，关于最新版本的介绍请查看我之前的博客：&lt;a href=&quot;http://blog.csdn.net/xiangzhihong8/article/details/72930431&quot; target=&quot;_
    
    </summary>
    
      <category term="React Native" scheme="http://www.xiangzhihong.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://www.xiangzhihong.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>工程师资料库</title>
    <link href="http://www.xiangzhihong.com/2017/05/13/%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%B5%84%E6%96%99%E5%BA%93/"/>
    <id>http://www.xiangzhihong.com/2017/05/13/工程师资料库/</id>
    <published>2017-05-12T16:00:00.000Z</published>
    <updated>2017-08-21T05:41:36.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#语言无关">语言无关</a><ul>
<li><a href="#ide">IDE</a></li>
<li><a href="#mysql">MySQL</a></li>
<li><a href="#nosql">NoSQL</a></li>
<li><a href="#postgresql">PostgreSQL</a></li>
<li><a href="#web">Web</a></li>
<li><a href="#web服务器">WEB服务器</a></li>
<li><a href="#其它">其它</a></li>
<li><a href="#函数式概念">函数式概念</a></li>
<li><a href="#分布式系统">分布式系统</a></li>
<li><a href="#在线教育">在线教育</a></li>
<li><a href="#大数据">大数据</a></li>
<li><a href="#操作系统">操作系统</a></li>
<li><a href="#数据库">数据库</a></li>
<li><a href="#智能系统">智能系统</a></li>
<li><a href="#正则表达式">正则表达式</a></li>
<li><a href="#版本控制">版本控制</a></li>
<li><a href="#程序员杂谈">程序员杂谈</a></li>
<li><a href="#管理和监控">管理和监控</a></li>
<li><a href="#编程艺术">编程艺术</a></li>
<li><a href="#编译原理">编译原理</a></li>
<li><a href="#编辑器">编辑器</a></li>
<li><a href="#计算机图形学">计算机图形学</a></li>
<li><a href="#设计模式">设计模式</a></li>
<li><a href="#软件开发方法">软件开发方法</a></li>
<li><a href="#项目相关">项目相关</a></li>
</ul>
</li>
<li><a href="#语言相关">语言相关</a><ul>
<li><a href="#android">Android</a></li>
<li><a href="#awk">AWK</a></li>
<li><a href="#c">C</a></li>
<li><a href="#c-sharp">C#</a></li>
<li><a href="#c-1">C++</a></li>
<li><a href="#coffeescript">CoffeeScript</a></li>
<li><a href="#dart">Dart</a></li>
<li><a href="#elasticsearch">Elasticsearch</a></li>
<li><a href="#elixir">Elixir</a></li>
<li><a href="#erlang">Erlang</a></li>
<li><a href="#fortran">Fortran</a></li>
<li><a href="#golang">Golang</a></li>
<li><a href="#haskell">Haskell</a></li>
<li><a href="#html--css">HTML / CSS</a></li>
<li><a href="#http">HTTP</a></li>
<li><a href="#ios">iOS</a></li>
<li><a href="#java">Java</a></li>
<li><a href="#javascript">JavaScript</a></li>
<li><a href="#latex">LaTeX</a></li>
<li><a href="#lisp">LISP</a></li>
<li><a href="#lua">Lua</a></li>
<li><a href="#markdown">Markdown</a></li>
<li><a href="#nodejs">Node.js</a></li>
<li><a href="#perl">Perl</a></li>
<li><a href="#php">PHP</a></li>
<li><a href="#python">Python</a></li>
<li><a href="#r">R</a></li>
<li><a href="#restructuredtext">reStructuredText</a></li>
<li><a href="#ruby">Ruby</a></li>
<li><a href="#rust">Rust</a></li>
<li><a href="#scala">Scala</a></li>
<li><a href="#scheme">Scheme</a></li>
<li><a href="#shell">Shell</a></li>
<li><a href="#swift">Swift</a></li>
<li><a href="#vim">Vim</a></li>
<li><a href="#visual-prolog">Visual Prolog</a></li>
</ul>
</li>
</ul>
<h2 id="语言无关"><a href="#语言无关" class="headerlink" title="语言无关"></a>语言无关</h2><h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><ul>
<li><a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial" target="_blank" rel="external">IntelliJ IDEA 简体中文专题教程</a></li>
</ul>
<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ul>
<li><a href="http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html" target="_blank" rel="external">21分钟MySQL入门教程</a></li>
<li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="external">MySQL索引背后的数据结构及算法原理</a></li>
</ul>
<h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><ul>
<li><a href="http://disque.huangz.me" target="_blank" rel="external">Disque 使用教程</a></li>
<li><a href="http://neo4j.tw" target="_blank" rel="external">Neo4j .rb 中文資源</a></li>
<li><a href="http://redisdoc.com" target="_blank" rel="external">Redis 命令参考</a></li>
<li><a href="http://redisbook.com" target="_blank" rel="external">Redis 设计与实现</a></li>
<li><a href="https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md" target="_blank" rel="external">The Little MongoDB Book</a></li>
<li><a href="https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md" target="_blank" rel="external">The Little Redis Book</a></li>
<li><a href="https://github.com/huangz1990/annotated_redis_source" target="_blank" rel="external">带有详细注释的 Redis 2.6 代码</a></li>
<li><a href="https://github.com/huangz1990/redis-3.0-annotated" target="_blank" rel="external">带有详细注释的 Redis 3.0 代码</a></li>
</ul>
<h3 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h3><ul>
<li><a href="http://works.jinbuguo.com/postgresql/menu823/index.html" target="_blank" rel="external">PostgreSQL 8.2.3 中文文档</a></li>
<li><a href="http://www.postgres.cn/docs/9.3/index.html" target="_blank" rel="external">PostgreSQL 9.3.1 中文文档</a></li>
<li><a href="http://www.postgres.cn/docs/9.4/index.html" target="_blank" rel="external">PostgreSQL 9.4.4 中文文档</a></li>
<li><a href="http://www.postgres.cn/docs/9.5/index.html" target="_blank" rel="external">PostgreSQL 9.5.3 中文文档</a></li>
<li><a href="http://www.postgres.cn/docs/9.6/index.html" target="_blank" rel="external">PostgreSQL 9.6.0 中文文档</a></li>
</ul>
<h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><ul>
<li><a href="https://www.gitbook.com/book/juntao/3-web-designs-in-3-weeks/details" target="_blank" rel="external">3 Web Designs in 3 Weeks</a></li>
<li><a href="https://github.com/CN-Chrome-DevTools/CN-Chrome-DevTools" target="_blank" rel="external">Chrome 开发者工具中文手册</a></li>
<li><a href="http://open.chrome.360.cn/extension_dev/overview.html" target="_blank" rel="external">Chrome扩展开发文档</a></li>
<li><a href="https://github.com/phodal/growth-ebook" target="_blank" rel="external">Growth: 全栈增长工程师指南</a></li>
<li><a href="http://www.gruntjs.net" target="_blank" rel="external">Grunt中文文档</a></li>
<li><a href="https://github.com/nimojs/gulp-book" target="_blank" rel="external">Gulp 入门指南</a></li>
<li><a href="http://www.gulpjs.com.cn/docs/" target="_blank" rel="external">gulp中文文档</a></li>
<li><a href="https://github.com/bolasblack/http-api-guide" target="_blank" rel="external">HTTP 接口设计指北</a></li>
<li><a href="http://yuedu.baidu.com/ebook/478d1a62376baf1ffc4fad99?pn=1" target="_blank" rel="external">HTTP/2.0 中文翻译</a></li>
<li><a href="https://www.gitbook.com/book/ye11ow/http2-explained/details" target="_blank" rel="external">http2讲解</a></li>
<li><a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="external">JSON风格指南</a></li>
<li><a href="http://man.lupaworld.com/content/network/wireshark/index.html" target="_blank" rel="external">Wireshark用户手册</a></li>
<li><a href="https://community.emc.com/thread/194901" target="_blank" rel="external">一站式学习Wireshark</a></li>
<li><a href="http://www.20thingsilearned.com/zh-CN/home" target="_blank" rel="external">关于浏览器和网络的 20 项须知</a></li>
<li><a href="http://coderlmn.github.io/code-standards/" target="_blank" rel="external">前端代码规范 及 最佳实践</a></li>
<li><a href="https://github.com/fouber/blog/issues/2" target="_blank" rel="external">前端开发体系建设日记</a></li>
<li><a href="https://github.com/hacke2/hacke2.github.io/issues/1" target="_blank" rel="external">前端资源分享（一）</a></li>
<li><a href="https://github.com/hacke2/hacke2.github.io/issues/3" target="_blank" rel="external">前端资源分享（二）</a></li>
<li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a></li>
<li><a href="http://jinlong.github.io/2013/08/29/devtoolsecrets/" target="_blank" rel="external">浏览器开发工具的秘密</a></li>
<li><a href="https://github.com/AlloyTeam/Mars" target="_blank" rel="external">移动Web前端知识库</a></li>
<li><a href="https://github.com/hoosin/mobile-web-favorites" target="_blank" rel="external">移动前端开发收藏夹</a></li>
</ul>
<h3 id="WEB服务器"><a href="#WEB服务器" class="headerlink" title="WEB服务器"></a>WEB服务器</h3><ul>
<li><a href="http://works.jinbuguo.com/apache/menu22/index.html" target="_blank" rel="external">Apache 中文手册</a></li>
<li><a href="http://tengine.taobao.org/book/index.html" target="_blank" rel="external">Nginx开发从入门到精通</a> (淘宝团队出品)</li>
<li><a href="http://www.ttlsa.com/nginx/nginx-stu-pdf/" target="_blank" rel="external">Nginx教程从入门到精通</a> (PDF版本，运维生存时间出品)</li>
</ul>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ul>
<li><a href="https://softwaredownload.gitbooks.io/openwrt-fanqiang/content/" target="_blank" rel="external">OpenWrt智能、自动、透明翻墙路由器教程</a></li>
<li><a href="https://community.emc.com/docs/DOC-16067" target="_blank" rel="external">SAN 管理入门系列</a></li>
<li><a href="http://sketchcn.com/sketch-chinese-user-manual.html#introduce" target="_blank" rel="external">Sketch 中文手册</a></li>
<li><a href="http://ifeve.com/perfbook/" target="_blank" rel="external">深入理解并行编程</a></li>
</ul>
<h3 id="函数式概念"><a href="#函数式概念" class="headerlink" title="函数式概念"></a>函数式概念</h3><ul>
<li><a href="https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn" target="_blank" rel="external">傻瓜函数编程</a></li>
</ul>
<h3 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h3><ul>
<li><a href="http://dcaoyuan.github.io/papers/pdfs/Scalability.pdf" target="_blank" rel="external">走向分布式</a> (PDF)</li>
</ul>
<h3 id="在线教育"><a href="#在线教育" class="headerlink" title="在线教育"></a>在线教育</h3><ul>
<li><a href="http://edu.51cto.com" target="_blank" rel="external">51CTO学院</a></li>
<li><a href="https://www.codecademy.com/?locale_code=zh" target="_blank" rel="external">Codecademy</a></li>
<li><a href="https://www.codeschool.com" target="_blank" rel="external">CodeSchool</a></li>
<li><a href="https://www.coursera.org/courses?orderby=upcoming&amp;lngs=zh" target="_blank" rel="external">Coursera</a></li>
<li><a href="https://learnxinyminutes.com" target="_blank" rel="external">Learn X in Y minutes</a> (数十种语言快速入门教程)</li>
<li><a href="https://www.shiyanlou.com" target="_blank" rel="external">shiyanlou</a></li>
<li><a href="https://teamtreehouse.com" target="_blank" rel="external">TeamTreeHouse</a></li>
<li><a href="https://www.udacity.com" target="_blank" rel="external">Udacity</a></li>
<li><a href="https://www.xuetangx.com" target="_blank" rel="external">xuetangX</a></li>
<li><a href="http://www.imooc.com/course/list" target="_blank" rel="external">慕课网</a> (丰富的移动端开发、php开发、web前端、html5教程以及css3视频教程等课程资源)</li>
<li><a href="http://www.jikexueyuan.com" target="_blank" rel="external">极客学院</a></li>
<li><a href="http://www.hubwiz.com" target="_blank" rel="external">汇智网</a></li>
<li><a href="http://www.jisuanke.com" target="_blank" rel="external">计蒜客</a></li>
</ul>
<h3 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h3><ul>
<li><a href="https://aiyanbo.gitbooks.io/spark-programming-guide-zh-cn/content/" target="_blank" rel="external">Spark 编程指南简体中文版</a></li>
<li><a href="https://code.csdn.net/CODE_Translation/spark_matei_phd" target="_blank" rel="external">大型集群上的快速和通用数据处理架构</a></li>
<li><a href="https://github.com/Flowerowl/Big-Data-Resources" target="_blank" rel="external">大数据/数据挖掘/推荐系统/机器学习相关资源</a></li>
<li><a href="https://github.com/linyiqun/DataMiningAlgorithm" target="_blank" rel="external">数据挖掘中经典的算法实现和详细的注释</a></li>
<li><a href="http://dataminingguide.books.yourtion.com" target="_blank" rel="external">面向程序员的数据挖掘指南</a></li>
</ul>
<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul>
<li><a href="http://man.chinaunix.net/linux/debian/reference/reference.zh-cn.html" target="_blank" rel="external">Debian 参考手册 </a></li>
<li><a href="https://github.com/yeasy/docker_practice" target="_blank" rel="external">Docker —— 从入门到实践</a></li>
<li><a href="https://github.com/widuu/chinese_docker" target="_blank" rel="external">Docker中文指南</a></li>
<li><a href="http://yuedu.baidu.com/ebook/d817967416fc700abb68fca1" target="_blank" rel="external">Docker入门实战</a></li>
<li><a href="http://www.freebsd.org/doc/zh_CN.UTF-8/books/handbook/" target="_blank" rel="external">FreeBSD 使用手册</a></li>
<li><a href="http://freeradius.akagi201.org" target="_blank" rel="external">FreeRADIUS新手入门</a></li>
<li><a href="https://tinylab.gitbooks.io/linux-doc/content/zh-cn/" target="_blank" rel="external">Linux Documentation (中文版)</a></li>
<li><a href="http://happypeter.github.io/LGCB/book/" target="_blank" rel="external">Linux Guide for Complete Beginners</a></li>
<li><a href="http://works.jinbuguo.com/lfs/lfs62/index.html" target="_blank" rel="external">Linux 构建指南</a></li>
<li><a href="http://sourceforge.net/projects/elpi/" target="_blank" rel="external">Linux 系统高级编程</a></li>
<li><a href="https://github.com/me115/linuxtools_rst" target="_blank" rel="external">Linux工具快速教程</a></li>
<li><a href="https://aaaaaashu.gitbooks.io/mac-dev-setup/content/" target="_blank" rel="external">Mac 开发配置手册</a></li>
<li><a href="http://pages.cs.wisc.edu/~remzi/OSTEP/" target="_blank" rel="external">Operating Systems: Three Easy Pieces</a></li>
<li><a href="http://billie66.github.io/TLCL/index.html" target="_blank" rel="external">The Linux Command Line</a> (中英文版)</li>
<li><a href="http://wiki.ubuntu.org.cn/UbuntuManual" target="_blank" rel="external">Ubuntu 参考手册 </a></li>
<li><a href="https://www.gitbook.com/book/objectkuan/ucore-docs/details" target="_blank" rel="external">uCore Lab: Operating System Course in Tsinghua University</a></li>
<li><a href="http://cb.vu/unixtoolbox_zh_CN.xhtml" target="_blank" rel="external">UNIX TOOLBOX</a></li>
<li><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md" target="_blank" rel="external">命令行的艺术</a></li>
<li><a href="https://tinylab.gitbooks.io/elinux/content/zh/" target="_blank" rel="external">嵌入式 Linux 知识库 (eLinux.org 中文版)</a></li>
<li><a href="http://i.linuxtoy.org/docs/guide/index.html" target="_blank" rel="external">开源世界旅行手册</a></li>
<li><a href="https://github.com/tobegit3hub/understand_linux_process" target="_blank" rel="external">理解Linux进程</a></li>
<li><a href="http://cn.linux.vbird.org/linux_basic/linux_basic.php" target="_blank" rel="external">鸟哥的 Linux 私房菜 基础学习篇</a></li>
<li><a href="http://cn.linux.vbird.org/linux_server/" target="_blank" rel="external">鸟哥的 Linux 私房菜 服务器架设篇</a></li>
</ul>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul>
<li><a href="http://redisbook.com" target="_blank" rel="external">Redis 设计与实现</a></li>
<li><a href="https://github.com/justinyhuang/the-little-mongodb-book-cn" target="_blank" rel="external">The Little MongoDB Book 中文版</a></li>
</ul>
<h3 id="智能系统"><a href="#智能系统" class="headerlink" title="智能系统"></a>智能系统</h3><ul>
<li><a href="https://github.com/phodal/designiot" target="_blank" rel="external">一步步搭建物联网系统</a></li>
</ul>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><ul>
<li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a></li>
</ul>
<h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><ul>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">Git - 简易指南</a></li>
<li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet" target="_blank" rel="external">Git-Cheat-Sheet</a> （感谢 @flyhigher139 翻译了中文版）</li>
<li><a href="http://gitbook.liuhui998.com" target="_blank" rel="external">Git Community Book 中文版</a></li>
<li><a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html" target="_blank" rel="external">git-flow 备忘清单</a></li>
<li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/" target="_blank" rel="external">Git magic</a></li>
<li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/" target="_blank" rel="external">Git Magic</a></li>
<li><a href="http://gitref.justjavac.com" target="_blank" rel="external">Git 参考手册</a></li>
<li><a href="https://github.com/waylau/github-help" target="_blank" rel="external">Github帮助文档</a></li>
<li><a href="https://snowdream86.gitbooks.io/github-cheat-sheet/content/zh/" target="_blank" rel="external">GitHub秘籍</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程</a> （本文由 <a href="http://weibo.com/liaoxuefeng" target="_blank" rel="external">@廖雪峰</a> 创作，如果觉得本教程对您有帮助，可以去 <a href="https://itunes.apple.com/cn/app/git-jiao-cheng/id876420437" target="_blank" rel="external">iTunes</a> 购买）</li>
<li><a href="https://github.com/gotgit/gotgithub" target="_blank" rel="external">Got GitHub</a></li>
<li><a href="http://www.worldhello.net/gotgithub/index.html" target="_blank" rel="external">GotGitHub</a></li>
<li><a href="https://zh-hginit.readthedocs.io/en/latest/" target="_blank" rel="external">HgInit (中文版)</a></li>
<li><a href="https://www.mercurial-scm.org/wiki/ChineseTutorial" target="_blank" rel="external">Mercurial 使用教程</a></li>
<li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">Pro Git</a></li>
<li><a href="https://www.gitbook.com/book/0532/progit/details" target="_blank" rel="external">Pro Git 中文版</a> (整理在gitbook上)</li>
<li><a href="http://svnbook.red-bean.com/nightly/zh/index.html" target="_blank" rel="external">svn 手册</a></li>
<li><a href="http://pcottle.github.io/learnGitBranching/" target="_blank" rel="external">学习 Git 分支</a> (点击右下角按钮可切换至简体及正体中文)</li>
<li><a href="http://igit.linuxtoy.org/index.html" target="_blank" rel="external">沉浸式学 Git</a></li>
<li><a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="external">猴子都能懂的GIT入门</a></li>
</ul>
<h3 id="程序员杂谈"><a href="#程序员杂谈" class="headerlink" title="程序员杂谈"></a>程序员杂谈</h3><ul>
<li><a href="http://www.kancloud.cn/kancloud/a-programmer-prepares" target="_blank" rel="external">程序员的自我修养</a></li>
</ul>
<h3 id="管理和监控"><a href="#管理和监控" class="headerlink" title="管理和监控"></a>管理和监控</h3><ul>
<li><a href="https://www.gitbook.com/book/fuxiaopang/learnelasticsearch/details" target="_blank" rel="external">ElasticSearch 权威指南</a></li>
<li><a href="http://es.xiaoleilu.com" target="_blank" rel="external">Elasticsearch 权威指南（中文版）</a></li>
<li><a href="http://kibana.logstash.es" target="_blank" rel="external">ELKstack 中文指南</a></li>
<li><a href="https://github.com/chenryn/logstash-best-practice-cn" target="_blank" rel="external">Logstash 最佳实践</a></li>
<li><a href="http://udn.yyuap.com/doc/mastering-elasticsearch/" target="_blank" rel="external">Mastering Elasticsearch(中文版)</a></li>
<li><a href="https://www.gitbook.com/book/wizardforcel/puppet-27-cookbook/details" target="_blank" rel="external">Puppet 2.7 Cookbook 中文版</a></li>
</ul>
<h3 id="编程艺术"><a href="#编程艺术" class="headerlink" title="编程艺术"></a>编程艺术</h3><ul>
<li><a href="http://read.douban.com/ebook/4972883/" target="_blank" rel="external">取悦的工序：如何理解游戏</a> (豆瓣阅读，免费书籍)</li>
<li><a href="http://www.oschina.net/translate/what-every-programmer-should-know-about-memory-part1?print" target="_blank" rel="external">每个程序员都应该了解的内存知识(译)</a>【第一部分】</li>
<li><a href="https://github.com/julycoding/The-Art-Of-Programming-by-July" target="_blank" rel="external">程序员编程艺术</a></li>
<li><a href="http://www.kancloud.cn/kancloud/intro-to-prog/52592" target="_blank" rel="external">编程入门指南</a></li>
</ul>
<h3 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h3><ul>
<li><a href="https://github.com/DeathKing/Learning-SICP" target="_blank" rel="external">《计算机程序的结构和解释》公开课 翻译项目</a></li>
</ul>
<h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><ul>
<li><a href="http://exvim.github.io/docs-zh/intro/" target="_blank" rel="external">exvim–vim 改良成IDE项目</a></li>
<li><a href="https://github.com/vimcn/vimcdoc" target="_blank" rel="external">Vim中文文档</a></li>
<li><a href="https://github.com/yangyangwithgnu/use_vim_as_ide" target="_blank" rel="external">所需即所获：像 IDE 一样使用 vim</a></li>
<li><a href="http://learnvimscriptthehardway.onefloweroneworld.com" target="_blank" rel="external">笨方法学Vimscript 中译本</a></li>
</ul>
<h3 id="计算机图形学"><a href="#计算机图形学" class="headerlink" title="计算机图形学"></a>计算机图形学</h3><ul>
<li><a href="https://learnopengl-cn.github.io" target="_blank" rel="external">LearnOpenGL CN</a></li>
<li><a href="https://github.com/zilongshanren/opengl-tutorials" target="_blank" rel="external">OpenGL 教程</a></li>
</ul>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul>
<li><a href="http://blog.csdn.net/lovelion/article/details/17517213" target="_blank" rel="external">史上最全设计模式导学目录</a></li>
<li><a href="https://github.com/me115/design_patterns" target="_blank" rel="external">图说设计模式</a></li>
</ul>
<h3 id="软件开发方法"><a href="#软件开发方法" class="headerlink" title="软件开发方法"></a>软件开发方法</h3><ul>
<li><a href="https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn" target="_blank" rel="external">傻瓜函数编程</a> (《Functional Programming For The Rest of Us》中文版)</li>
<li><a href="http://www.infoq.com/cn/minibooks/scrum-xp-from-the-trenches" target="_blank" rel="external">硝烟中的 Scrum 和 XP</a></li>
</ul>
<h3 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h3><ul>
<li><a href="http://docs.huihoo.com/gnu/linux/gmake.html" target="_blank" rel="external">GNU make 指南</a></li>
<li><a href="https://github.com/waylau/Gradle-2-User-Guide" target="_blank" rel="external">Gradle 2 用户指南</a></li>
<li><a href="http://yuedu.baidu.com/ebook/f23af265998fcc22bcd10da2" target="_blank" rel="external">Gradle 中文使用文档</a></li>
<li><a href="http://local.joelonsoftware.com/wiki/Chinese_(Simplified" target="_blank" rel="external">Joel谈软件</a>)</li>
<li><a href="https://github.com/fool2fish/selenium-doc" target="_blank" rel="external">selenium 中文文档</a></li>
<li><a href="http://www.ituring.com.cn/book/1143" target="_blank" rel="external">开源软件架构</a></li>
<li><a href="http://article.yeeyan.org/view/2251/94882" target="_blank" rel="external">持续集成（第二版）</a> (译言网)</li>
<li><a href="http://local.joelonsoftware.com/wiki/%E9%A6%96%E9%A0%81" target="_blank" rel="external">約耳談軟體(Joel on Software)</a></li>
<li><a href="https://github.com/ecomfe/spec" target="_blank" rel="external">编码规范</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-ap/" target="_blank" rel="external">让开发自动化系列专栏</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-cq/" target="_blank" rel="external">追求代码质量</a></li>
</ul>
<h2 id="语言相关"><a href="#语言相关" class="headerlink" title="语言相关"></a>语言相关</h2><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><ul>
<li><a href="http://www.apkbus.com/design/index.html" target="_blank" rel="external">Android Design(中文版)</a></li>
<li><a href="https://github.com/CharonChui/AndroidNote" target="_blank" rel="external">Android Note(开发过程中积累的知识点)</a></li>
<li><a href="http://leanote.com/blog/post/561658f938f41126b2000298" target="_blank" rel="external">Android6.0新特性详解</a></li>
<li><a href="http://stormzhang.github.io/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="external">Android学习之路</a></li>
<li><a href="https://github.com/bboyfeiyu/android-tech-frontier" target="_blank" rel="external">Android开发技术前线(android-tech-frontier)</a></li>
<li><a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external">Google Android官方培训课程中文版</a></li>
<li>Google Material Design 正體中文版 (<a href="https://wcc723.gitbooks.io/google_design_translate/content/style-icons.html" target="_blank" rel="external">译本一</a> <a href="https://github.com/1sters/material_design_zh" target="_blank" rel="external">译本二</a>)</li>
<li><a href="http://wiki.jikexueyuan.com/project/material-design/" target="_blank" rel="external">Material Design 中文版</a></li>
<li><a href="https://github.com/FX-Max/Point-of-Android" target="_blank" rel="external">Point-of-Android</a> Android 一些重要知识点解析整理</li>
</ul>
<h3 id="AWK"><a href="#AWK" class="headerlink" title="AWK"></a>AWK</h3><ul>
<li><a href="http://awk.readthedocs.org/en/latest/index.html" target="_blank" rel="external">awk中文指南</a></li>
<li><a href="https://github.com/wuzhouhui/awk" target="_blank" rel="external">awk程序设计语言</a></li>
</ul>
<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><ul>
<li><a href="http://c-faq-chn.sourceforge.net/ccfaq/ccfaq.html" target="_blank" rel="external">C 语言常见问题集</a></li>
<li><a href="http://doc.lellansin.com" target="_blank" rel="external">C/C++ 学习教程</a></li>
<li><a href="http://docs.linuxtone.org/ebooks/C&amp;CPP/c/" target="_blank" rel="external">Linux C 编程一站式学习</a></li>
<li><a href="https://github.com/limingth/NCCL" target="_blank" rel="external">新概念 C 语言教程</a></li>
</ul>
<h3 id="C-Sharp"><a href="#C-Sharp" class="headerlink" title="C Sharp"></a>C Sharp</h3><ul>
<li><a href="http://book.douban.com/subject/24827879/" target="_blank" rel="external">精通C#(第6版) </a></li>
</ul>
<h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><ul>
<li><a href="https://github.com/hellogcc/100-gcc-tips/blob/master/src/index.md" target="_blank" rel="external">100个gcc小技巧</a></li>
<li><a href="https://github.com/hellogcc/100-gdb-tips/blob/master/src/index.md" target="_blank" rel="external">100个gdb小技巧</a></li>
<li><a href="https://tinylab.gitbooks.io/cbook/content/" target="_blank" rel="external">C 语言编程透视</a></li>
<li><a href="https://github.com/andycai/cprimer" target="_blank" rel="external">C/C++ Primer</a> - @andycai</li>
<li><a href="http://www.sunistudio.com/cppfaq/" target="_blank" rel="external">C++ FAQ LITE(中文版)</a></li>
<li><a href="https://github.com/Mooophy/Cpp-Primer" target="_blank" rel="external">C++ Primer 5th Answers</a></li>
<li><a href="https://github.com/wuye9036/CppTemplateTutorial" target="_blank" rel="external">C++ Template 进阶指南</a></li>
<li><a href="http://www.prglab.com/cms/" target="_blank" rel="external">C++ 基础教程</a></li>
<li><a href="https://chenxiaowei.gitbooks.io/cpp_concurrency_in_action/content/" target="_blank" rel="external">C++ 并发编程(基于C++11)</a></li>
<li><a href="https://github.com/forhappy/Cplusplus-Concurrency-In-Practice" target="_blank" rel="external">C++ 并发编程指南</a></li>
<li><a href="https://github.com/leeyiw/cgdb-manual-in-chinese" target="_blank" rel="external">CGDB中文手册</a></li>
<li><a href="http://sewm.pku.edu.cn/src/paradise/reference/CMake%20Practice.pdf" target="_blank" rel="external">Cmake 实践</a> (PDF)</li>
<li><a href="http://docs.huihoo.com/gnu/linux/gmake.html" target="_blank" rel="external">GNU make 指南</a></li>
<li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-cpp-styleguide/contents/" target="_blank" rel="external">Google C++ 风格指南</a></li>
<li><a href="http://www.kuqin.com/qtdocument/tutorial.html" target="_blank" rel="external">QT 教程</a></li>
<li><a href="https://github.com/anjuke/zguide-cn" target="_blank" rel="external">ZMQ 指南</a></li>
<li><a href="http://www.ituring.com.cn/book/1203" target="_blank" rel="external">像计算机科学家一样思考（C++版)</a> (《How To Think Like a Computer Scientist: C++ Version》中文版)</li>
<li><a href="http://www.nowamagic.net/librarys/books/contents/c" target="_blank" rel="external">简单易懂的C魔法</a></li>
<li><a href="http://scc.qibebt.cas.cn/docs/linux/base/%B8%FA%CE%D2%D2%BB%C6%F0%D0%B4Makefile-%B3%C2%F0%A9.pdf" target="_blank" rel="external">跟我一起写Makefile(PDF)</a> (PDF)</li>
</ul>
<h3 id="CoffeeScript"><a href="#CoffeeScript" class="headerlink" title="CoffeeScript"></a>CoffeeScript</h3><ul>
<li><a href="http://coffee-script.org" target="_blank" rel="external">CoffeeScript 中文</a></li>
<li><a href="https://github.com/elrrrrrrr/coffeescript-style-guide/blob/master/README-ZH.md" target="_blank" rel="external">CoffeeScript 编程风格指南</a></li>
</ul>
<h3 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h3><ul>
<li><a href="http://dart.lidian.info/wiki/Language_Tour" target="_blank" rel="external">Dart 语言导览</a></li>
</ul>
<h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><ul>
<li><a href="https://github.com/looly/elasticsearch-definitive-guide-cn" target="_blank" rel="external">Elasticsearch 权威指南</a> （《Elasticsearch the definitive guide》中文版）</li>
<li><a href="http://kibana.logstash.es" target="_blank" rel="external">ELKstack 中文指南</a></li>
<li><a href="http://udn.yyuap.com/doc/mastering-elasticsearch/" target="_blank" rel="external">Mastering Elasticsearch(中文版)</a></li>
</ul>
<h3 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h3><ul>
<li><a href="https://github.com/Ljzn/ElixrGettingStartedChinese" target="_blank" rel="external">Elixir Getting Started 中文翻译</a></li>
<li><a href="https://elixirschool.com/cn/" target="_blank" rel="external">Elixir 编程语言教程</a> (Elixir School)</li>
<li><a href="https://github.com/Ljzn/MetaProgrammingInElixirChinese" target="_blank" rel="external">Elixir元编程与DSL 中文翻译</a></li>
<li><a href="https://mydearxym.gitbooks.io/phoenix-doc-in-chinese/content/" target="_blank" rel="external">Phoenix 框架中文文档</a></li>
</ul>
<h3 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h3><ul>
<li><a href="https://github.com/liancheng/cpie-cn" target="_blank" rel="external">Erlang 并发编程</a> (《Concurrent Programming in Erlang (Part I)》中文版)</li>
</ul>
<h3 id="Fortran"><a href="#Fortran" class="headerlink" title="Fortran"></a>Fortran</h3><ul>
<li><a href="http://micro.ustc.edu.cn/Fortran/ZJDing/" target="_blank" rel="external">Fortran77和90/95编程入门</a></li>
</ul>
<h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><ul>
<li><a href="https://github.com/astaxie/build-web-application-with-golang" target="_blank" rel="external">Go Web 编程</a></li>
<li><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN" target="_blank" rel="external">Go 入门指南</a> (《The Way to Go》中文版)</li>
<li><a href="https://github.com/golang-china/golangdoc.translations" target="_blank" rel="external">Go 官方文档翻译</a></li>
<li><a href="https://tour.go-zh.org/list" target="_blank" rel="external">Go 指南</a> (《A Tour of Go》中文版)</li>
<li><a href="https://github.com/songleo/the-little-go-book_ZH_CN" target="_blank" rel="external">Go 简易教程</a> (《 <a href="https://github.com/karlseguin/the-little-go-book" target="_blank" rel="external">The Little Go Book</a> 》中文版)</li>
<li><a href="https://github.com/Unknwon/go-fundamental-programming" target="_blank" rel="external">Go 编程基础</a></li>
<li><a href="https://github.com/polaris1119/The-Golang-Standard-Library-by-Example" target="_blank" rel="external">Go 语言标准库</a></li>
<li><a href="https://github.com/hyper-carrot/go_command_tutorial" target="_blank" rel="external">Go命令教程</a></li>
<li><a href="https://github.com/astaxie/Go-in-Action" target="_blank" rel="external">Go实战开发</a></li>
<li><a href="https://github.com/achun/Go-Blog-In-Action" target="_blank" rel="external">Go语言博客实践</a></li>
<li><a href="http://blog.csdn.net/dc_726/article/details/46565241" target="_blank" rel="external">Java程序员的Golang入门指南</a></li>
<li><a href="https://github.com/astaxie/NPWG_zh" target="_blank" rel="external">Network programming with Go 中文翻译版本</a></li>
<li><a href="http://gorevel.cn/docs/manual/index.html" target="_blank" rel="external">Revel 框架手册</a></li>
<li><a href="http://mikespook.com/learning-go/" target="_blank" rel="external">学习Go语言</a></li>
<li><a href="http://go.ctolib.com/docs/read/magical-go-c-index.html" target="_blank" rel="external">神奇的 Go 语言</a></li>
</ul>
<h3 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h3><ul>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-pg/" target="_blank" rel="external">实战 Groovy 系列</a></li>
</ul>
<h3 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h3><ul>
<li><a href="http://learnyoua.haskell.sg" target="_blank" rel="external">Haskell 趣学指南</a></li>
<li><a href="http://cnhaskell.com" target="_blank" rel="external">Real World Haskell 中文版</a></li>
</ul>
<h3 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML / CSS"></a>HTML / CSS</h3><ul>
<li><a href="https://github.com/waylau/css3-tutorial" target="_blank" rel="external">CSS3 Tutorial 《CSS3 教程》</a></li>
<li><a href="http://css.doyoe.com" target="_blank" rel="external">CSS参考手册</a></li>
<li><a href="http://yanxyz.github.io/emmet-docs/" target="_blank" rel="external">Emmet 文档</a></li>
<li><a href="http://www.w3school.com.cn/html5/" target="_blank" rel="external">HTML5 教程</a></li>
<li><a href="http://codeguide.bootcss.com" target="_blank" rel="external">HTML和CSS编码规范</a></li>
<li><a href="http://sass-guidelin.es/zh/" target="_blank" rel="external">Sass Guidelines 中文</a></li>
<li><a href="http://alloyteam.github.io/CodeGuide/" target="_blank" rel="external">前端代码规范</a> (腾讯 AlloyTeam 团队)</li>
<li><a href="http://zh.learnlayout.com" target="_blank" rel="external">学习CSS布局</a></li>
<li><a href="https://github.com/chadluo/CSS-Guidelines/blob/master/README.md" target="_blank" rel="external">通用 CSS 笔记、建议与指导</a></li>
</ul>
<h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><ul>
<li><a href="http://nilsun.github.io/apple-watch/" target="_blank" rel="external">Apple Watch开发初探</a></li>
<li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-objc-styleguide/" target="_blank" rel="external">Google Objective-C Style Guide 中文版</a></li>
<li><a href="http://isux.tencent.com/ios-human-interface-guidelines-ui-design-basics-ios7.html" target="_blank" rel="external">iOS7人机界面指南</a></li>
<li><a href="https://github.com/qinjx/30min_guides/blob/master/ios.md" target="_blank" rel="external">iOS开发60分钟入门</a></li>
<li><a href="http://wileam.com/iphone-6-screen-cn/" target="_blank" rel="external">iPhone 6 屏幕揭秘</a></li>
<li><a href="https://github.com/jkyin/Subtitle" target="_blank" rel="external">网易斯坦福大学公开课：iOS 7应用开发字幕文件</a></li>
</ul>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul>
<li><a href="https://github.com/waylau/activiti-5.x-user-guide" target="_blank" rel="external">Activiti 5.x 用户指南</a></li>
<li><a href="https://github.com/waylau/apache-mina-2.x-user-guide" target="_blank" rel="external">Apache MINA 2 用户指南</a></li>
<li><a href="https://github.com/waylau/apache-shiro-1.2.x-reference" target="_blank" rel="external">Apache Shiro 用户指南</a></li>
<li><a href="http://www.hawstein.com/posts/google-java-style.html" target="_blank" rel="external">Google Java编程风格指南</a></li>
<li><a href="https://github.com/waylau/h2-database-doc" target="_blank" rel="external">H2 Database 教程</a></li>
<li><a href="https://github.com/waylau/servlet-3.1-specification" target="_blank" rel="external">Java Servlet 3.1 规范</a></li>
<li><a href="https://github.com/waylau/java-code-conventions" target="_blank" rel="external">Java 编码规范</a></li>
<li><a href="https://github.com/waylau/Jersey-2.x-User-Guide" target="_blank" rel="external">Jersey 2.x 用户指南</a></li>
<li><a href="https://github.com/waylau/jsse-reference-guide" target="_blank" rel="external">JSSE 参考指南</a></li>
<li><a href="http://mybatis.github.io/mybatis-3/zh/index.html" target="_blank" rel="external">MyBatis中文文档</a></li>
<li><a href="https://github.com/waylau/netty-4-user-guide" target="_blank" rel="external">Netty 4.x 用户指南</a></li>
<li><a href="https://github.com/waylau/essential-netty-in-action" target="_blank" rel="external">Netty 实战(精髓)</a></li>
<li><a href="https://github.com/waylau/rest-in-action" target="_blank" rel="external">REST 实战</a></li>
<li><a href="https://github.com/qibaoguang/Spring-Boot-Reference-Guide" target="_blank" rel="external">Spring Boot参考指南</a> (翻译中)</li>
<li><a href="https://github.com/waylau/spring-framework-4-reference" target="_blank" rel="external">Spring Framework 4.x参考文档</a></li>
<li><a href="https://github.com/waylau/RestDemo" target="_blank" rel="external">用jersey构建REST服务</a></li>
</ul>
<h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><ul>
<li><a href="https://github.com/adamlu/javascript-style-guide" target="_blank" rel="external">Airbnb JavaScript 规范</a></li>
<li>AngularJS<ul>
<li><a href="https://github.com/peiransun/angularjs-cn" target="_blank" rel="external">AngularJS中译本</a></li>
<li><a href="https://github.com/zensh/AngularjsTutorial_cn" target="_blank" rel="external">AngularJS入门教程</a></li>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-zh-cn.md" target="_blank" rel="external">AngularJS最佳实践和风格指南</a></li>
<li><a href="http://www.waylau.com/build-angularjs-app-with-yeoman-in-windows/" target="_blank" rel="external">在Windows环境下用Yeoman构建AngularJS项目</a></li>
<li><a href="https://github.com/xufei/Make-Your-Own-AngularJS/blob/master/01.md" target="_blank" rel="external">构建自己的AngularJS</a></li>
</ul>
</li>
<li>backbone.js<ul>
<li><a href="http://www.css88.com/doc/backbone/" target="_blank" rel="external">backbone.js中文文档</a></li>
<li><a href="http://www.the5fire.com/backbone-js-tutorials-pdf-download.html" target="_blank" rel="external">backbone.js入门教程</a> (PDF)</li>
<li><a href="https://github.com/the5fire/backbonejs-learning-note" target="_blank" rel="external">Backbone.js入门教程第二版</a></li>
</ul>
</li>
<li><a href="http://www.ituring.com.cn/minibook/950" target="_blank" rel="external">Chrome扩展及应用开发</a></li>
<li>CoffeeScript<ul>
<li><a href="https://github.com/geekplux/coffeescript-style-guide" target="_blank" rel="external">CoffeeScript 编码风格指南</a></li>
</ul>
</li>
<li>D3.js<ul>
<li><a href="http://www.ourd3js.com/wordpress/?cat=2" target="_blank" rel="external">D3.js 入门系列</a> (还有进阶、高级等系列)</li>
<li><a href="https://github.com/mbostock/d3/wiki/API--%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C" target="_blank" rel="external">官方API文档</a></li>
<li><a href="http://blog.csdn.net/zhang__tianxu/article/category/1623437" target="_blank" rel="external">张天旭的D3教程</a></li>
<li><a href="http://www.cnblogs.com/winleisure/tag/D3.js/" target="_blank" rel="external">楚狂人的D3教程</a></li>
</ul>
</li>
<li><a href="http://es6.ruanyifeng.com" target="_blank" rel="external">ECMAScript 6 入门</a> (作者：阮一峰)</li>
<li>ExtJS<ul>
<li><a href="http://extjs-doc-cn.github.io/ext4api/" target="_blank" rel="external">Ext4.1.0 中文文档</a></li>
</ul>
</li>
<li><a href="http://bq69.com/blog/articles/script/868/google-javascript-style-guide.html" target="_blank" rel="external">Google JavaScript 代码风格指南</a></li>
<li><a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="external">Google JSON 风格指南</a></li>
<li>impress.js<ul>
<li><a href="https://github.com/kokdemo/impress.js-tutorial-in-Chinese" target="_blank" rel="external">impress.js的中文教程</a></li>
</ul>
</li>
<li><a href="http://liubin.github.io/promises-book/" target="_blank" rel="external">JavaScript Promise迷你书</a></li>
<li><a href="http://typeof.net/s/jsmech/" target="_blank" rel="external">Javascript 原理</a></li>
<li><a href="http://javascript.ruanyifeng.com" target="_blank" rel="external">JavaScript 标准参考教程（alpha）</a></li>
<li><a href="https://github.com/jayli/javascript-patterns" target="_blank" rel="external">《JavaScript 模式》</a> “JavaScript patterns”中译本</li>
<li><a href="https://github.com/justjavac/12-javascript-quirks" target="_blank" rel="external">javascript 的 12 个怪癖</a></li>
<li><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="external">JavaScript 秘密花园</a></li>
<li><a href="http://icodeit.org/jsccp/" target="_blank" rel="external">JavaScript核心概念及实践</a> (PDF) (此书已由人民邮电出版社出版发行，但作者依然免费提供PDF版本，希望开发者们去购买，支持作者)</li>
<li><a href="http://pij.robinqu.me" target="_blank" rel="external">Javascript编程指南</a> (<a href="https://github.com/RobinQu/Programing-In-Javascript" target="_blank" rel="external">源码</a>)</li>
<li>jQuery<ul>
<li><a href="http://i5ting.github.io/How-to-write-jQuery-plugin/build/jquery.plugin.html" target="_blank" rel="external">How to write jQuery plugin</a></li>
<li><a href="http://www.nowamagic.net/librarys/books/contents/jquery" target="_blank" rel="external">简单易懂的JQuery魔法</a></li>
</ul>
</li>
<li>Meteor<ul>
<li><a href="http://zh.discovermeteor.com" target="_blank" rel="external">Discover Meteor</a></li>
</ul>
</li>
<li>Node.js<ul>
<li><a href="http://expressjs.jser.us" target="_blank" rel="external">express.js 中文文档</a></li>
<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html" target="_blank" rel="external">Express框架</a></li>
<li><a href="https://github.com/guo-yu/koa-guide" target="_blank" rel="external">koa 中文文档</a></li>
<li><a href="https://www.npmjs.com/package/learnyounode-zh-cn" target="_blank" rel="external">Learn You The Node.js For Much Win! (中文版)</a></li>
<li><a href="http://i5ting.github.io/node-debug-tutorial/" target="_blank" rel="external">Node debug 三法三例</a></li>
<li><a href="https://github.com/jollen/nodejs-fullstack-lessons" target="_blank" rel="external">Node.js Fullstack《從零到一的進撃》</a></li>
<li><a href="https://github.com/alsotang/node-lessons" target="_blank" rel="external">Node.js 包教不包会</a></li>
<li><a href="https://github.com/nodejs-tw/nodejs-wiki-book" target="_blank" rel="external">Nodejs Wiki Book</a> (繁体中文)</li>
<li><a href="https://www.gitbook.com/book/0532/nodejs/details" target="_blank" rel="external">nodejs中文文档</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="external">Node入门</a></li>
<li><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="external">七天学会NodeJS</a></li>
<li><a href="https://github.com/nswbmw/N-blog" target="_blank" rel="external">使用 Express + MongoDB 搭建多人博客</a></li>
<li><a href="http://nodejs.ctolib.com/docs/sfile/jstraining/engineering.html" target="_blank" rel="external">JavaScript全栈工程师培训材料</a></li>
</ul>
</li>
<li>React.js<ul>
<li><a href="https://github.com/theJian/build-a-hn-front-page" target="_blank" rel="external">Learn React &amp; Webpack by building the Hacker News front page</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/react-native/" target="_blank" rel="external">React Native 中文文档(含最新Android内容)</a></li>
<li><a href="https://github.com/fakefish/react-webpack-cookbook" target="_blank" rel="external">React webpack-cookbook</a></li>
<li><a href="http://fraserxu.me/intro-to-react/" target="_blank" rel="external">React 入门教程</a></li>
<li><a href="http://reactjs.cn" target="_blank" rel="external">React.js 中文文档</a></li>
</ul>
</li>
<li>underscore.js<ul>
<li><a href="http://learningcn.com/underscore/" target="_blank" rel="external">Underscore.js中文文档</a></li>
</ul>
</li>
<li>Vue.js<ul>
<li><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="external">Vue.js中文文档</a></li>
</ul>
</li>
<li><a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="external">You-Dont-Know-JS</a> (深入JavaScript语言核心机制的系列图书)</li>
<li>Zepto.js<ul>
<li><a href="http://css88.com/doc/zeptojs_api" target="_blank" rel="external">Zepto.js 中文文档</a></li>
</ul>
</li>
<li><a href="http://justjavac.com/named-function-expressions-demystified.html" target="_blank" rel="external">命名函数表达式探秘</a>  (注:原文由<a href="http://www.cn-cuckoo.com" target="_blank" rel="external">为之漫笔</a> 翻译，原始地址无法打开，所以此处地址为我博客上的备份)</li>
<li><a href="http://www.oschina.net/translate/learning-javascript-design-patterns" target="_blank" rel="external">学用 JavaScript 设计模式</a> (开源中国)</li>
<li><a href="http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" target="_blank" rel="external">深入理解JavaScript系列</a></li>
</ul>
<h3 id="LaTeX"><a href="#LaTeX" class="headerlink" title="LaTeX"></a>LaTeX</h3><ul>
<li><a href="http://www.dralpha.com/zh/tech/tech.htm" target="_blank" rel="external">LaTeX 笔记</a></li>
<li><a href="http://ctan.org/pkg/lshort-zh-cn" target="_blank" rel="external">一份不太简短的 LaTeX2ε 介绍</a></li>
<li><a href="https://github.com/49951331/graduate-project-102pj/blob/master/docs/latex123.pdf" target="_blank" rel="external">大家來學 LaTeX</a> (PDF)</li>
</ul>
<h3 id="LISP"><a href="#LISP" class="headerlink" title="LISP"></a>LISP</h3><ul>
<li><a href="http://acl.readthedocs.org/en/latest/" target="_blank" rel="external">ANSI Common Lisp 中文翻译版</a></li>
<li><a href="http://www.ituring.com.cn/minibook/862" target="_blank" rel="external">Common Lisp 高级编程技术</a> (《On Lisp》中文版)</li>
</ul>
<h3 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h3><ul>
<li><a href="http://www.w3cschool.cc/manual/lua53doc/contents.html" target="_blank" rel="external">Lua 5.3 参考手册</a></li>
</ul>
<h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><ul>
<li><a href="http://wowubuntu.com/markdown/basic.html" target="_blank" rel="external">Markdown 快速入门</a></li>
<li><a href="http://www.jianshu.com/p/7bd23251da0a" target="_blank" rel="external">Markdown 简明教程</a></li>
<li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">Markdown 语法说明</a></li>
<li><a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="external">献给写作者的 Markdown 新手指南</a></li>
</ul>
<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><ul>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="external">Node 入门</a></li>
<li><a href="https://www.gitbook.com/book/0532/nodejs/details" target="_blank" rel="external">The NodeJS 中文文档</a> （社区翻译）</li>
<li><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="external">七天学会NodeJS</a> 阿里出品，很好的入门资料</li>
</ul>
<h3 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h3><ul>
<li><a href="https://github.com/fayland/chinese-perl-book" target="_blank" rel="external">Master Perl Today</a></li>
<li><a href="https://github.com/horus/modern_perl_book" target="_blank" rel="external">《Modern Perl》中文版</a></li>
<li><a href="http://net.pku.edu.cn/~yhf/tutorial/perl/perl.html" target="_blank" rel="external">Perl 5 教程</a></li>
<li><a href="http://www.yiibai.com/perl" target="_blank" rel="external">Perl 教程</a></li>
</ul>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><ul>
<li><a href="http://docs.phpcomposer.com" target="_blank" rel="external">Composer中文文档</a></li>
<li><a href="http://d.laravel-china.org/docs/5.4" target="_blank" rel="external">Laravel5.4中文文档</a></li>
<li><a href="http://www.myleftstudio.com" target="_blank" rel="external">Phalcon7中文文档</a></li>
<li><a href="http://wulijun.github.io/php-the-right-way/" target="_blank" rel="external">PHP 之道</a></li>
<li><a href="http://php.net/manual/zh/" target="_blank" rel="external">PHP中文手册</a></li>
<li><a href="http://www.walu.cc/phpbook/preface.md" target="_blank" rel="external">PHP扩展开发及内核应用</a></li>
<li><a href="https://psr.phphub.org" target="_blank" rel="external">PHP标准规范中文版</a></li>
<li><a href="https://wusuopu.gitbooks.io/symfony2_tutorial/content" target="_blank" rel="external">Symfony2 实例教程</a></li>
<li><a href="http://www.yiichina.com/doc/guide/2.0" target="_blank" rel="external">Yii2中文文档</a></li>
<li><a href="http://www.php-internals.com/book/" target="_blank" rel="external">深入理解 PHP 内核</a></li>
</ul>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><ul>
<li><a href="http://djangobook.py3k.cn/2.0/" target="_blank" rel="external">Django book 2.0</a></li>
<li><a href="http://docspy3zh.readthedocs.org/en/latest/" target="_blank" rel="external">Python 3 文档(简体中文) 3.2.2 documentation</a></li>
<li><a href="http://www.pythondoc.com" target="_blank" rel="external">Python 中文学习大本营</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">Python教程 - 廖雪峰的官方网站</a></li>
<li><a href="https://github.com/jiechic/diveintopython3" target="_blank" rel="external">深入 Python 3</a></li>
<li><a href="http://old.sebug.net/paper/books/LearnPythonTheHardWay/" target="_blank" rel="external">笨办法学 Python</a></li>
</ul>
<h3 id="R"><a href="#R" class="headerlink" title="R"></a>R</h3><ul>
<li><a href="http://cran.r-project.org/doc/contrib/Liu-FAQ.pdf" target="_blank" rel="external">153分钟学会 R</a> (PDF)</li>
<li><a href="http://cran.r-project.org/doc/contrib/Ding-R-intro_cn.pdf" target="_blank" rel="external">R 导论</a> (《An Introduction to R》中文版) (PDF)</li>
<li><a href="http://yanping.me/shiny-tutorial/" target="_blank" rel="external">用 R 构建 Shiny 应用程序</a> (《Building ‘Shiny’ Applications with R》中文版)</li>
<li><a href="http://cran.r-project.org/doc/contrib/Xu-Statistics_and_R.pdf" target="_blank" rel="external">统计学与 R 读书笔记</a> (PDF)</li>
</ul>
<h3 id="reStructuredText"><a href="#reStructuredText" class="headerlink" title="reStructuredText"></a>reStructuredText</h3><ul>
<li><a href="http://www.pythondoc.com/sphinx/rest.html" target="_blank" rel="external">reStructuredText 入门</a></li>
<li><a href="http://jwch.sdut.edu.cn/book/rst.html" target="_blank" rel="external">reStructuredText 简明教程</a></li>
</ul>
<h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><ul>
<li><a href="https://github.com/JuanitoFatas/rails-style-guide/blob/master/README-zhCN.md" target="_blank" rel="external">Rails 风格指南</a></li>
<li><a href="http://railstutorial-china.org" target="_blank" rel="external">Ruby on Rails Tutorial 原书第 2 版</a></li>
<li><a href="https://ihower.tw/rails4/" target="_blank" rel="external">Ruby on Rails 实战圣经</a></li>
<li><a href="http://guides.ruby-china.org" target="_blank" rel="external">Ruby on Rails 指南</a></li>
<li><a href="https://github.com/JuanitoFatas/ruby-style-guide/blob/master/README-zhCN.md" target="_blank" rel="external">Ruby 风格指南</a></li>
<li><a href="http://www.sinatrarb.com/intro-zh.html" target="_blank" rel="external">Sinatra</a></li>
<li><a href="http://lrthw.github.io" target="_blank" rel="external">笨方法学 Ruby</a></li>
</ul>
<h3 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h3><ul>
<li><a href="https://github.com/KaiserY/rust-book-chinese" target="_blank" rel="external">Rust 官方教程</a></li>
<li><a href="https://github.com/photino/rust-notes" target="_blank" rel="external">Rust 语言学习笔记</a></li>
<li><a href="https://github.com/rustcc/RustPrimer" target="_blank" rel="external">RustPrimer</a></li>
<li><a href="https://github.com/rustcc/rust-by-example/" target="_blank" rel="external">通过例子学习 Rust</a></li>
</ul>
<h3 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h3><ul>
<li><a href="http://twitter.github.io/effectivescala/index-cn.html" target="_blank" rel="external">Effective Scala</a></li>
<li><a href="https://www.gitbook.com/book/windor/beginners-guide-to-scala/details" target="_blank" rel="external">Scala 初学者指南</a> (The Neophyte’s Guide to Scala)</li>
<li><a href="http://twitter.github.io/scala_school/zh_cn/index.html" target="_blank" rel="external">Scala 课堂</a> (Twitter的Scala中文教程)</li>
</ul>
<h3 id="Scheme"><a href="#Scheme" class="headerlink" title="Scheme"></a>Scheme</h3><ul>
<li><a href="http://deathking.github.io/yast-cn/" target="_blank" rel="external">Scheme 入门教程</a> (《Yet Another Scheme Tutorial》中文版)</li>
</ul>
<h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><ul>
<li><a href="http://me.52fhy.com/shell-book/" target="_blank" rel="external">shell-book</a></li>
<li><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80" target="_blank" rel="external">Shell 编程基础</a></li>
<li><a href="https://github.com/qinjx/30min_guides/blob/master/shell.md" target="_blank" rel="external">Shell 脚本编程30分钟入门</a></li>
<li><a href="http://billie66.github.io/TLCL/book/zh" target="_blank" rel="external">The Linux Command Line 中文版</a></li>
</ul>
<h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><ul>
<li><a href="https://www.gitbook.com/book/numbbbbb/-the-swift-programming-language-/details" target="_blank" rel="external">《The Swift Programming Language》中文版</a></li>
</ul>
<h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><ul>
<li><a href="http://man.chinaunix.net/newsoft/vi/doc/help.html" target="_blank" rel="external">Vim Manual(中文版)</a></li>
<li><a href="http://www.study-area.org/tips/vim/index.html" target="_blank" rel="external">大家來學 VIM</a></li>
</ul>
<h3 id="Visual-Prolog"><a href="#Visual-Prolog" class="headerlink" title="Visual Prolog"></a>Visual Prolog</h3><ul>
<li><a href="http://wiki.visual-prolog.com/index.php?title=A_Beginners_Guide_to_Visual_Prolog_in_Chinese" target="_blank" rel="external">Visual Prolog 7初学指南</a></li>
<li><a href="http://wiki.visual-prolog.com/index.php?title=Visual_Prolog_for_Tyros_in_Chinese" target="_blank" rel="external">Visual Prolog 7边练边学</a></li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#语言无关&quot;&gt;语言无关&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ide&quot;&gt;IDE&lt;/a&gt;&lt;/li&gt;
&lt;li
    
    </summary>
    
      <category term="资料库" scheme="http://www.xiangzhihong.com/categories/%E8%B5%84%E6%96%99%E5%BA%93/"/>
    
    
      <category term="全栈" scheme="http://www.xiangzhihong.com/tags/%E5%85%A8%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>MobX 在 React Native开发中的应用</title>
    <link href="http://www.xiangzhihong.com/2017/04/29/MobX%20%E5%9C%A8%20React%20Native%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://www.xiangzhihong.com/2017/04/29/MobX 在 React Native开发中的应用/</id>
    <published>2017-04-28T16:00:00.000Z</published>
    <updated>2017-09-30T02:06:05.298Z</updated>
    
    <content type="html"><![CDATA[<p>MobX 是一款精准的状态管理工具库，如果你在 React 和 React Native 应用中使用过 Flux、Alt、Redux 和 Reflux，那毫不犹豫地说，MobX 的简单性将成为你状态管理的不二之选。</p>
<p>加入我们要实现这样一个功能：创建一个新的列表，向列表中加入新的条目并刷新，这就用到了MobX的状态管理。<br><img src="http://codecloud.b0.upaiyun.com/wp-content/uploads/t01cb1cc3eae129f1a4.gif" alt="这里写图片描述"></p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>首先，我们为MobX配置相关的环境支持。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1.npm i mobx mobx-react --save //引入mobx</div><div class="line">2.npm i babel-plugin-transform-decorators-legacy babel-preset-react-native-stage-0 --save-dev //能够使用@标签</div><div class="line">3.在项目目录下找到.babelrc文件，并修改为&#123;</div><div class="line">&quot;presets&quot;: [&quot;react-native&quot;],</div><div class="line">&quot;plugins&quot;: [&quot;transform-decorators-legacy&quot;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们项目配置好了，可以写代码了。不过在开发之前需要对</p>
<h2 id="mobx标签"><a href="#mobx标签" class="headerlink" title="mobx标签"></a>mobx标签</h2><p>mobx常用的标签做一个解释。</p>
<ul>
<li>@observable: 使用此标签监控要检测的数据；</li>
<li>@observer: 使用此标签监控当数据变化是要更新的Component（组件类）</li>
<li>@action:使用此标签监控数据改变的自定义方法(当在需要数据改变的时候执行此自定义方法，那么View层也会跟着自动变化，默认此View层已经使用@observer标签监控)</li>
</ul>
<h2 id="mobx实例1"><a href="#mobx实例1" class="headerlink" title="mobx实例1"></a>mobx实例1</h2><p>下面实现一个使用mobx实现一个简单的数据复制更新功能。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div></pre></td><td class="code"><pre><div class="line">import React, &#123;Component&#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">    View,</div><div class="line">    StyleSheet,</div><div class="line">    ScrollView,</div><div class="line">    Text,</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line"></div><div class="line">/*</div><div class="line"> * 引入头文件</div><div class="line"> * */</div><div class="line">import &#123;observable, action&#125; from &apos;mobx&apos;;</div><div class="line">import &#123;observer&#125; from &apos;mobx-react/native&apos;;</div><div class="line"></div><div class="line">/*</div><div class="line">* 添加数据</div><div class="line">* */</div><div class="line">const datas = [</div><div class="line">    &#123;name:&apos;苹果&apos;,count:0&#125;,</div><div class="line">    &#123;name:&apos;梨&apos;,count:0&#125;,</div><div class="line">    &#123;name:&apos;香蕉&apos;,count:0&#125;,</div><div class="line">    &#123;name:&apos;草莓&apos;,count:0&#125;,</div><div class="line">    &#123;name:&apos;橘子&apos;,count:0&#125;,</div><div class="line">];</div><div class="line"></div><div class="line">/*</div><div class="line">* 对整个列表添加观察，观察列表个数的变化</div><div class="line">* */</div><div class="line">@observer</div><div class="line">export default class MobxTestSecond extends Component &#123;</div><div class="line"></div><div class="line">    /*</div><div class="line">    * 数据管理器</div><div class="line">    * */</div><div class="line">    dataManager = new DataSource();</div><div class="line"></div><div class="line">    componentWillMount() &#123;</div><div class="line">        /*</div><div class="line">        * 赋值初始数据</div><div class="line">        * */</div><div class="line">        this.dataManager.replace(datas);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /*</div><div class="line">    * 添加一个新的Item</div><div class="line">    * */</div><div class="line">    addItem = () =&gt; &#123;</div><div class="line">       let item = &#123;name:&apos;西瓜&apos;,count:0&#125;;</div><div class="line">        this.dataManager.addItem(item)</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    /*</div><div class="line">    * 删除第一个Item</div><div class="line">    * */</div><div class="line">    deleteItem = () =&gt; &#123;</div><div class="line">        this.dataManager.deleteItem(0);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">        &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">            &lt;View style=&#123;styles.addItemView&#125;&gt;</div><div class="line">                &lt;Text style=&#123;styles.addItem&#125; onPress=&#123;this.addItem&#125;&gt;增加&lt;/Text&gt;</div><div class="line">                &lt;Text style=&#123;styles.addItem&#125; onPress=&#123;this.deleteItem&#125;&gt;删除&lt;/Text&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">            &lt;ScrollView&gt;</div><div class="line">                &#123;</div><div class="line">                    this.dataManager.dataSource.slice(0).map((item,i)=&gt; &lt;ItemView key = &#123;i&#125; item = &#123;item&#125;/&gt;)</div><div class="line">                &#125;</div><div class="line">            &lt;/ScrollView&gt;</div><div class="line">        &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">/*</div><div class="line">* 对每一个Item添加观察,改变个数</div><div class="line">* */</div><div class="line">@observer</div><div class="line">class ItemView extends Component &#123;</div><div class="line"></div><div class="line">    countAdd = () =&gt; &#123;</div><div class="line">        this.props.item.add();</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    countDec = () =&gt; &#123;</div><div class="line">        this.props.item.dec();</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        const &#123;item&#125; = this.props;</div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;styles.itemContainer&#125;&gt;</div><div class="line">                &lt;Text&gt;&#123;item.name&#125;&lt;/Text&gt;</div><div class="line">                &lt;Text&gt;&#123;item.count&#125;&lt;/Text&gt;</div><div class="line">                &lt;Text style=&#123;styles.btn&#125; onPress=&#123;this.countAdd&#125;&gt; + &lt;/Text&gt;</div><div class="line">                &lt;Text style=&#123;styles.btn&#125; onPress=&#123;this.countDec&#125;&gt; - &lt;/Text&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">/*</div><div class="line"> * 整个列表页数据管理器</div><div class="line"> * */</div><div class="line">class DataSource &#123;</div><div class="line">    // 本地数据源</div><div class="line">    @observable</div><div class="line">    dataSource = [];</div><div class="line"></div><div class="line">    // 添加初始数据</div><div class="line">    @action</div><div class="line">    replace = (items) =&gt; &#123;</div><div class="line">        // 1. 清空原数据</div><div class="line">        this.dataSource.splice(0, this.dataSource.length);</div><div class="line"></div><div class="line">        // 2. 加载新数据</div><div class="line">        items.map((item, i) =&gt; &#123;</div><div class="line">            this.dataSource.push(new Item(item));</div><div class="line">        &#125;);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    // 添加新数据</div><div class="line">    @action</div><div class="line">    addItem = (item) =&gt; &#123;</div><div class="line">        this.dataSource.unshift(new Item(item));</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"></div><div class="line">    // 删除一条数据</div><div class="line">    @action</div><div class="line">    deleteItem = (idx) =&gt; &#123;</div><div class="line">        this.dataSource.splice(idx, 1);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line">/*</div><div class="line"> * 单条Item数据管理器</div><div class="line"> * */</div><div class="line">class Item &#123;</div><div class="line"></div><div class="line">    /*</div><div class="line">    * 商品名称（此值是不变的所以不需要检测此值）</div><div class="line">    * */</div><div class="line">    name;</div><div class="line"></div><div class="line">    /*</div><div class="line">    * 监控商品个数</div><div class="line">    * */</div><div class="line">    @observable</div><div class="line">    count;</div><div class="line"></div><div class="line"></div><div class="line">    constructor(item) &#123;</div><div class="line">        this.name = item.name;</div><div class="line">        this.count = item.count;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    /*</div><div class="line">    * 商品个数+1</div><div class="line">    * */</div><div class="line">    @action</div><div class="line">    add = () =&gt; &#123;</div><div class="line">        this.count += 1;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    /*</div><div class="line">    * 商品个数-1</div><div class="line">    * */</div><div class="line">    @action</div><div class="line">    dec= () =&gt; &#123;</div><div class="line">        this.count &gt; 0 &amp;&amp; (this.count -= 1);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>新建一个 listStore.js文件。</p>
<ol>
<li>从 mobx 导入 observable – observable<br>可以给存在的数据结构如对象、数组和类增加可观察的能力。简单地给类属性增加一个 @observable 装饰器（下一代<br>ECMAScript），或者调用 observable 或 extendObservable 函数（ES5）；</li>
<li>创建一个叫做 ObservableListStore 的类；</li>
<li>创建一个可观察的数组 list；</li>
<li>创建三个操作列表数组的方法；</li>
<li>创建一个 ObservableListStore 的实例 observableListStore；</li>
<li>导出 observableListStore</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">import &#123;observable&#125; from &apos;mobx&apos;</div><div class="line"></div><div class="line">let index = 0</div><div class="line"></div><div class="line">class ObservableListStore &#123;</div><div class="line">  @observable list = []</div><div class="line"></div><div class="line">  addListItem (item) &#123;</div><div class="line">    this.list.push(&#123;</div><div class="line">      name: item, </div><div class="line">      items: [],</div><div class="line">      index</div><div class="line">    &#125;)</div><div class="line">    index++</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  removeListItem (item) &#123;</div><div class="line">    this.list = this.list.filter((l) =&gt; &#123;</div><div class="line">      return l.index !== item.index</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  addItem(item, name) &#123;</div><div class="line">    this.list.forEach((l) =&gt; &#123;</div><div class="line">      if (l.index === item.index) &#123;</div><div class="line">        l.items.push(name)</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const observableListStore = new ObservableListStore()</div><div class="line">export default observableListStore</div></pre></td></tr></table></figure>
<p>现在已经用了存储器，我们修改项目的入口文件，使用存储，创建导航。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos;</div><div class="line">import App from &apos;./app/App&apos;</div><div class="line">import ListStore from &apos;./app/mobx/listStore&apos;</div><div class="line"></div><div class="line">import &#123;</div><div class="line">  AppRegistry,</div><div class="line">  Navigator</div><div class="line">&#125; from &apos;react-native&apos;</div><div class="line"></div><div class="line">class ReactNativeMobX extends Component &#123;</div><div class="line">  renderScene (route, navigator) &#123;</div><div class="line">    return &lt;route.component &#123;...route.passProps&#125; navigator=&#123;navigator&#125; /&gt;</div><div class="line">  &#125;</div><div class="line">  configureScene (route, routeStack) &#123;</div><div class="line">    if (route.type === &apos;Modal&apos;) &#123;</div><div class="line">      return Navigator.SceneConfigs.FloatFromBottom</div><div class="line">    &#125;</div><div class="line">    return Navigator.SceneConfigs.PushFromRight</div><div class="line">  &#125;</div><div class="line">  render () &#123;</div><div class="line">    return (</div><div class="line">      &lt;Navigator</div><div class="line">        configureScene=&#123;this.configureScene.bind(this)&#125;</div><div class="line">        renderScene=&#123;this.renderScene.bind(this)&#125;</div><div class="line">        initialRoute=&#123;&#123;</div><div class="line">          component: App,</div><div class="line">          passProps: &#123;</div><div class="line">            store: ListStore</div><div class="line">          &#125;</div><div class="line">        &#125;&#125; /&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent(&apos;ReactNativeMobX&apos;, () =&gt; ReactNativeMobX)</div></pre></td></tr></table></figure>
<p>现在，我们来创建应用组件。实现对数据的操作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos;</div><div class="line">import &#123; View, Text, TextInput, TouchableHighlight, StyleSheet &#125; from &apos;react-native&apos;</div><div class="line">import &#123;observer&#125; from &apos;mobx-react/native&apos;</div><div class="line">import NewItem from &apos;./NewItem&apos;</div><div class="line"></div><div class="line">@observer</div><div class="line">class TodoList extends Component &#123;</div><div class="line">  constructor () &#123;</div><div class="line">    super()</div><div class="line">    this.state = &#123;</div><div class="line">      text: &apos;&apos;,</div><div class="line">      showInput: false</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  toggleInput () &#123;</div><div class="line">    this.setState(&#123; showInput: !this.state.showInput &#125;)</div><div class="line">  &#125;</div><div class="line">  addListItem () &#123;</div><div class="line">    this.props.store.addListItem(this.state.text)</div><div class="line">    this.setState(&#123;</div><div class="line">      text: &apos;&apos;,</div><div class="line">      showInput: !this.state.showInput</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  removeListItem (item) &#123;</div><div class="line">    this.props.store.removeListItem(item)</div><div class="line">  &#125;</div><div class="line">  updateText (text) &#123;</div><div class="line">    this.setState(&#123;text&#125;)</div><div class="line">  &#125;</div><div class="line">  addItemToList (item) &#123;</div><div class="line">    this.props.navigator.push(&#123;</div><div class="line">      component: NewItem,</div><div class="line">      type: &apos;Modal&apos;,</div><div class="line">      passProps: &#123;</div><div class="line">        item,</div><div class="line">        store: this.props.store</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    const &#123; showInput &#125; = this.state</div><div class="line">    const &#123; list &#125; = this.props.store</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;&#123;flex:1&#125;&#125;&gt;</div><div class="line">        &lt;View style=&#123;styles.heading&#125;&gt;</div><div class="line">          &lt;Text style=&#123;styles.headingText&#125;&gt;My List App&lt;/Text&gt;</div><div class="line">        &lt;/View&gt;</div><div class="line">        &#123;!list.length ? &lt;NoList /&gt; : null&#125;</div><div class="line">        &lt;View style=&#123;&#123;flex:1&#125;&#125;&gt;</div><div class="line">          &#123;list.map((l, i) =&gt; &#123;</div><div class="line">            return &lt;View key=&#123;i&#125; style=&#123;styles.itemContainer&#125;&gt;</div><div class="line">              &lt;Text</div><div class="line">                style=&#123;styles.item&#125;</div><div class="line">                onPress=&#123;this.addItemToList.bind(this, l)&#125;&gt;&#123;l.name.toUpperCase()&#125;&lt;/Text&gt;</div><div class="line">              &lt;Text</div><div class="line">                style=&#123;styles.deleteItem&#125;</div><div class="line">                onPress=&#123;this.removeListItem.bind(this, l)&#125;&gt;Remove&lt;/Text&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">          &#125;)&#125;</div><div class="line">        &lt;/View&gt;</div><div class="line">        &lt;TouchableHighlight</div><div class="line">          underlayColor=&apos;transparent&apos;</div><div class="line">          onPress=&#123;</div><div class="line">            this.state.text === &apos;&apos; ? this.toggleInput.bind(this)</div><div class="line">            : this.addListItem.bind(this, this.state.text)</div><div class="line">          &#125;</div><div class="line">          style=&#123;styles.button&#125;&gt;</div><div class="line">          &lt;Text style=&#123;styles.buttonText&#125;&gt;</div><div class="line">            &#123;this.state.text === &apos;&apos; &amp;&amp; &apos;+ New List&apos;&#125;</div><div class="line">            &#123;this.state.text !== &apos;&apos; &amp;&amp; &apos;+ Add New List Item&apos;&#125;</div><div class="line">          &lt;/Text&gt;</div><div class="line">        &lt;/TouchableHighlight&gt;</div><div class="line">        &#123;showInput &amp;&amp; &lt;TextInput</div><div class="line">          style=&#123;styles.input&#125;</div><div class="line">          onChangeText=&#123;(text) =&gt; this.updateText(text)&#125; /&gt;&#125;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const NoList = () =&gt; (</div><div class="line">  &lt;View style=&#123;styles.noList&#125;&gt;</div><div class="line">    &lt;Text style=&#123;styles.noListText&#125;&gt;No List, Add List To Get Started&lt;/Text&gt;</div><div class="line">  &lt;/View&gt;</div><div class="line">)</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  itemContainer: &#123;</div><div class="line">    borderBottomWidth: 1,</div><div class="line">    borderBottomColor: &apos;#ededed&apos;,</div><div class="line">    flexDirection: &apos;row&apos;</div><div class="line">  &#125;,</div><div class="line">  item: &#123;</div><div class="line">    color: &apos;#156e9a&apos;,</div><div class="line">    fontSize: 18,</div><div class="line">    flex: 3,</div><div class="line">    padding: 20</div><div class="line">  &#125;,</div><div class="line">  deleteItem: &#123;</div><div class="line">    flex: 1,</div><div class="line">    padding: 20,</div><div class="line">    color: &apos;#a3a3a3&apos;,</div><div class="line">    fontWeight: &apos;bold&apos;,</div><div class="line">    marginTop: 3</div><div class="line">  &#125;,</div><div class="line">  button: &#123;</div><div class="line">    height: 70,</div><div class="line">    justifyContent: &apos;center&apos;,</div><div class="line">    alignItems: &apos;center&apos;,</div><div class="line">    borderTopWidth: 1,</div><div class="line">    borderTopColor: &apos;#156e9a&apos;</div><div class="line">  &#125;,</div><div class="line">  buttonText: &#123;</div><div class="line">    color: &apos;#156e9a&apos;,</div><div class="line">    fontWeight: &apos;bold&apos;</div><div class="line">  &#125;,</div><div class="line">  heading: &#123;</div><div class="line">    height: 80,</div><div class="line">    justifyContent: &apos;center&apos;,</div><div class="line">    alignItems: &apos;center&apos;,</div><div class="line">    borderBottomWidth: 1,</div><div class="line">    borderBottomColor: &apos;#156e9a&apos;</div><div class="line">  &#125;,</div><div class="line">  headingText: &#123;</div><div class="line">    color: &apos;#156e9a&apos;,</div><div class="line">    fontWeight: &apos;bold&apos;</div><div class="line">  &#125;,</div><div class="line">  input: &#123;</div><div class="line">    height: 70,</div><div class="line">    backgroundColor: &apos;#f2f2f2&apos;,</div><div class="line">    padding: 20,</div><div class="line">    color: &apos;#156e9a&apos;</div><div class="line">  &#125;,</div><div class="line">  noList: &#123;</div><div class="line">    flex: 1,</div><div class="line">    justifyContent: &apos;center&apos;,</div><div class="line">    alignItems: &apos;center&apos;</div><div class="line">  &#125;,</div><div class="line">  noListText: &#123;</div><div class="line">    fontSize: 22,</div><div class="line">    color: &apos;#156e9a&apos;</div><div class="line">  &#125;,</div><div class="line">&#125;)</div><div class="line"></div><div class="line">export default TodoList</div></pre></td></tr></table></figure>
<ol>
<li>从 mobx-react/native 导入 observer；</li>
<li>使用 @observer 装饰器描述类，确保相关数组变化后组件独立地重渲染；</li>
<li>导入已经创建好的组件 NewItem。这是我们要增加新条目时转向的组件；</li>
<li>在 addListItem中，把 this.state.text 传入this.props.store.addListItem。在与输入框绑定的 updateText 中会更新this.state.text；</li>
<li>在 removeListItem 中调用 this.props.store.removeListItem 并传入条目；</li>
<li>在 addItemToList 中调用 this.props.navigator.push，传入条目和数组存储两个参数；</li>
<li>在 render 方法中，通过属性解构数据存储：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const &#123; list &#125; = this.props.store</div></pre></td></tr></table></figure>
<p>   8.在 render 方法中，也创建了界面，并绑定了类的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos;</div><div class="line">import &#123; View, Text, StyleSheet, TextInput, TouchableHighlight &#125; from &apos;react-native&apos;</div><div class="line"></div><div class="line">class NewItem extends Component &#123;</div><div class="line">  constructor (props) &#123;</div><div class="line">    super(props)</div><div class="line">    this.state = &#123;</div><div class="line">      newItem: &apos;&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  addItem () &#123;</div><div class="line">    if (this.state.newItem === &apos;&apos;) return</div><div class="line">    this.props.store.addItem(this.props.item, this.state.newItem)</div><div class="line">    this.setState(&#123;</div><div class="line">      newItem: &apos;&apos;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  updateNewItem (text) &#123;</div><div class="line">    this.setState(&#123;</div><div class="line">      newItem: text</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  render () &#123;</div><div class="line">    const &#123; item &#125; = this.props</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;&#123;flex: 1&#125;&#125;&gt;</div><div class="line">        &lt;View style=&#123;styles.heading&#125;&gt;</div><div class="line">          &lt;Text style=&#123;styles.headingText&#125;&gt;&#123;item.name&#125;&lt;/Text&gt;</div><div class="line">          &lt;Text</div><div class="line">            onPress=&#123;this.props.navigator.pop&#125;</div><div class="line">            style=&#123;styles.closeButton&#125;&gt;×&lt;/Text&gt;</div><div class="line">        &lt;/View&gt;</div><div class="line">        &#123;!item.items.length &amp;&amp; &lt;NoItems /&gt;&#125;</div><div class="line">        &#123;item.items.length ? &lt;Items items=&#123;item.items&#125; /&gt; : &lt;View /&gt;&#125;</div><div class="line">        &lt;View style=&#123;&#123;flexDirection: &apos;row&apos;&#125;&#125;&gt;</div><div class="line">          &lt;TextInput</div><div class="line">            value=&#123;this.state.newItem&#125;</div><div class="line">            onChangeText=&#123;(text) =&gt; this.updateNewItem(text)&#125;</div><div class="line">            style=&#123;styles.input&#125; /&gt;</div><div class="line">          &lt;TouchableHighlight</div><div class="line">            onPress=&#123;this.addItem.bind(this)&#125;</div><div class="line">            style=&#123;styles.button&#125;&gt;</div><div class="line">            &lt;Text&gt;Add&lt;/Text&gt;</div><div class="line">          &lt;/TouchableHighlight&gt;</div><div class="line">        &lt;/View&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const NoItems = () =&gt; (</div><div class="line">  &lt;View style=&#123;styles.noItem&#125;&gt;</div><div class="line">    &lt;Text style=&#123;styles.noItemText&#125;&gt;No Items, Add Items To Get Started&lt;/Text&gt;</div><div class="line">  &lt;/View&gt;</div><div class="line">)</div><div class="line">const Items = (&#123;items&#125;) =&gt; (</div><div class="line">  &lt;View style=&#123;&#123;flex: 1, paddingTop: 10&#125;&#125;&gt;</div><div class="line">   &#123;items.map((item, i) =&gt; &#123;</div><div class="line">        return &lt;Text style=&#123;styles.item&#125; key=&#123;i&#125;&gt;• &#123;item&#125;&lt;/Text&gt;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &lt;/View&gt;</div><div class="line">)</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  heading: &#123;</div><div class="line">    height: 80,</div><div class="line">    justifyContent: &apos;center&apos;,</div><div class="line">    alignItems: &apos;center&apos;,</div><div class="line">    borderBottomWidth: 1,</div><div class="line">    borderBottomColor: &apos;#156e9a&apos;</div><div class="line">  &#125;,</div><div class="line">  headingText: &#123;</div><div class="line">    color: &apos;#156e9a&apos;,</div><div class="line">    fontWeight: &apos;bold&apos;</div><div class="line">  &#125;,</div><div class="line">  input: &#123;</div><div class="line">    height: 70,</div><div class="line">    backgroundColor: &apos;#ededed&apos;,</div><div class="line">    padding: 20,</div><div class="line">    flex: 1</div><div class="line">  &#125;,</div><div class="line">  button: &#123;</div><div class="line">    width: 70,</div><div class="line">    height: 70,</div><div class="line">    justifyContent: &apos;center&apos;,</div><div class="line">    alignItems: &apos;center&apos;,</div><div class="line">    borderTopWidth: 1,</div><div class="line">    borderColor: &apos;#ededed&apos;</div><div class="line">  &#125;,</div><div class="line">  closeButton: &#123;</div><div class="line">    position: &apos;absolute&apos;,</div><div class="line">    right: 17,</div><div class="line">    top: 18,</div><div class="line">    fontSize: 36</div><div class="line">  &#125;,</div><div class="line">  noItem: &#123;</div><div class="line">    flex: 1,</div><div class="line">    justifyContent: &apos;center&apos;,</div><div class="line">    alignItems: &apos;center&apos;</div><div class="line">  &#125;,</div><div class="line">  noItemText: &#123;</div><div class="line">    fontSize: 22,</div><div class="line">    color: &apos;#156e9a&apos;</div><div class="line">  &#125;,</div><div class="line">  item: &#123;</div><div class="line">    color: &apos;#156e9a&apos;,</div><div class="line">    padding: 10,</div><div class="line">    fontSize: 20,</div><div class="line">    paddingLeft: 20</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">export default NewItem</div></pre></td></tr></table></figure>
<p>如果你之前使用过MobX，那么相信在React Native使用同样简单。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MobX 是一款精准的状态管理工具库，如果你在 React 和 React Native 应用中使用过 Flux、Alt、Redux 和 Reflux，那毫不犹豫地说，MobX 的简单性将成为你状态管理的不二之选。&lt;/p&gt;
&lt;p&gt;加入我们要实现这样一个功能：创建一个新的列表
    
    </summary>
    
      <category term="React Native" scheme="http://www.xiangzhihong.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://www.xiangzhihong.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native动画详解</title>
    <link href="http://www.xiangzhihong.com/2017/04/03/React%20Native%E5%8A%A8%E7%94%BBAnimated%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.xiangzhihong.com/2017/04/03/React Native动画Animated详解/</id>
    <published>2017-04-02T16:00:00.000Z</published>
    <updated>2017-07-17T06:07:35.784Z</updated>
    
    <content type="html"><![CDATA[<p>在移动开发中，动画是提高用户体验不可缺少的一个元素。在React Native中，动画API提供了一些现成的组件：Animated.View，Animated.Text和Animated.Image默认支持动画。动画API会调用iOS或者Android的本地代码来完成这些组件的位移、大小等动画。</p>
<p>在React Native中，Animated创建过程如下：</p>
<ol>
<li>创建Animated.Value，设置初始值，比如一个视图的opacity属性，最开始设置Animated.Value(0),来表示动画的开始时候，视图是全透明的。</li>
<li>AnimatedValue绑定到Style的可动画属性，比如透明度，{opacity: this.state.fadeAnim}</li>
<li>使用Animated.timing来创建自动的动画,或者使用Animated.event来根据手势，触摸，Scroll的动态更新动画的状态</li>
<li>调用Animated.timeing.start()开始动画</li>
</ol>
<h1 id="Animated简介"><a href="#Animated简介" class="headerlink" title="Animated简介"></a>Animated简介</h1><p>大多数情况下，在 React Native 中创建动画是推荐使用 Animated API 的，其提供了三个主要的方法用于创建动画：</p>
<ol>
<li>Animated.timing() – 推动一个值按照一个过渡曲线而随时间变化。Easing 模块定义了很多缓冲曲线函数。</li>
<li>Animated.decay() – 推动一个值以一个初始的速度和一个衰减系数逐渐变为0。</li>
<li>Animated.spring() – 产生一个基于 Rebound 和 Origami 实现的Spring动画。它会在<br>toValue 值更新的同时跟踪当前的速度状态，以确保动画连贯。</li>
</ol>
<p>除了这三个创建动画的方法，对于每个独立的方法都有三种调用该动画的方式：</p>
<ol>
<li>Animated.parallel() –同时开始一个动画数组里的全部动画。默认情况下，如果有任何一个动画停止了，其余的也会被停止。你可以通过stopTogether 选项来改变这个效果。</li>
<li>Animated.sequence() –按顺序执行一个动画数组里的动画，等待一个完成后再执行下一个。如果当前的动画被中止，后面的动画则不会继续执行。</li>
<li>Animated.stagger() – 一个动画数组，里面的动画有可能会同时执行（重叠），不过会以指定的延迟来开始。</li>
</ol>
<h2 id="Animated-timing"><a href="#Animated-timing" class="headerlink" title="Animated.timing()"></a>Animated.timing()</h2><p>使用 Animated.timing 创建的旋转动画。Animated.timing()的基本使用方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Animated.timing(</div><div class="line">  someValue,</div><div class="line">  &#123;</div><div class="line">    toValue: number,</div><div class="line">    duration: number,</div><div class="line">    easing: easingFunction,</div><div class="line">    delay: number</div><div class="line">  &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>Easing 也是用React Native创建动画的载体，它允许我们使用已经定义好的各种缓冲函数，例如：linear, ease, quad, cubic, sin, elastic, bounce, back, bezier, in, out, inout 。由于有直线运动，我们将使用 linear。<br>接下来，需要在构造函数中初始化一个带动画属性的值用于旋转动画的初始值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">constructor () &#123;</div><div class="line">  super()</div><div class="line">  this.spinValue = new Animated.Value(0)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们使用  Animated.Value声明了一个 spinValue 变量，并传了一个 0 作为初始值。然后创建了一个名为 spin 的方法，并在 componentDidMount 中调用它，目的是在 app 加载之后运行动画。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">componentDidMount () &#123;</div><div class="line">  this.spin()</div><div class="line">&#125;</div><div class="line">spin () &#123;</div><div class="line">  this.spinValue.setValue(0)</div><div class="line">  Animated.timing(</div><div class="line">    this.spinValue,</div><div class="line">    &#123;</div><div class="line">      toValue: 1,</div><div class="line">      duration: 4000,</div><div class="line">      easing: Easing.linear</div><div class="line">    &#125;</div><div class="line">  ).start(() =&gt; this.spin())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在方法已经创建好了，接下来就是在UI中渲染动画了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">render () &#123;</div><div class="line">  const spin = this.spinValue.interpolate(&#123;</div><div class="line">    inputRange: [0, 1],</div><div class="line">    outputRange: [&apos;0deg&apos;, &apos;360deg&apos;]</div><div class="line">  &#125;)</div><div class="line">  return (</div><div class="line">    &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">      &lt;Animated.Image</div><div class="line">        style=&#123;&#123;</div><div class="line">          width: 227,</div><div class="line">          height: 200,</div><div class="line">          transform: [&#123;rotate: spin&#125;] &#125;&#125;</div><div class="line">          source=&#123;&#123;uri: &apos;https://s3.amazonaws.com/media-p.slid.es/uploads/alexanderfarennikov/images/1198519/reactjs.png&apos;&#125;&#125;</div><div class="line">      /&gt;</div><div class="line">    &lt;/View&gt;</div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现效果：<br><img src="http://img.blog.csdn.net/20170527180103755?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>完整代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Sample React Native App</div><div class="line"> * https://github.com/facebook/react-native</div><div class="line"> * @flow</div><div class="line"> */</div><div class="line"></div><div class="line">import React, &#123;Component&#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">    AppRegistry,</div><div class="line">    StyleSheet,</div><div class="line">    Text,</div><div class="line">    Animated,</div><div class="line">    TouchableOpacity,</div><div class="line">    Easing,</div><div class="line">    View</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line"></div><div class="line"></div><div class="line">class AnimationRotateScene extends Component &#123;</div><div class="line"></div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">        this.spinValue = new Animated.Value(0)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentDidMount () &#123;</div><div class="line">        this.spin()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    spin () &#123;</div><div class="line">        this.spinValue.setValue(0)</div><div class="line">        Animated.timing(</div><div class="line">            this.spinValue,</div><div class="line">            &#123;</div><div class="line">                toValue: 1,</div><div class="line">                duration: 4000,</div><div class="line">                easing: Easing.linear</div><div class="line">            &#125;</div><div class="line">        ).start(() =&gt; this.spin())</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    render() &#123;</div><div class="line"></div><div class="line">        const</div><div class="line">            spin = this.spinValue.interpolate(&#123;</div><div class="line">                inputRange: [0, 1],</div><div class="line">                outputRange: [&apos;0deg&apos;, &apos;360deg&apos;]</div><div class="line">            &#125;)</div><div class="line"></div><div class="line"></div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line"></div><div class="line">                &lt;Animated.Image</div><div class="line">                    style=&#123;&#123;</div><div class="line">                        width: 227,</div><div class="line">                        height: 200,</div><div class="line">                        transform: [&#123;rotate: spin&#125;] &#125;&#125;</div><div class="line">                    source=&#123;&#123;uri: &apos;https://s3.amazonaws.com/media-p.slid.es/uploads/alexanderfarennikov/images/1198519/reactjs.png&apos;&#125;&#125;</div><div class="line">                /&gt;</div><div class="line">                &lt;TouchableOpacity onPress=&#123;() =&gt; this.spin()&#125; style=&#123;styles.button&#125;&gt;</div><div class="line">                    &lt;Text&gt;启动动画&lt;/Text&gt;</div><div class="line">                &lt;/TouchableOpacity&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        flex: 1,</div><div class="line">        marginTop: 20,</div><div class="line">        justifyContent: &apos;center&apos;,</div><div class="line">        alignItems: &apos;center&apos;,</div><div class="line">    &#125;,</div><div class="line">    button: &#123;</div><div class="line">        marginTop: 20,</div><div class="line">        backgroundColor:&apos;#808080&apos;,</div><div class="line">        height:35,</div><div class="line">        width:140,</div><div class="line">        borderRadius:5,</div><div class="line">        justifyContent: &apos;center&apos;,</div><div class="line">        alignItems: &apos;center&apos;,</div><div class="line">    &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">export default AnimationRotateScene;</div></pre></td></tr></table></figure>
<h2 id="Animated-spring"><a href="#Animated-spring" class="headerlink" title="Animated.spring()"></a>Animated.spring()</h2><p>使用 Animated.spring() 方法创建一个放大缩小的动画。<br><img src="https://camo.githubusercontent.com/f06503bee47f3f4aee6fb9b771da473cabf4bcdc/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f313630302f312a5642464b465564347a6b434a45554c46523071415f672e676966" alt="这里写图片描述"><br>Animated.spring() 方法使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Animated.spring(</div><div class="line">    someValue,</div><div class="line">    &#123;</div><div class="line">      toValue: number,</div><div class="line">      friction: number</div><div class="line">    &#125;</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>如上图所示，我们要使用Animated.spring()创建一个放大缩小的动画效果。<br>在构造函数中，创建一个 springValue 变量，初始化其值为0.3。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">constructor () &#123;</div><div class="line">  super()</div><div class="line">  this.springValue = new Animated.Value(0.3)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，删除 animated 方法和componentDidMount方法，创建一个新的 spring 方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">spring () &#123;</div><div class="line">  this.springValue.setValue(0.3)</div><div class="line">  Animated.spring(</div><div class="line">    this.springValue,</div><div class="line">    &#123;</div><div class="line">      toValue: 1,</div><div class="line">      friction: 1</div><div class="line">    &#125;</div><div class="line">  ).start()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们给View的button添加一个点击事件，出发上面的spring动画。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">  &lt;Text</div><div class="line">    style=&#123;&#123;marginBottom: 100&#125;&#125;</div><div class="line">    onPress=&#123;this.spring.bind(this)&#125;&gt;Spring&lt;/Text&gt;</div><div class="line">    &lt;Animated.Image</div><div class="line">      style=&#123;&#123; width: 227, height: 200, transform: [&#123;scale: this.springValue&#125;] &#125;&#125;</div><div class="line">      source=&#123;&#123;uri: &apos;https://s3.amazonaws.com/media-p.slid.es/uploads/alexanderfarennikov/images/1198519/reactjs.png&apos;&#125;&#125;/&gt;</div><div class="line">&lt;/View&gt;</div></pre></td></tr></table></figure>
<p>完整代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Sample React Native App</div><div class="line"> * https://github.com/facebook/react-native</div><div class="line"> * @flow</div><div class="line"> */</div><div class="line"></div><div class="line">import React, &#123;Component&#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">    AppRegistry,</div><div class="line">    StyleSheet,</div><div class="line">    Text,</div><div class="line">    Animated,</div><div class="line">    TouchableOpacity,</div><div class="line">    Easing,</div><div class="line">    View</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line"></div><div class="line"></div><div class="line">class AnimationRotateScene extends Component &#123;</div><div class="line"></div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">        this.spinValue = new Animated.Value(0)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentDidMount () &#123;</div><div class="line">        this.spin()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    spin () &#123;</div><div class="line">        this.spinValue.setValue(0)</div><div class="line">        Animated.timing(</div><div class="line">            this.spinValue,</div><div class="line">            &#123;</div><div class="line">                toValue: 1,</div><div class="line">                duration: 4000,</div><div class="line">                easing: Easing.linear</div><div class="line">            &#125;</div><div class="line">        ).start(() =&gt; this.spin())</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    render() &#123;</div><div class="line"></div><div class="line">        const</div><div class="line">            spin = this.spinValue.interpolate(&#123;</div><div class="line">                inputRange: [0, 1],</div><div class="line">                outputRange: [&apos;0deg&apos;, &apos;360deg&apos;]</div><div class="line">            &#125;)</div><div class="line"></div><div class="line"></div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line"></div><div class="line">                &lt;Animated.Image</div><div class="line">                    style=&#123;&#123;</div><div class="line">                        width: 227,</div><div class="line">                        height: 200,</div><div class="line">                        transform: [&#123;rotate: spin&#125;] &#125;&#125;</div><div class="line">                    source=&#123;&#123;uri: &apos;https://s3.amazonaws.com/media-p.slid.es/uploads/alexanderfarennikov/images/1198519/reactjs.png&apos;&#125;&#125;</div><div class="line">                /&gt;</div><div class="line">                &lt;TouchableOpacity onPress=&#123;() =&gt; this.spin()&#125; style=&#123;styles.button&#125;&gt;</div><div class="line">                    &lt;Text&gt;启动动画&lt;/Text&gt;</div><div class="line">                &lt;/TouchableOpacity&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        flex: 1,</div><div class="line">        marginTop: 20,</div><div class="line">        justifyContent: &apos;center&apos;,</div><div class="line">        alignItems: &apos;center&apos;,</div><div class="line">    &#125;,</div><div class="line">    button: &#123;</div><div class="line">        marginTop: 20,</div><div class="line">        backgroundColor:&apos;#808080&apos;,</div><div class="line">        height:35,</div><div class="line">        width:140,</div><div class="line">        borderRadius:5,</div><div class="line">        justifyContent: &apos;center&apos;,</div><div class="line">        alignItems: &apos;center&apos;,</div><div class="line">    &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">export default AnimationRotateScene;</div></pre></td></tr></table></figure>
<h2 id="Animated-parallel"><a href="#Animated-parallel" class="headerlink" title="Animated.parallel()"></a>Animated.parallel()</h2><p>Animated.parallel() 会同时开始一个动画数组里的全部动画。parallel()会接受一个动画数组，首先看一下api：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Animated.parallel(arrayOfAnimations)</div><div class="line">// In use:</div><div class="line">Animated.parallel([</div><div class="line">  Animated.spring(</div><div class="line">    animatedValue,</div><div class="line">    &#123;</div><div class="line">      //config options</div><div class="line">    &#125;</div><div class="line">  ),</div><div class="line">  Animated.timing(</div><div class="line">     animatedValue2,</div><div class="line">     &#123;</div><div class="line">       //config options</div><div class="line">     &#125;</div><div class="line">  )</div><div class="line">])</div></pre></td></tr></table></figure>
<p>所以，我们先创建一个动画数组，并初始化。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">constructor () &#123;</div><div class="line">  super()</div><div class="line">  this.animatedValue1 = new Animated.Value(0)</div><div class="line">  this.animatedValue2 = new Animated.Value(0)</div><div class="line">  this.animatedValue3 = new Animated.Value(0)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，创建一个 animate 方法并在 componendDidMount() 中调用它。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">componentDidMount () &#123;</div><div class="line">  this.animate()</div><div class="line">&#125;</div><div class="line">animate () &#123;</div><div class="line">  this.animatedValue1.setValue(0)</div><div class="line">  this.animatedValue2.setValue(0)</div><div class="line">  this.animatedValue3.setValue(0)</div><div class="line">  const createAnimation = function (value, duration, easing, delay = 0) &#123;</div><div class="line">    return Animated.timing(</div><div class="line">      value,</div><div class="line">      &#123;</div><div class="line">        toValue: 1,</div><div class="line">        duration,</div><div class="line">        easing,</div><div class="line">        delay</div><div class="line">      &#125;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">  Animated.parallel([</div><div class="line">    createAnimation(this.animatedValue1, 2000, Easing.ease),</div><div class="line">    createAnimation(this.animatedValue2, 1000, Easing.ease, 1000),</div><div class="line">    createAnimation(this.animatedValue3, 1000, Easing.ease, 2000)        </div><div class="line">  ]).start()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 animate 方法中，我们将三个动画属性值重置为0。此外，还创建了一个 createAnimation 方法，该方法接受四个参数：value, duration, easing, delay(默认值是0)，返回一个新的动画。</p>
<p>然后，调用 Animated.parallel()，并将三个使用 createAnimation 创建的动画作为参数传递给它。在 render 方法中，我们需要设置插值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">render () &#123;</div><div class="line">  const scaleText = this.animatedValue1.interpolate(&#123;</div><div class="line">    inputRange: [0, 1],</div><div class="line">    outputRange: [0.5, 2]</div><div class="line">  &#125;)</div><div class="line">  const spinText = this.animatedValue2.interpolate(&#123;</div><div class="line">    inputRange: [0, 1],</div><div class="line">    outputRange: [&apos;0deg&apos;, &apos;720deg&apos;]</div><div class="line">  &#125;)</div><div class="line">  const introButton = this.animatedValue3.interpolate(&#123;</div><div class="line">    inputRange: [0, 1],</div><div class="line">    outputRange: [-100, 400]</div><div class="line">  &#125;)</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，我们用一个主 View 包裹三个 Animated.Views：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123;[styles.container]&#125;&gt;</div><div class="line">  &lt;Animated.View </div><div class="line">    style=&#123;&#123; transform: [&#123;scale: scaleText&#125;] &#125;&#125;&gt;</div><div class="line">    &lt;Text&gt;Welcome&lt;/Text&gt;</div><div class="line">  &lt;/Animated.View&gt;</div><div class="line">  &lt;Animated.View</div><div class="line">    style=&#123;&#123; marginTop: 20, transform: [&#123;rotate: spinText&#125;] &#125;&#125;&gt;</div><div class="line">    &lt;Text</div><div class="line">      style=&#123;&#123;fontSize: 20&#125;&#125;&gt;</div><div class="line">      to the App!</div><div class="line">    &lt;/Text&gt;</div><div class="line">  &lt;/Animated.View&gt;</div><div class="line">  &lt;Animated.View</div><div class="line">    style=&#123;&#123;top: introButton, position: &apos;absolute&apos;&#125;&#125;&gt;</div><div class="line">    &lt;TouchableHighlight</div><div class="line">      onPress=&#123;this.animate.bind(this)&#125;</div><div class="line">      style=&#123;styles.button&#125;&gt;</div><div class="line">      &lt;Text</div><div class="line">        style=&#123;&#123;color: &apos;white&apos;, fontSize: 20&#125;&#125;&gt;</div><div class="line">        Click Here To Start</div><div class="line">      &lt;/Text&gt;</div><div class="line">   &lt;/TouchableHighlight&gt;</div><div class="line">  &lt;/Animated.View&gt;</div><div class="line">&lt;/View&gt;</div></pre></td></tr></table></figure>
<p>完整的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Sample React Native App</div><div class="line"> * https://github.com/facebook/react-native</div><div class="line"> * @flow 组动画</div><div class="line"> */</div><div class="line"></div><div class="line">import React, &#123;Component&#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">    AppRegistry,</div><div class="line">    StyleSheet,</div><div class="line">    Text,</div><div class="line">    Animated,</div><div class="line">    TouchableOpacity,</div><div class="line">    TouchableHighlight,</div><div class="line">    Easing,</div><div class="line">    View</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line"></div><div class="line"></div><div class="line">class AnimationGroupScene extends Component &#123;</div><div class="line"></div><div class="line">    constructor() &#123;</div><div class="line">        super()</div><div class="line">        this.animatedValue1 = new Animated.Value(0)</div><div class="line">        this.animatedValue2 = new Animated.Value(0)</div><div class="line">        this.animatedValue3 = new Animated.Value(0)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentDidMount() &#123;</div><div class="line">        this.animate()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    animate() &#123;</div><div class="line">        this.animatedValue1.setValue(0)</div><div class="line">        this.animatedValue2.setValue(0)</div><div class="line">        this.animatedValue3.setValue(0)</div><div class="line">        const createAnimation = function (value, duration, easing, delay = 0) &#123;</div><div class="line">            return Animated.timing(</div><div class="line">                value,</div><div class="line">                &#123;</div><div class="line">                    toValue: 1,</div><div class="line">                    duration,</div><div class="line">                    easing,</div><div class="line">                    delay</div><div class="line">                &#125;</div><div class="line">            )</div><div class="line">        &#125;</div><div class="line">        Animated.parallel([</div><div class="line">            createAnimation(this.animatedValue1, 2000, Easing.ease),</div><div class="line">            createAnimation(this.animatedValue2, 1000, Easing.ease, 1000),</div><div class="line">            createAnimation(this.animatedValue3, 1000, Easing.ease, 2000)</div><div class="line">        ]).start()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    startAnimation() &#123;</div><div class="line">        this.state.currentAlpha = this.state.currentAlpha == 1.0 ? 0.0 : 1.0;</div><div class="line">        Animated.timing(</div><div class="line">            this.state.fadeAnim,</div><div class="line">            &#123;toValue: this.state.currentAlpha&#125;</div><div class="line">        ).start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line"></div><div class="line">        const scaleText = this.animatedValue1.interpolate(&#123;</div><div class="line">            inputRange: [0, 1],</div><div class="line">            outputRange: [0.5, 2]</div><div class="line">        &#125;)</div><div class="line">        const spinText = this.animatedValue2.interpolate(&#123;</div><div class="line">            inputRange: [0, 1],</div><div class="line">            outputRange: [&apos;0deg&apos;, &apos;720deg&apos;]</div><div class="line">        &#125;)</div><div class="line">        const introButton = this.animatedValue3.interpolate(&#123;</div><div class="line">            inputRange: [0, 1],</div><div class="line">            outputRange: [-100, 400]</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line"></div><div class="line">                &lt;Animated.View</div><div class="line">                    style=&#123;&#123;transform: [&#123;scale: scaleText&#125;]&#125;&#125;&gt;</div><div class="line">                    &lt;Text&gt;Welcome&lt;/Text&gt;</div><div class="line">                &lt;/Animated.View&gt;</div><div class="line">                &lt;Animated.View</div><div class="line">                    style=&#123;&#123;marginTop: 20, transform: [&#123;rotate: spinText&#125;]&#125;&#125;&gt;</div><div class="line">                    &lt;Text</div><div class="line">                        style=&#123;&#123;fontSize: 20&#125;&#125;&gt;</div><div class="line">                        to the App!</div><div class="line">                    &lt;/Text&gt;</div><div class="line">                &lt;/Animated.View&gt;</div><div class="line">                &lt;Animated.View</div><div class="line">                    style=&#123;&#123;top: introButton, position: &apos;absolute&apos;&#125;&#125;&gt;</div><div class="line">                    &lt;TouchableHighlight</div><div class="line">                        onPress=&#123;this.animate.bind(this)&#125;</div><div class="line">                        style=&#123;styles.button&#125;&gt;</div><div class="line">                        &lt;Text&gt;启动组动画&lt;/Text&gt;</div><div class="line">                    &lt;/TouchableHighlight&gt;</div><div class="line">                &lt;/Animated.View&gt;</div><div class="line"></div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        flex: 1,</div><div class="line">        marginTop: 20,</div><div class="line">        justifyContent: &apos;center&apos;,</div><div class="line">        alignItems: &apos;center&apos;,</div><div class="line">    &#125;,</div><div class="line">    button: &#123;</div><div class="line">        marginTop: 20,</div><div class="line">        backgroundColor: &apos;#808080&apos;,</div><div class="line">        height: 35,</div><div class="line">        width: 140,</div><div class="line">        borderRadius: 5,</div><div class="line">        justifyContent: &apos;center&apos;,</div><div class="line">        alignItems: &apos;center&apos;,</div><div class="line">    &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">export default AnimationGroupScene;</div></pre></td></tr></table></figure>
<h2 id="示例使用说明"><a href="#示例使用说明" class="headerlink" title="示例使用说明"></a>示例使用说明</h2><p><img src="http://img.blog.csdn.net/20170527212722688?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20170527212132448?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>如图所示，我对动画的代码做了一个简单的整理，大家在使用的时候直接引入AnimationRoot文件即可。<br>AnimationRoot文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Sample React Native App</div><div class="line"> * https://github.com/facebook/react-native</div><div class="line"> * @flow</div><div class="line"> */</div><div class="line"></div><div class="line">import React, &#123;Component&#125; from &apos;react&apos;;</div><div class="line">import &#123; StackNavigator &#125; from &apos;react-navigation&apos;;</div><div class="line"></div><div class="line"></div><div class="line">import AnimationIndex from &apos;./AnimationIndex&apos;;</div><div class="line">import AnimationSpringScene from &apos;./AnimationSpringScene&apos;;//缩放动画</div><div class="line">import AnimationRotateScene from &apos;./AnimationRotateScene&apos;;//旋转动画</div><div class="line">import AnimationAlphaScene from &apos;./AnimationAlphaScene&apos;;//Alpha动画</div><div class="line">import AnimationGroupScene from &apos;./AnimationGroupScene&apos;;//组动画</div><div class="line">import AnimationFrameScene from &apos;./AnimationFrameScene&apos;;//帧动画</div><div class="line"></div><div class="line"></div><div class="line">const anim = StackNavigator(&#123;</div><div class="line">    AnimationIndex: &#123; screen: AnimationIndex &#125;,</div><div class="line">    AnimationSpringScene: &#123; screen: AnimationSpringScene &#125;,</div><div class="line">    AnimationRotateScene: &#123; screen: AnimationRotateScene &#125;,</div><div class="line">    AnimationAlphaScene: &#123; screen: AnimationAlphaScene &#125;,</div><div class="line">    AnimationGroupScene: &#123; screen: AnimationGroupScene &#125;,</div><div class="line">    AnimationFrameScene: &#123; screen: AnimationFrameScene &#125;,</div><div class="line">&#125;);</div><div class="line">export default anim;</div></pre></td></tr></table></figure>
<p>最后是项目实现的最终结果图，代码地址<a href="http://download.csdn.net/detail/xiangzhihong8/9854457" target="_blank" rel="external">动画源码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在移动开发中，动画是提高用户体验不可缺少的一个元素。在React Native中，动画API提供了一些现成的组件：Animated.View，Animated.Text和Animated.Image默认支持动画。动画API会调用iOS或者Android的本地代码来完成这些组
    
    </summary>
    
      <category term="React Native" scheme="http://www.xiangzhihong.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://www.xiangzhihong.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>小程序实现原理解析</title>
    <link href="http://www.xiangzhihong.com/2017/03/14/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.xiangzhihong.com/2017/03/14/小程序实现原理解析/</id>
    <published>2017-03-13T16:00:00.000Z</published>
    <updated>2017-09-30T02:27:52.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>作为一名前端开发，如果你还停留在应用开发层面，那你就OUT了，快来跟我一起探讨下小程序框架本身底层实现的一些技术细节吧，让我们从小程序的运行机制来深度了解小程序。<br>小程序是基于WEB规范，采用HTML,CSS和JS等搭建的一套框架，微信官方给它们取了一个很牛逼的名字：WXML,WXSS，但本质上还是在整个WEB体系之下构建的。<br>WXML，个人猜测在取这个名字的是微信的Xml，说到底就是xml的一个子集。WXML采用微信自定义的少量标签WXSS，大家可以理解为就是自定义的CSS。实现逻辑部分的JS还是通用的ES规范，并且runtime还是Webview（IOS WKWEBVIEW, ANDROID X5）。</p>
<h1 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h1><h2 id="小程序目录结构"><a href="#小程序目录结构" class="headerlink" title="小程序目录结构"></a>小程序目录结构</h2><p><img src="http://img.blog.csdn.net/20170326213559847?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>一个完整的小程序主要由以下几部分组成：<br>一个入口文件：app.js<br>一个全局样式：app.wxss<br>一个全局配置：app.json<br>页面：pages下，每个页面再按文件夹划分，每个页面4个文件<br>视图：wxml，wxss<br>逻辑：js，json（页面配置，不是必须）</p>
<p>注：pages里面还可以再根据模块划分子目录，孙子目录，只需要在app.json里注册时填写路径就行。</p>
<h2 id="小程序打包"><a href="#小程序打包" class="headerlink" title="小程序打包"></a>小程序打包</h2><p>开发完成后，我们就可以通过这里可视化的按钮，点击直接打包上传发布，审核通过后用户就可以搜索到了。<br><img src="http://img.blog.csdn.net/20170326213924614?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>那么打包怎么实现的呢？<br>这就涉及到这个编辑器的实现原理和方式了，它本身也是基于WEB技术体系实现的，nwjs+react，nwjs是什么：简单是说就是node+webkit，node提供给我们本地api能力，而webkit提供给我们web能力，两者结合就能让我们使用JS+HTML实现本地应用程序。<br>既然有nodejs，那上面的打包选项里的功能就好实现了。<br>ES6转ES5：引入babel-core的node包<br>CSS补全：引入postcss和autoprefixer的node包（postcss和autoprefixer的原理看这里）<br>代码压缩：引入uglifyjs的node包</p>
<p>注：在android上使用的x5内核，对ES6的支持不好，要兼容的话，要么使用ES5的语法或者引入babel-polyfill兼容库。</p>
<h2 id="打包后的目录结构"><a href="#打包后的目录结构" class="headerlink" title="打包后的目录结构"></a>打包后的目录结构</h2><p>小程序打包后的结构如下：<br><img src="http://img.blog.csdn.net/20170326214333007?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>所有的小程序基本都最后都被打成上面的结构<br>1、WAService.js  框架JS库，提供逻辑层基础的API能力<br>2、WAWebview.js 框架JS库，提供视图层基础的API能力<br>3、WAConsole.js 框架JS库，控制台<br>4、app-config.js 小程序完整的配置，包含我们通过app.json里的所有配置，综合了默认配置型<br>5、app-service.js 我们自己的JS代码，全部打包到这个文件<br>6、page-frame.html 小程序视图的模板文件，所有的页面都使用此加载渲染，且所有的WXML都拆解为JS实现打包到这里<br>7、pages 所有的页面，这个不是我们之前的wxml文件了，主要是处理WXSS转换，使用js插入到header区域。</p>
<h1 id="小程序架构"><a href="#小程序架构" class="headerlink" title="小程序架构"></a>小程序架构</h1><p>微信小程序的框架包含两部分View视图层、App Service逻辑层，View层用来渲染页面结构，AppService层用来逻辑处理、数据请求、接口调用，它们在两个进程（两个Webview）里运行。<br>视图层和逻辑层通过系统层的JSBridage进行通信，逻辑层把数据变化通知到视图层，触发视图层页面更新，视图层把触发的事件通知到逻辑层进行业务处理。</p>
<p>小程序架构图：<br><img src="http://img.blog.csdn.net/20170326215724891?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>小程序启动时会从CDN下载小程序的完整包，一般是数字命名的,如：_-2082693788_4.wxapkg</p>
<h2 id="小程序技术实现"><a href="#小程序技术实现" class="headerlink" title="小程序技术实现"></a>小程序技术实现</h2><p>小程序的UI视图和逻辑处理是用多个webview实现的，逻辑处理的JS代码全部加载到一个Webview里面，称之为AppService，整个小程序只有一个，并且整个生命周期常驻内存，而所有的视图（wxml和wxss）都是单独的Webview来承载，称之为AppView。所以一个小程序打开至少就会有2个webview进程，正式因为每个视图都是一个独立的webview进程，考虑到性能消耗，小程序不允许打开超过5个层级的页面，当然同是也是为了体验更好。</p>
<h3 id="AppService"><a href="#AppService" class="headerlink" title="AppService"></a>AppService</h3><p>可以理解AppService即一个简单的页面，主要功能是负责逻辑处理部分的执行，底层提供一个WAService.js的文件来提供各种api接口，主要是以下几个部分：<br>消息通信封装为WeixinJSBridge（开发环境为window.postMessage, IOS下为WKWebview的window.webkit.messageHandlers.invokeHandler.postMessage，android下用WeixinJSCore.invokeHandler）</p>
<p>1、日志组件Reporter封装<br>2、wx对象下面的api方法<br>3、全局的App,Page,getApp,getCurrentPages等全局方法<br>4、还有就是对AMD模块规范的实现</p>
<p>然后整个页面就是加载一堆JS文件，包括小程序配置config，上面的WAService.js（调试模式下有asdebug.js），剩下就是我们自己写的全部的js文件，一次性都加载。</p>
<h3 id="在开发环境下"><a href="#在开发环境下" class="headerlink" title="在开发环境下"></a>在开发环境下</h3><p>1、页面模板：app.nw/app/dist/weapp/tpl/appserviceTpl.js<br>2、配置信息，是直接写入一个js变量，__wxConfig。<br>3，其他配置<br><img src="http://img.blog.csdn.net/20170326220419423?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h3 id="线上环境"><a href="#线上环境" class="headerlink" title="线上环境"></a>线上环境</h3><p>而在上线后是应用部分会打包为2个文件，名称app-config.json和app-service.js，然后微信会打开webview去加载。线上部分应该是微信自身提供了相应的模板文件，在压缩包里没有找到。<br>1、WAService.js（底层支持）<br>2、app-config.json（应用配置）<br>3、app-service.js（应用逻辑）</p>
<p>然后运行在JavaScriptCore引擎里面。</p>
<h3 id="AppView"><a href="#AppView" class="headerlink" title="AppView"></a>AppView</h3><p>这里可以理解为h5的页面，提供UI渲染，底层提供一个WAWebview.js来提供底层的功能,具体如下：<br>1、消息通信封装为WeixinJSBridge（开发环境为window.postMessage, IOS下为WKWebview的window.webkit.messageHandlers.invokeHandler.postMessage，android下用WeixinJSCore.invokeHandler）<br>2、日志组件Reporter封装<br>3、wx对象下的api，这里的api跟WAService里的还不太一样，有几个跟那边功能差不多，但是大部分都是处理UI显示相关的方法<br>4、小程序组件实现和注册<br>5、VirtualDOM，Diff和Render UI实现<br>6、页面事件触发</p>
<p>在此基础上，AppView有一个html模板文件，通过这个模板文件加载具体的页面，这个模板主要就一个方法，$gwx，主要是返回指定page的VirtualDOM，而在打包的时候，会事先把所有页面的WXML转换为ViirtualDOM放到模板文件里，而微信自己写了2个工具wcc（把WXML转换为VirtualDOM）和wcsc（把WXSS转换为一个JS字符串的形式通过style标签append到header里）。</p>
<h3 id="Service和View通信"><a href="#Service和View通信" class="headerlink" title="Service和View通信"></a>Service和View通信</h3><p>使用消息publish和subscribe机制实现两个Webview之间的通信，实现方式就是统一封装一个WeixinJSBridge对象，而不同的环境封装的接口不一样，具体实现的技术如下：</p>
<h4 id="windows环境"><a href="#windows环境" class="headerlink" title="windows环境"></a>windows环境</h4><p>通过window.postMessage实现（使用chrome扩展的接口注入一个contentScript.js，它封装了postMessage方法，实现webview之间的通信，并且也它通过chrome.runtime.connect方式，也提供了直接操作chrome native原生方法的接口）<br>发送消息：window.postMessage(data, ‘*’);，// data里指定 webviewID<br>接收消息：window.addEventListener(‘message’, messageHandler); // 消息处理并分发，同样支持调用nwjs的原生能力。<br>在contentScript里面看到一句话，证实了appservice也是通过一个webview实现的，实现原理上跟view一样，只是处理的业务逻辑不一样。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;webframe&apos; === b ? postMessageToWebPage(a) : &apos;appservice&apos; === b &amp;&amp; postMessageToWebPage(a)</div></pre></td></tr></table></figure>
<h4 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h4><p>通过 WKWebview的window.webkit.messageHandlers.NAME.postMessage实现微信navite代码里实现了两个handler消息处理器：<br>invokeHandler: 调用原生能力<br>publishHandler: 消息分发<br><img src="http://img.blog.csdn.net/20170326221355303?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><p>通过WeixinJSCore.invokeHanlder实现，这个WeixinJSCore是微信提供给JS调用的接口（native实现）<br>invokeHandler: 调用原生能力<br>publishHandler: 消息分发</p>
<h2 id="微信组件"><a href="#微信组件" class="headerlink" title="微信组件"></a>微信组件</h2><p>在WAWebview.js里有个对象叫exparser，它完整的实现小程序里的组件，看具体的实现方式，思路上跟w3c的web components规范神似，但是具体实现上是不一样的，我们使用的所有组件，都会被提前注册好，在Webview里渲染的时候进行替换组装。<br>exparser有个核心方法：<br>regiisterBehavior: 注册组件的一些基础行为，供组件继承<br>registerElement：注册组件，跟我们交互接口主要是属性和事件</p>
<p><img src="http://img.blog.csdn.net/20170326221559961?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>组件触发事件（带上webviewID），调用WeixinJSBridge的接口，publish到native，然后native再分发到AppService层指定webviewID的Page注册事件处理方法。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>小程序底层还是基于Webview来实现的，并没有发明创造新技术，整个框架体系，比较清晰和简单，基于Web规范，保证现有技能价值的最大化，只需了解框架规范即可使用已有Web技术进行开发。易于理解和开发。</p>
<p><strong>MSSM</strong>：对逻辑和UI进行了完全隔离，这个跟当前流行的react，agular，vue有本质的区别，小程序逻辑和UI完全运行在2个独立的Webview里面，而后面这几个框架还是运行在一个webview里面的，如果你想，还是可以直接操作dom对象，进行ui渲染的。</p>
<p><strong>组件机制</strong>：引入组件化机制，但是不完全基于组件开发，跟vue一样大部分UI还是模板化渲染，引入组件机制能更好的规范开发模式，也更方便升级和维护。</p>
<p><strong>多种节制</strong>：不能同时打开超过5个窗口，打包文件不能大于1M，dom对象不能大于16000个等，这些都是为了保证更好的体验。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;作为一名前端开发，如果你还停留在应用开发层面，那你就OUT了，快来跟我一起探讨下小程序框架本身底层实现的一些技术细节吧，让我们从小程序的运行
    
    </summary>
    
      <category term="小程序" scheme="http://www.xiangzhihong.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://www.xiangzhihong.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="微信" scheme="http://www.xiangzhihong.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>抓包神器Charles使用</title>
    <link href="http://www.xiangzhihong.com/2017/03/13/%E6%8A%93%E5%8C%85%E7%A5%9E%E5%99%A8Charles%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.xiangzhihong.com/2017/03/13/抓包神器Charles使用/</id>
    <published>2017-03-12T16:00:00.000Z</published>
    <updated>2017-09-30T02:25:57.622Z</updated>
    
    <content type="html"><![CDATA[<p>在软件开发过程中，抓包是常见的必备技能之一。本文主要介绍一下Mac下的抓包利器Charles(另一神器是Fiddler，相关文章：<a href="http://blog.csdn.net/xiangzhihong8/article/details/45718825" target="_blank" rel="external">Fiddler</a>)，使用Charles可以非常方便的抓取Http/Https请求，从而提高我们的开发效率。官方dmg下载地址：<a href="https://www.charlesproxy.com/download/" target="_blank" rel="external">点击此处下载</a></p>
<h2 id="Charles抓取Http请求"><a href="#Charles抓取Http请求" class="headerlink" title="Charles抓取Http请求"></a>Charles抓取Http请求</h2><ol>
<li>安装完成之后打开Charles，设置端口号:8888（端口号可以自定义）。选择“Proxy”菜单下的“Proxy Settings”子菜单。打开“Proxy Settings”对话框。<br><img src="http://img.blog.csdn.net/20170803214137577?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li>
<li>在“Proxy Settings”对话框中设置端口号:8888，并勾选“Enable transparent Http proxying”项。<br><img src="http://img.blog.csdn.net/20170803214246309?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li>
<li>打开“网络偏好设置”查看电脑IP地址，将手机的代理网络设置成你的电脑IP（iOS），端口设置为8888。<br><img src="http://img.blog.csdn.net/20170803214436409?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li>
<li>打开需要抓包的手机APP，初次使用时，Charles会弹出确认对话框，直接点击”Allow”按钮后就可以看到对应的请求数据。</li>
</ol>
<h2 id="Charles抓取Https请求"><a href="#Charles抓取Https请求" class="headerlink" title="Charles抓取Https请求"></a>Charles抓取Https请求</h2><ol>
<li>安装SSL证书<br>选中Charles，在“Help”菜单中选择—&gt;“SSL Proxying”—&gt;“Install Charles Root Certificate”会自动打开钥匙串访问窗口。<br><img src="http://img.blog.csdn.net/20170803215103850?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li>
</ol>
<p>在“钥匙串访问”窗口中找到对应的证书，双击打开。设置“使用证书时”项为：始终信任。<br><img src="http://img.blog.csdn.net/20170803215148810?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>安装后效果如下图：<br><img src="http://img.blog.csdn.net/20170803215231210?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<ol>
<li><p>手机安装证书<br>在手机已经设置好手动代理后，在手机Safari浏览器中输入下面的链接地址：<a href="http://charlesproxy.com/getssl。手机会自动跳转安装“Charles" target="_blank" rel="external">http://charlesproxy.com/getssl。手机会自动跳转安装“Charles</a> Proxy SSL Proxying”描述文件。如下图所示。<br><img src="http://img.blog.csdn.net/20170803215639882?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
</li>
<li><p>在Charles工具栏上点击设置按钮，选择“SSL Proxying Settings…”，打开“SSL Proxying Settings”对话框。<br><img src="http://img.blog.csdn.net/20170803215733395?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
</li>
<li>点击“Add”添加：Host中输入*表示匹配所有主机。https默认端口号：443。<br><img src="http://img.blog.csdn.net/20170803215825014?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li>
<li>安装手机证书之后，我们就可以访问了，例如<br><img src="http://img.blog.csdn.net/20170803215929110?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li>
</ol>
<p>针对Charles代理访问https有些正常有些失败的处理方法，可以访问：<a href="https://segmentfault.com/q/1010000005625874" target="_blank" rel="external">点击此处</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在软件开发过程中，抓包是常见的必备技能之一。本文主要介绍一下Mac下的抓包利器Charles(另一神器是Fiddler，相关文章：&lt;a href=&quot;http://blog.csdn.net/xiangzhihong8/article/details/45718825&quot; ta
    
    </summary>
    
      <category term="杂谈" scheme="http://www.xiangzhihong.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://www.xiangzhihong.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin之基本语法</title>
    <link href="http://www.xiangzhihong.com/2017/03/09/Kotlin%E4%B9%8B%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://www.xiangzhihong.com/2017/03/09/Kotlin之基本语法/</id>
    <published>2017-03-08T16:00:00.000Z</published>
    <updated>2017-09-30T02:23:15.353Z</updated>
    
    <content type="html"><![CDATA[<p>在今年Google IO大会上Google已经明确kotlin作为为Android第一官方语言的地位。我相信Google的决意，就像当初毫不犹豫的抛弃eclipse转向as，kotlin已经是不可避免的大势所趋了。再加上Kotlin与java代码完全兼容，所以从Java转向Kotlin是一件很容易的事情。Kotlin语法简单，它融合了当前多种语言的优势，可以是一门明星语言。</p>
<p>下面就Kotlin的一些基本语法做一个讲解。</p>
<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>一个源文件往往以包声明开始：源文件的所有内容(比如类和函数)都被包声明并包括。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">package foo.bar</div><div class="line"></div><div class="line">fun bza() &#123;&#125;</div><div class="line"></div><div class="line">class Goo &#123;&#125;</div></pre></td></tr></table></figure>
<p>在上面的例子中， bza() 的全名应该是 foo.bar.bza ，Goo 的全名是 foo.bar.Goo。如果没有指定包名，那这个文件的内容就从属于一个默认的 “default” 包。</p>
<h3 id="Imports"><a href="#Imports" class="headerlink" title="Imports"></a>Imports</h3><p>在源文件中，除了模块中默认导入的包，每个文件也可以有它自己的导入指令。比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import foo.Bar</div></pre></td></tr></table></figure>
<p>如果不指定特定的文件，那么可以使用*导入范围内的所有可用的内容 (包，类，对象，等等)。比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import foo.*   //foo 中的所有内容</div></pre></td></tr></table></figure>
<p>如果命名有冲突，我们还可以使用 as 关键字局部重命名解决冲突。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import foo.Bar // Bar 可以使用</div><div class="line">import bar.Bar as bBar // bBar 代表 &apos;bar.Bar&apos;</div></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p>在 kotlin 中用关键字 fun 声明函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fun double(x: Int): Int &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>函数参数用 Pascal 符号定义，格式形如：name:type，参数之间用逗号隔开，每个参数必须指明类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fun powerOf(number: Int, exponent: Int) &#123;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数参数可以设置默认值,默认值可以通过在type类型后使用=号进行赋值，当参数被忽略时会使用默认值，这样做的好处是可以减少重载。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fun read(b: Array&lt;Byte&gt;, off: Int = 0, len: Int = b.size() ) &#123;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>在函数内部可以直接使用函数，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">val result = double(2)</div></pre></td></tr></table></figure>
<p>如果在其他类需要调用调用成员函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Sample().foo() // 创建Sample类的实例,调用foo方法</div></pre></td></tr></table></figure>
<h3 id="中缀符号"><a href="#中缀符号" class="headerlink" title="中缀符号"></a>中缀符号</h3><p>在满足如下条件时：它们是成员函数或者是扩展函数，只有一个参数 使用infix关键词进行标记。函数可以通过中缀符号进行调用。比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//给 Int 定义一个扩展方法</div><div class="line">infix fun Int.shl(x: Int): Int &#123;</div><div class="line">...</div><div class="line">&#125;</div><div class="line"></div><div class="line">1 shl 2 //用中缀注解调用扩展函数</div><div class="line"></div><div class="line">1.shl(2)</div></pre></td></tr></table></figure>
<h3 id="Unit类型"><a href="#Unit类型" class="headerlink" title="Unit类型"></a>Unit类型</h3><p>如果函数不会返回任何有用值，那么他的返回类型就是 Unit 。Unit 是一个只有唯一值Unit的类型，这个值并不需要被直接返回，相当于Java的Void。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fun printHello(name: String?): Unit &#123;</div><div class="line">    if (name != null)</div><div class="line">        println(&quot;Hello $&#123;name&#125;&quot;)</div><div class="line">    else</div><div class="line">        println(&quot;Hi there!&quot;)</div><div class="line">    // `return Unit` or `return` is optional</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Unit 返回值也可以省略，例如下面这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fun printHello(name: String?) &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="单表达式函数"><a href="#单表达式函数" class="headerlink" title="单表达式函数"></a>单表达式函数</h3><p>当函数只返回单个表达式时，大括号可以省略，并在 = 后面定义函数体：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fun double(x: Int): Int = x*2</div></pre></td></tr></table></figure>
<p>如果进一步精简，还可以写成如下的方式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fun double(x: Int) = x * 2</div></pre></td></tr></table></figure>
<h3 id="变长参数"><a href="#变长参数" class="headerlink" title="变长参数"></a>变长参数</h3><p>函数的参数(通常是最后一个参数)可以用 vararg 修饰符进行标记，标记后,允许给函数传递可变长度的参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">fun asList&lt;T&gt;(vararg ts: T): List&lt;T&gt; &#123;</div><div class="line">	val result = ArrayList&lt;T&gt;()</div><div class="line">	for (t in ts)</div><div class="line">		result.add(t)</div><div class="line">	return result</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">val list = asList(1, 2, 3)</div></pre></td></tr></table></figure>
<p>可变函数只有一个参数可以被标注为 vararg 。加入vararg并不是列表中的最后一个参数,那么后面的参数需要通过命名参数语法进行传值,再或者如果这个参数是函数类型,就需要通过lambda法则。</p>
<p>当调用变长参数的函数时，我们可以一个一个的传递参数，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">asList(1, 2, 3)</div></pre></td></tr></table></figure>
<p>或者我们要传递一个 array 的内容给函数，那么就可以使用 * 前缀操作符：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">val a = array(1, 2, 3)</div><div class="line">val list = asList(-1, 0, *a, 4)</div></pre></td></tr></table></figure>
<h3 id="函数范围"><a href="#函数范围" class="headerlink" title="函数范围"></a>函数范围</h3><p>Kotlin 中可以在文件顶级声明函数，这就意味者你不用像在Java,C#或是Scala一样创建一个类来持有函数。除了顶级函数，Kotlin 函数可以声明为局部的，作为成员函数或扩展函数。</p>
<p>Kotlin 支持局部函数，比如在一个函数包含另一函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">fun dfs(graph: Graph) &#123;</div><div class="line">  fun dfs(current: Vertex, visited: Set&lt;Vertex&gt;) &#123;</div><div class="line">    if (!visited.add(current)) return</div><div class="line">    for (v in current.neighbors)</div><div class="line">      dfs(v, visited)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  dfs(graph.vertices[0], HashSet())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，局部函数可以访问外部函数的局部变量(比如闭包)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">fun dfs(graph: Graph) &#123;</div><div class="line">	val visited = HashSet&lt;Vertex&gt;()</div><div class="line">	fun dfs(current: Vertex) &#123;</div><div class="line">		if (!visited.add(current)) return </div><div class="line">		for (v in current.neighbors)</div><div class="line">			dfs(v)</div><div class="line">	&#125;</div><div class="line">	dfs(graph.vertices[0])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>局部函数甚至可以返回到外部函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">fun reachable(from: Vertex, to: Vertex): Boolean &#123;</div><div class="line">	val visited = HashSet&lt;Vertex&gt;()</div><div class="line">	fun dfs(current: Vertex) &#123;</div><div class="line">		if (current == to) return@reachable true</div><div class="line">		if (!visited.add(current)) return</div><div class="line">		for (v  in current.neighbors)</div><div class="line">			dfs(v)</div><div class="line">	&#125;</div><div class="line">	dfs(from)</div><div class="line">	return false</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h3><p>Kotlin和Java一样，还支持泛型函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fun sigletonArray&lt;T&gt;(item: T): Array&lt;T&gt; &#123;</div><div class="line">	return Array&lt;T&gt;(1, &#123;item&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="尾递归函数"><a href="#尾递归函数" class="headerlink" title="尾递归函数"></a>尾递归函数</h3><p>Kotlin 支持函数式编程的尾递归。这个允许一些算法可以通过循环而不是递归解决问题，从而避免了栈溢出。当函数被标记为 tailrec 时，编译器会优化递归，并用高效迅速的循环代替它。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tailrec fun findFixPoint(x: Double = 1.0): Double </div><div class="line">	= if (x == Math.cos(x)) x else findFixPoint(Math.cos(x))</div></pre></td></tr></table></figure>
<p>这段代码计算的是数学上的余弦不动点。Math.cos 从 1.0 开始不断重复，直到值不变为止，结果是 0.7390851332151607。上面的代码等效于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">private fun findFixPoint(): Double &#123;</div><div class="line">	var x = 1.0</div><div class="line">	while (true) &#123;</div><div class="line">		val y = Math.cos(x)</div><div class="line">		if ( x == y ) return y</div><div class="line">		x = y</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注：使用 tailrec 修饰符必须在最后一个操作中调用自己。在递归调用代码后面是不允许有其它代码的，并且也不可以在 try/catch/finall 块中进行使用。当前的尾递归只在 JVM 的后端中可以用。</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">  var a = 1</div><div class="line">  // 使用变量名作为模板:</div><div class="line">  val s1 = &quot;a is $a&quot;</div><div class="line"></div><div class="line">  a = 2</div><div class="line">  // 使用表达式作为模板:</div><div class="line">  val s2 = &quot;$&#123;s1.replace(&quot;is&quot;, &quot;was&quot;)&#125;, but now is $a&quot;</div><div class="line">  println(s2)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">fun maxOf(a: Int, b: Int): Int &#123;</div><div class="line">    if (a &gt; b) &#123;</div><div class="line">        return a</div><div class="line">    &#125; else &#123;</div><div class="line">        return b</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">    println(&quot;max of 0 and 42 is $&#123;maxOf(0, 42)&#125;&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的表达式可简写为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fun maxOf(a: Int, b: Int) = if (a &gt; b) a else b</div><div class="line"></div><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">    println(&quot;max of 0 and 42 is $&#123;maxOf(0, 42)&#125;&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="值检查与自动转换"><a href="#值检查与自动转换" class="headerlink" title="值检查与自动转换"></a>值检查与自动转换</h2><p>使用 is 操作符检查一个表达式是否是某个类型的实例。如果对不可变的局部变量或属性进行过了类型检查，就没有必要明确转换：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">fun getStringLength(obj: Any): Int? &#123;</div><div class="line">  if (obj is String) &#123;</div><div class="line">    // obj 将会在这个分支中自动转换为 String 类型</div><div class="line">    return obj.length</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // obj 在种类检查外仍然是 Any 类型</div><div class="line">  return null</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">  fun printLength(obj: Any) &#123;</div><div class="line">    println(&quot;&apos;$obj&apos; string length is $&#123;getStringLength(obj) ?: &quot;... err, not a string&quot;&#125; &quot;)</div><div class="line">  &#125;</div><div class="line">  printLength(&quot;Incomprehensibilities&quot;)</div><div class="line">  printLength(1000)</div><div class="line">  printLength(listOf(Any()))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>Kotlin简化了for循环的方式，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">  val items = listOf(&quot;apple&quot;, &quot;banana&quot;, &quot;kiwi&quot;)</div><div class="line">  for (item in items) &#123;</div><div class="line">    println(item)</div><div class="line">  &#125;</div><div class="line">  //或者使用下面的方式</div><div class="line">  //for (index in items.indices) &#123;</div><div class="line">  // println(&quot;item at $index is $&#123;items[index]&#125;&quot;)</div><div class="line">  //&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">  val items = listOf(&quot;apple&quot;, &quot;banana&quot;, &quot;kiwi&quot;)</div><div class="line">  var index = 0</div><div class="line">  while (index &lt; items.size) &#123;</div><div class="line">    println(&quot;item at $index is $&#123;items[index]&#125;&quot;)</div><div class="line">    index++</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ranges"><a href="#ranges" class="headerlink" title="ranges"></a>ranges</h2><p>检查 in 操作符检查数值是否在某个范围内：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">  val x = 10</div><div class="line">  val y = 9</div><div class="line">  if (x in 1..y+1) &#123;</div><div class="line">      println(&quot;fits in range&quot;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>检查数值是否在范围外：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">  val list = listOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</div><div class="line"></div><div class="line">  if (-1 !in 0..list.lastIndex) &#123;</div><div class="line">    println(&quot;-1 is out of range&quot;)</div><div class="line">  &#125;</div><div class="line">  if (list.size !in list.indices) &#123;</div><div class="line">    println(&quot;list size is out of valid list indices range too&quot;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在范围内迭代：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">  for (x in 1..5) &#123;</div><div class="line">    print(x)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者使用步进：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">  for (x in 1..10 step 2) &#123;</div><div class="line">    print(x)</div><div class="line">  &#125;</div><div class="line">  for (x in 9 downTo 0 step 3) &#123;</div><div class="line">    print(x)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>对一个集合进行迭代：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">  val items = listOf(&quot;apple&quot;, &quot;banana&quot;, &quot;kiwi&quot;)</div><div class="line">  for (item in items) &#123;</div><div class="line">    println(item)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 in 操作符检查集合中是否包含某个对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">  val items = setOf(&quot;apple&quot;, &quot;banana&quot;, &quot;kiwi&quot;)</div><div class="line">  when &#123;</div><div class="line">    &quot;orange&quot; in items -&gt; println(&quot;juicy&quot;)</div><div class="line">    &quot;apple&quot; in items -&gt; println(&quot;apple is fine too&quot;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用lambda表达式过滤和映射集合：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">fun main(args: Array&lt;String&gt;) &#123;</div><div class="line">  val fruits = listOf(&quot;banana&quot;, &quot;avocado&quot;, &quot;apple&quot;, &quot;kiwi&quot;)</div><div class="line">  fruits</div><div class="line">    .filter &#123; it.startsWith(&quot;a&quot;) &#125;</div><div class="line">    .sortedBy &#123; it &#125;</div><div class="line">    .map &#123; it.toUpperCase() &#125;</div><div class="line">    .forEach &#123; println(it) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>附：<a href="http://www.kotlindoc.cn/FunctionsAndLambdas/Higher-OrderFunctionsAndLambdas.html" target="_blank" rel="external">高阶函数和lambda表达式</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在今年Google IO大会上Google已经明确kotlin作为为Android第一官方语言的地位。我相信Google的决意，就像当初毫不犹豫的抛弃eclipse转向as，kotlin已经是不可避免的大势所趋了。再加上Kotlin与java代码完全兼容，所以从Java转向
    
    </summary>
    
      <category term="Android" scheme="http://www.xiangzhihong.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.xiangzhihong.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序尝鲜一个月现状分析</title>
    <link href="http://www.xiangzhihong.com/2017/02/10/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B0%9D%E9%B2%9C%E4%B8%80%E4%B8%AA%E6%9C%88%E7%8E%B0%E7%8A%B6%E5%88%86%E6%9E%90/"/>
    <id>http://www.xiangzhihong.com/2017/02/10/微信小程序尝鲜一个月现状分析/</id>
    <published>2017-02-09T16:00:00.000Z</published>
    <updated>2017-07-09T12:50:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>曾记得在微信小程序还没有上线的时候，大家都是翘首以待，希望在张小龙，在企鹅的带领下，走出区别于原生开发的另一条移动开发的道路，我也是一直关注着，知道1月9号，微信小程序终于对外开放了，作为第一批内测开发者，我也是在第一时间启动了微信小程序的开发。<br>其开发也确实相对简单，不过体验上嘛，可能和原生有一些差距，体验上有点类似于企业的x5渲染的webview。不过因为其高度依赖于微信这个平台，也限制了其开放性，所以我当时在csdn的内部群预言：微信小程序不会完全取代原生app，甚至都不可能威胁到原生app。<br>那么现在一个多月过去了，现状如何呢？</p>
<h1 id="微信小程序现状"><a href="#微信小程序现状" class="headerlink" title="微信小程序现状"></a>微信小程序现状</h1><p>就在过年之前，其实好多之前的微信小程序都悄悄下线了，诸如最早入住微信的ota，在过完年不就都纷纷下线，各种股票交易类的小程序也在证监会的要求下纷纷暂停服务。究其原因，就是其转换率并不高。<br>你是否有这样的困扰：手机里装了几十个甚至上百个App，但平均每天都会用到的数量屈指可数，又或者地图、外卖等同类App不得不装好几个换着用，明知使用频率不高却耗电、占内存就是删不得？也因为有这样的用户痛点，当“微信之父”张小龙对外阐释小程序是一个不需要下载安装就可使用的用完即走应用后一直备受关注。<br>2017微信公开课PRO版上，张小龙也举了两个小程序的场景化例子，一个是在公交站，扫一下站牌的二维码就可以了解下一辆公交车的到站时间；一个是在汽车站，扫一下二维码就可以购买车票而不需要排长队。<br>这样的示例已经说明了微信团队对小程序的定位和理解，明显看出重心是要深入开拓线下的场景运营。现在不管是在地铁、公交站等线下场景，许多广告牌中都已加入了二维码等待被“扫一扫”。但张小龙认为，对企业来说，广告中嵌入二维码，被扫后应该能直接触达企业服务而不是消息订阅。<br>他强调，更多希望小程序的启动来自于扫二维码。并且，小程序坚持去中心化的思路，不会有类似应用商店的分类、排行和推荐等功能，也不能推送消息，不会有订阅关系和粉丝机制。<br>值得注意的是，尽管微信官方反复说明小程序并非应用商店的复刻版，但关于小程序可能冲击原有App体系及应用市场的观点依然存在。原因在于，相比苹果iOS系统下App Store的一统江湖，国内的安卓应用市场因某些原因百花齐放，多个第三方应用商店并存。与此同时，流量分散、用户需求和习惯的变化加上技术变迁，都使得应用市场本身面临转型。<br>就在笔者写这篇散文的时候，谷歌正式推出了“谷歌小程序（Android Instant Apps）”。<br>那么这里要八卦一些了，什么是谷歌小程序（Android Instant Apps）？</p>
<h1 id="谷歌小程序"><a href="#谷歌小程序" class="headerlink" title="谷歌小程序"></a>谷歌小程序</h1><p>大家知道，不管是谷歌小程序还是微信小程序，都是一种轻量级的方法，其目的是：运行Android应用而无需安装、从任意位置访问应用。<br>在去年5月的Google I/O大会上，谷歌用了大约10分钟时间为我们介绍了Android Instant Apps，可理解为安卓“即时应用”，也就是无需安装可直接使用的应用，显然这跟微信推出的小程序非常类似，昨天，谷歌正式上线了一小批应用来测试这项功能。<br>上线的几款支持应用包括了BuzzFeed、Wish、Periscope以及Viki，Android Instant Apps并不是简单的网页浏览形式，通过Android Instant Apps，你其实就是打开了这个App的“简洁版”，经过一些媒体的测试，Android Instant Apps的加载速度也要比同等状况下的网页形式要快。<br>谷歌小程序工作原理：将App模块化了之后，Google Play只会在你点击了链接之后下载所需的那部分功能，这样你就相当于在一个简洁的模式下使用该App。对于开发者来说，他们也不必为此专门再去开发一个独立的App，它使用的还是同样的Android API和同样的源代码，开发者们只需要在原有App的基础上进行一下升级，接入Android Instant Apps的功能就可以了，对于一些开发者们来说，这个过程可能都用不了一天。<br>从这方面来说，由于google的全球影响力，加之在系统级别的多年耕耘，优势相对于微信小程序那可不是一点点。</p>
<h1 id="微信小程序的几大痛点"><a href="#微信小程序的几大痛点" class="headerlink" title="微信小程序的几大痛点"></a>微信小程序的几大痛点</h1><p>随着第一轮玩家激情褪去后的纷纷退场，以及第二批第三批玩家的涌入，为什么小程序的存活时间并不长？这不得不说说微信小程序当前存在的几个问题：</p>
<h2 id="bug较多"><a href="#bug较多" class="headerlink" title="bug较多"></a>bug较多</h2><p>这是不得不说的话题，小程序为了实现在苹果发布十周年推出具有“颠覆”的小程序，其实是带了很多bug上线的，即使到现在，开发人员依然会遇到很多问题。<br>对于人力充足的大公司，有专门的人来参与到小程序的开发维护中;而对于小公司，他们没有足够的人力投入，他们可能一半时间来维护其他平台产品另一半时间来开发小程序，这个时候如果碰到几个小程序的bug，基本上是吃不消的。</p>
<h2 id="产品定位"><a href="#产品定位" class="headerlink" title="产品定位"></a>产品定位</h2><p>举一个简单的例子，比如以内容为主的app，我们常常会向用户推送一些消息来提高点击率，但是在小程序里，这条路是死的。对于“今日头条”推出小程序真心搞不太懂，如此高频使用的产品为什么要放到小程序上，先不说重大新闻你怎么推送，那么对于普通用户的爱好如何进行个性化推荐?大概也是跟风吧。</p>
<h2 id="安全风险"><a href="#安全风险" class="headerlink" title="安全风险"></a>安全风险</h2><p>1月13日，证监会担心金融类小程序涉及客户隐私和安全问题，要求金融类的小程序只能进行产品的展示，不能进行诸如申购、赎回、转换、定投、开户等功能。那这就很蛋疼了，你只能在小程序上看最新的股价、咨询，你要想交易那对不起，你可以另跳链接，我们知道微信不支持外链的，那好吧，我得回到APP上，进行交易。那么问题来了，我APP啥都有了，我还要小程序干嘛，所以，很多基金、证券类的小程序直接停止服务。</p>
<h2 id="开发市场"><a href="#开发市场" class="headerlink" title="开发市场"></a>开发市场</h2><p>在小程序开放之前，微信小程序的群满天飞，首先是ios、android的开发者加入到了小程序开发群中，然后是PM也加入了进来，再到后排搞PHP的也加入了进来。小程序开发成本并不高，把官方文档的代码复制过来基本就能用，所以大家都来一起搞。其结果是其转换率并不高，其市场定位只能成为Android，ios的补充和附属品。</p>
<h1 id="小程序未来怎么走"><a href="#小程序未来怎么走" class="headerlink" title="小程序未来怎么走"></a>小程序未来怎么走</h1><p>独立互联网评论人洪波此前接受《每日经济新闻》记者采访时也认为，小程序毕竟是一个新东西，开发者可能会按照手机应用的流程去做小程序，这可能也是早期避免不了的。但小程序并不是免安装的手机应用，它最适合的场景是有一个明显的触发契机，大家需要对小程序应该怎么做、通过哪些场景触发等有个重新而且深入的思考。<br>虽然在推出当天，各类微信小程序一窝蜂的上线，但从推出后1个月的情况看，或许作为一个新思路的产品，没持续引发疯狂跟风反是个好信号，毕竟不管是对用户还是开发者来说，复制一个App生态体系意义不大，而思路和标准的改变跟产品开发都不能一蹴而就。<br>的确，作为线上的用户来说，小程序的设计似乎是如此不便，但换个角度来看，小程序或许本来就不是为被用户找到而设计的，或者说，致力于“勾连线下”的小程序，本身存在的价值或许是在特定的场景下找到特定的用户。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;曾记得在微信小程序还没有上线的时候，大家都是翘首以待，希望在张小龙，在企鹅的带领下，走出区别于原生开发的另一条移动开发的道路，我也是一直关注
    
    </summary>
    
      <category term="小程序" scheme="http://www.xiangzhihong.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://www.xiangzhihong.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="微信" scheme="http://www.xiangzhihong.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>站在人工智能风口的Python程序员</title>
    <link href="http://www.xiangzhihong.com/2017/02/10/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BDPython/"/>
    <id>http://www.xiangzhihong.com/2017/02/10/人工智能Python/</id>
    <published>2017-02-09T16:00:00.000Z</published>
    <updated>2017-09-27T02:42:06.903Z</updated>
    
    <content type="html"><![CDATA[<p>嗯，就是那么霸道。两会刚刚结束，“人工智能”首次被列入政府工作报告，随之而来的是人工智能板块领跑大盘涨势，无疑，这一切将刺激人工智能在多个领域的全面发展。</p>
<p>大量融资的风口企业，绝对会把钱拿到招揽人才。而现在最流行的人工智能技术栈就是 TensorFlow 和 PyTorch，使用它们就是一份 Python 编程开发工作。一时间，python程序员成了人才市场的“抢手货”，工资待遇也水涨船高了。口说无凭，我们去工作搜索引擎jobui.com找看。一看吓一跳，首先是待遇啊：</p>
<p>images</p>
<p>最高待遇不过万不出奇啊！这还只是广州的情况，估计在北上深三个城市里，两者的差距还要大得多。除了待遇，跑到风口行业写Python，分分钟就是人工智能科学家的光环上身啊，估计大家都要跑得比西方记者还快了。</p>
<p>乐了Python程序员，苦的就是公司是Python技术栈的传统IT业务的企业了。就别提一般的小企业，连豆瓣、知乎这样的都大受冲击了。豆瓣的洪强宁，也跑去创业做人工智能相关的应用了……</p>
<p>没有人能够对抗趋势，风口企业这么有钱，能做的就只能是避开它们的锋芒。我觉得Python技术栈的企业应该考虑新的技术选型了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;嗯，就是那么霸道。两会刚刚结束，“人工智能”首次被列入政府工作报告，随之而来的是人工智能板块领跑大盘涨势，无疑，这一切将刺激人工智能在多个领域的全面发展。&lt;/p&gt;
&lt;p&gt;大量融资的风口企业，绝对会把钱拿到招揽人才。而现在最流行的人工智能技术栈就是 TensorFlow 和 
    
    </summary>
    
      <category term="杂谈" scheme="http://www.xiangzhihong.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://www.xiangzhihong.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
