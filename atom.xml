<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>向志洪</title>
  <subtitle>个人技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xiangzhihong.com/"/>
  <updated>2017-11-20T02:22:27.696Z</updated>
  <id>http://www.xiangzhihong.com/</id>
  
  <author>
    <name>xiangzhihong</name>
    <email>1044817967@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>腾讯前端面试题集锦</title>
    <link href="http://www.xiangzhihong.com/2017/10/16/%E8%85%BE%E8%AE%AF%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%86%E9%94%A6/"/>
    <id>http://www.xiangzhihong.com/2017/10/16/腾讯前端面试题集锦/</id>
    <published>2017-10-15T16:00:00.000Z</published>
    <updated>2017-11-20T02:22:27.696Z</updated>
    
    <content type="html"><![CDATA[<p>想要进入腾讯，首先会进行一些基础知识的考核，这些基础及时包括数据结构、算法、数据库、安全等方面，最后是关于性格和项目经验的问题。</p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>prototype和<strong>proto</strong>的关系是什么</li>
<li>meta viewport原理</li>
<li>域名收敛是什么</li>
<li>float和display：inline-block；的区别</li>
<li>前端优化策略列举</li>
<li>首屏、白屏时间如何计算</li>
<li>闭包</li>
<li>作用域链</li>
<li>ajax如何实现、readyState五中状态的含义</li>
<li>jsonp如何实现</li>
<li>怎么处理跨域</li>
<li>restful的method解释</li>
<li>get和post的区别</li>
<li>事件模型解释</li>
<li>编写一个元素拖拽的插件</li>
<li>编写一个contextmenu的插件</li>
<li>编写web端cookie的设置和获取方法</li>
<li>兼容ie６的水平垂直居中</li>
<li>兼容ie的事件封装</li>
<li>h5和原生android的优缺点</li>
<li>编写h5需要注意什么</li>
<li>xss和crsf的原理以及怎么预防</li>
<li>css优先级</li>
<li>如何实现点击radio的文字描述控制radio的状态（通过label实现）</li>
<li>delegate如何实现</li>
<li>jsonp有什么安全问题？为什么有这些安全问题？</li>
<li>单链表和双向链表的区别？</li>
<li>有用过reactjs？简单说一下其生命周期方法</li>
</ol>
<h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p>如何了解这些前端的框架？如angular，react，vue。</p>
<h3 id="angularjs"><a href="#angularjs" class="headerlink" title="angularjs"></a>angularjs</h3><ol>
<li>angular的directive怎么写</li>
<li>angular的脏检查（双向绑定）是如何实现的</li>
<li>依赖注入如何实现</li>
<li>scope如何实现</li>
<li>$parse模块如何实现（主要自己写了一个类似的库）</li>
</ol>
<h3 id="react"><a href="#react" class="headerlink" title="react"></a>react</h3><ol>
<li>react在setState后发生了什么，请结合源码说说你的理解。</li>
<li>flux解释。</li>
<li>说说你对React框架的理解。</li>
</ol>
<h3 id="requirejs"><a href="#requirejs" class="headerlink" title="requirejs"></a>requirejs</h3><ol>
<li>amd和cmd区别，怎么了解到这些区别的，是否是去看了规范。</li>
<li>requirejs那些经常用的方法，然后对其进行解释。</li>
</ol>
<h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><ol>
<li>Buffer模块是干什么的。</li>
<li>Stream是什么，使用的两种模式。</li>
<li>http模块如何将异步处理方式实现成同步处理方式。</li>
</ol>
<h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><ol>
<li>utf8和gbk的区别。</li>
<li>知道页面上某个点的坐标，如何获取该坐标上的所有元素。</li>
<li>angular、react和jQuery适合哪些应用场景（建议查看各个框架产生背景）。</li>
<li>7点15分小于180度的夹角是多少。</li>
<li>如何实现大数相加。</li>
<li>给５升和６升的水杯如何倒出３升的水。</li>
<li>一班喜欢足球的人60%，喜欢排球的70%，喜欢篮球的80%，求喜欢足球和排球的占多少。</li>
<li>前端异常监测如何实现。</li>
<li>直播点赞按钮的冒泡功能如何实现。</li>
<li>js的uglify如何实现。</li>
</ol>
<h3 id="优化方面"><a href="#优化方面" class="headerlink" title="优化方面"></a>优化方面</h3><ol>
<li>前端工程化方面做了哪些东西，怎么做。</li>
</ol>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>什么二叉树，从一堆大数中选出满足条件的数要求最快。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想要进入腾讯，首先会进行一些基础知识的考核，这些基础及时包括数据结构、算法、数据库、安全等方面，最后是关于性格和项目经验的问题。&lt;/p&gt;
&lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础
    
    </summary>
    
      <category term="前端" scheme="http://www.xiangzhihong.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://www.xiangzhihong.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>一个ClassLoader引起的JNI链接错误</title>
    <link href="http://www.xiangzhihong.com/2017/10/09/%E4%B8%80%E4%B8%AAClassLoader%E5%BC%95%E8%B5%B7%E7%9A%84JNI%E9%93%BE%E6%8E%A5%E9%94%99%E8%AF%AF/"/>
    <id>http://www.xiangzhihong.com/2017/10/09/一个ClassLoader引起的JNI链接错误/</id>
    <published>2017-10-08T16:00:00.000Z</published>
    <updated>2017-11-20T02:21:18.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Android插件化工程具有减少方法数和包大小，易于扩展等优势，深得大型工程的青睐，但同时插件化也会引起一些意想不到的麻烦。我们最近在做的插件工程就遇到了一个诡异的JNI链接错误。</p>
<p>我们的插件工程作为主工程的具体业务，主工程提供了基础的类库和工具，插件工程有自己的ClassLoader，并把主工程的ClassLoader设为自己的父ClassLoader，通过双亲委托，插件工程就可以访问主工程中的类。在主工程中有一个类库，有JNI方法，但为了减少主工程的包大小，so文件由插件在用到时自己下载和加载。</p>
<p>而这种加载方式，出现了诡异的UnsatisfiedLinkError错误。我们首先检查了System.load方法发现并没有出错，又查看了进程的内存映射信息，发现so文件确实已经加载，但调用JNI方法也确实一直出错。待排查了时序等相关情况后，还是不成功，于是我们只得求助于系统源码，希望能从源码中找到答案，以Android N为例，我们开始了源码分析过程。</p>
<h1 id="so加载流程分析"><a href="#so加载流程分析" class="headerlink" title="so加载流程分析"></a>so加载流程分析</h1><p>so既然要先加载才能用，那我们就先来看so是怎么加载的，先来分析System.load方法。<br><img src="http://img.blog.csdn.net/20171106091841055?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>方法很简单，直接调用了Runtime类的load方法，传入了so的名称和当前的ClassLoader，再来看这个方法。<br><img src="http://img.blog.csdn.net/20171106092114044?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>可以看到，load校验了参数后调用了doLoad方法，doLoad取得ldLibraryPath和dexPath后调用了native层的nativeLoad函数。继续看nativeLoad函数。<br><img src="http://img.blog.csdn.net/20171106103122578?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>还是很简单的函数，设置完LdLibraryPath后，调用JavaVM的LoadNtiveLibrary函数，继续看。<br><img src="http://img.blog.csdn.net/20171106103415424?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20171106103426253?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>该函数较长，但逻辑还是很清晰的，我们只列出了关键代码，libraries保存了一个以so路径和SharedLibrary对象为记录的Map，保存了当前所有已经加载的so。首先从libraries中查找记录，如果有说明该so已经加载过，再判断和so关联的ClassLoader是不是当前的ClassLoader，如果不是，返回false，这说明同一个路径的so只能被一个ClassLoader加载，如果没找到记录，说明该so没有加载过，则通过dlopen打开该so，保存相关信息到SharedLibrary对象中，把SharedLibrary添加到libraries中，用dlsym查找JNI_OnLoad函数，如果找到了则执行该函数。 在看代码时第一反应是会不会isSameObject判断这里有问题，so已经被另一个ClassLoader给加载了，但转念一想，如果这里有问题那么load的时候会直接报错，而不是在执行的时候才报错。所以so的加载流程没有找到有问题的点，那么我们再看执行流程。</p>
<h1 id="native方法执行流程分析"><a href="#native方法执行流程分析" class="headerlink" title="native方法执行流程分析"></a>native方法执行流程分析</h1><p>我们知道，在ART环境下，类的方法都会用ArtMethod表示，而ArtMethod的PtrSizedFields字段保存了该方法的跳转地址。<br><img src="http://img.blog.csdn.net/20171106104030852?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>其中entry_point_from<em>jni</em>就是native函数执行时的跳转地址，那么这个地址是什么呢？其实这个地址是Class在加载的时候设置的，我们来看下代码：<br><img src="http://img.blog.csdn.net/20171106104112000?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>ClassLinker负责在ART中加载Class，通过FindClass-&gt;DefineClass-&gt;LoadClass-&gt;LoadClassMembers，会解析出ArtMethod，最后通过LinkCode对ArtMethod的跳转地址进行赋值，这里我们只看native方法的情况，执行了UnregisterNative函数。<br><img src="http://img.blog.csdn.net/20171106104344854?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>SetEntryPointFromJni就是对entry_point_from<em>jni</em>做了赋值，值是通过GetJniDlsymLookupStub()获得，就是一个artjnidlsymlookupstub函数地址，到这里我们知道类加载后其native方法地址被设置成了artjnidlsymlookupstub这个入口函数，当native方法被执行时，会调用这个入口函数执行，我们来看这个函数。<br><img src="http://img.blog.csdn.net/20171106104523247?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>art_jni_dlsym_lookup_stub在汇编中定义，与平台相关，我们用arm64平台代码作为例子。<br><img src="http://img.blog.csdn.net/20171106104624924?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20171106104731125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>可以看到这个函数又跳转到了artFindNativeMethod函数。<br><img src="http://img.blog.csdn.net/20171106104943470?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>该函数首先查询native函数的地址，查到后会通过RegisterNative设置给ArtMethod，这样以后就ArtMethod就可以直接跳转到native层的地址，而不用每次都经过该函数，RegisterNative同样调用了SetEntryPointFromJni来设置跳转地址，接下来看FindCodeForNativeMethod函数。<br><img src="http://img.blog.csdn.net/20171106105044641?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>这里又看到了熟悉的libraries，前边分析so加载部分已经知道它保存了所有已经加载的so，所以这就是从已经加载的so里查找native函数，如果没找到，则抛出UnsatisfiedLinkError。我们再来看看FindNativeMethod。<br><img src="http://img.blog.csdn.net/20171106105137715?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20171106105220501?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>FindSymbol就是调用dlsym获取native函数的地址，所以到此native函数的地址就真正的找到了，但是我们注意到了其中的一个判断，library-&gt;GetClassLoader()==declaring_class_loader，也就是和so关联的ClassLoader要和当前的ClassLoader是同一个才行，不然会放弃查找，到此我们的疑惑也就解开了，因为JAVA层的代码是在主工程的ClassLoader里，而加载so用的是插件的ClassLoader，两个ClassLoader不相等，所以在这里放弃了查找而抛出了异常。</p>
<p>#解决方案<br>知道了原因解决自然也就容易了，只要用同一个ClassLoader加载类和so就行了，因为Java层的ClassLoader是变不了的，所以我们就改变加载so的ClassLoader：<br>1、使用主工程中的类来加载so。<br>2、如果主工程不好添加代码的话，我们也可以在插件里改变Runtime.load()所使用的ClassLoader，但是Runtime的load方法只有一个参数的公开方法，传ClassLoader的方法是私有的，所以我们只能通过反射去传入主工程的ClassLoader。<br><img src="http://img.blog.csdn.net/20171106105353900?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>附件：<a href="http://blog.csdn.net/xiangzhihong8/article/details/50854001" target="_blank" rel="external">java基础之反射</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Android插件化工程具有减少方法数和包大小，易于扩展等优势，深得大型工程的青睐，但同时插件化也会引起一些意想不到的麻烦。我们最近在做的插
    
    </summary>
    
      <category term="Android" scheme="http://www.xiangzhihong.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.xiangzhihong.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 2.5新特性介绍</title>
    <link href="http://www.xiangzhihong.com/2017/09/16/Vue.js%202.5%E6%96%B0%E7%89%B9%E6%80%A7%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.xiangzhihong.com/2017/09/16/Vue.js 2.5新特性介绍/</id>
    <published>2017-09-15T16:00:00.000Z</published>
    <updated>2017-11-20T02:17:31.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><p>TypeScript是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。2012年十月份，微软发布了首个公开版本的TypeScript，在2013年6月19日，微软发布了TypeScript 0.9的正式版本，到目前为止，TypeScript已发展到2.x版本，相关资料可以查看<a href="https://www.w3cschool.cn/typescript/typescript-tutorial.html" target="_blank" rel="external">W3C TypeScript入门</a></p>
<h2 id="安装TypeScript"><a href="#安装TypeScript" class="headerlink" title="安装TypeScript"></a>安装TypeScript</h2><p>安装TypeScript主要有两种方式：</p>
<ul>
<li>通过npm方式安装（Node.js包管理器）</li>
<li>安装TypeScript的Visual Studio插件<br>说明：Visual Studio2016和Visual Studio 2013 Update 2默认包含了TypeScript。npm安装的命令如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g typescript</div></pre></td></tr></table></figure>
<p>##创建TypeScript文件<br>在编辑器中新建一个greeter.ts文件，并输入以下JavaScript代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function greeter(person) &#123;</div><div class="line">    return &quot;Hello, &quot; + person;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var user = &quot;Jane User&quot;;</div><div class="line"></div><div class="line">document.body.innerHTML = greeter(user);</div></pre></td></tr></table></figure>
<p>上面的代码直接输出“hello Jane User”。</p>
<h2 id="编译代码"><a href="#编译代码" class="headerlink" title="编译代码"></a>编译代码</h2><p>在在命令行中运行TypeScript编译器即可编译代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tsc greeter.ts</div></pre></td></tr></table></figure>
<h2 id="运行TypeScript-web程序"><a href="#运行TypeScript-web程序" class="headerlink" title="运行TypeScript web程序"></a>运行TypeScript web程序</h2><p>现在在greeter.html中输入以下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;&lt;title&gt;TypeScript Greeter&lt;/title&gt;&lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;script src=&quot;greeter.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>在浏览器中打开greeter.html即可去运行第一个TypeScript web应用程序demo！<br>关于更多的介绍请查看<a href="https://www.w3cschool.cn/typescript/typescript-tutorial.html" target="_blank" rel="external">TypeScript</a></p>
<h1 id="Vue-js-2-5新特性"><a href="#Vue-js-2-5新特性" class="headerlink" title="Vue.js 2.5新特性"></a>Vue.js 2.5新特性</h1><p>Vue 2.5 Level E 已发布，在原来2.x的基础上做了很多相应改进和对 bug 的修复，目前 2.5 系列最新的版本为 2.5.2。如果读者希望全面的了解Vue 2.5的内容，可以通过查看<a href="https://github.com/vuejs/vue/releases/tag/v2.5.0" target="_blank" rel="external">Vue 2.5发布说明</a>来获取详细的介绍。针对官方的介绍和网上搜集的资料，本次2.5版本主要做了如下几方面的改进：</p>
<ul>
<li>更好的 TypeScript 集成</li>
<li>更好的错误处理</li>
<li>更好地支持单文件组件中的功能组件</li>
<li>与环境无关的服务端渲染</li>
</ul>
<p>读者可以通过下面的链接查看原文介绍：<br><strong>TypeScript 声明改进</strong><br>further improve Vue type declarations for canonical usage (<a href="https://github.com/vuejs/vue/pull/6391" target="_blank" rel="external">#6391</a>) <a href="https://github.com/vuejs/vue/commit/db138e2254d71f6b96e033acf66ba43ad269841a" target="_blank" rel="external">db138e2</a></p>
<p><strong>错误处理和报告</strong><br>improve error handling with new errorCaptured hook <a href="https://github.com/vuejs/vue/commit/b3cd9bc3940eb1e01da7081450929557d9c1651e" target="_blank" rel="external">b3cd9bc [Details]</a></p>
<p>improve template expression error message <a href="https://github.com/vuejs/vue/commit/e38d0067521eee85febedc5f3ed3c24b5454c3a9" target="_blank" rel="external">e38d006</a>, closes <a href="https://github.com/vuejs/vue/issues/6771" target="_blank" rel="external">#6771</a></p>
<p>improve option type checks <a href="https://github.com/vuejs/vue/commit/b7105ae8c9093e36ec89a470caa3b78bda3ef467" target="_blank" rel="external">b7105ae</a></p>
<p><strong>功能组件</strong><br>compiled templates for functional component support <a href="https://github.com/vuejs/vue/commit/ea0d227d2ddfa5fc5e1112acf9cd485b4eae62cb" target="_blank" rel="external">ea0d227</a></p>
<p>scoped CSS support for functional components <a href="https://github.com/vuejs/vue/commit/050bb33f9b02589357c037623ea8cbf8ff13555b" target="_blank" rel="external">050bb33</a></p>
<p><strong>服务器端渲染</strong></p>
<p>renderToString now returns a Promise if no callback is passed <a href="https://github.com/vuejs/vue/commit/f881dd175a6764f6f80077df20f950dba63ca447" target="_blank" rel="external">f881dd1</a>, closes <a href="https://github.com/vuejs/vue/issues/6160" target="_blank" rel="external">#6160</a></p>
<p>add shouldPrefetch option (same signature as shouldPreload) <a href="https://github.com/vuejs/vue/commit/7bc899ce0ec10be3fbd4bd7e78b66dd357249c81" target="_blank" rel="external">7bc899c</a>, closes <a href="https://github.com/vuejs/vue/issues/5964" target="_blank" rel="external">#5964</a></p>
<p>auto-remove initial state embed script if in production (<a href="https://github.com/vuejs/vue/pull/6763" target="_blank" rel="external">#6763</a>) <a href="https://github.com/vuejs/vue/commit/2d32b5d1b663fa331ec256b73e937af15eb6e3d5" target="_blank" rel="external">2d32b5d</a>, closes <a href="https://github.com/vuejs/vue/issues/6761" target="_blank" rel="external">#6761</a></p>
<p>now ships an environment-agnostic build of the server renderer in vue-server-renderer/basic.jsc<a href="https://github.com/vuejs/vue/commit/c5d0fa0503631b53338e5255bc8640da4b2fd4cb" target="_blank" rel="external">5d0fa0</a> <a href="https://gist.github.com/yyx990803/9bdff05e5468a60ced06c29c39114c6b#environment-agnostic-ssr" target="_blank" rel="external">Details</a></p>
<h2 id="TypeScript改进"><a href="#TypeScript改进" class="headerlink" title="TypeScript改进"></a>TypeScript改进</h2><p>自Vue2.0发布以来，一直有开发者提出请求，希望能更好地集成TypeScript。从那时起，我们已经为大多数核心库（vue，vue - routervuex）加入了官方的TypeScript类型声明。然而，当使用开箱即用的Vue API时，目前的集成还是有所欠缺。例如：TypeScript不能轻易地推断出Vue使用的默认基于对象的API中的this类型。为了使我们的Vue代码与TypeScript更好地协作，我们需要使用vue-class-component装饰器，它允许我们使用基于类的语法来写Vue组件。</p>
<p>对于喜欢基于类的API的用户，这可能够好了，但还是有点不足，只是为了类型判断，用户就得使用不同的API。这也使得现有的Vue代码库迁移到TypeScript更加困难。</p>
<p>今年的早些时候，TypeScript引入了一些新特性，能使TypeScript更好地理解基于对象字面量的API，这也使得改进Vue的类型声明更具可能。来自TypeScript团队的Daniel Rosenwasser发起了一个雄心勃勃的PR计划。使用TypeScript后，将会有如下的好处：</p>
<ul>
<li>使用默认的Vue API时，对this的正确类型推断。在单文件组件中同样有效！</li>
<li>基于组件的props配置的的props的类型推断。</li>
<li>更重要的是，这些改进也会使原生JavaScript用户受益！，如果你正在使用VSCode且安装了优秀的Vetur扩展，在Vue组件中使用原生JavaScript时，你会获得十分完善的自动补全提示甚至是类型提示！这是因为vue-language-server，这个分析Vue组件的内部包，可以利用TypeScript编译器来提取关于你代码的更多信息。此外，任何支持语言服务协议的的编辑器都可以利用vue-language-server来提供类似的功能。</li>
</ul>
<p>说明：注意：TypeScript 用户还应将以下包更新为最新版本从而兼容类型声明：vue-router，vuex，vuex-router-sync 和 vue-class-component。</p>
<p><img src="http://img.blog.csdn.net/20171017223855281?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h2><p>在2.4及更早版本中，通常使用全局 config.errorHandleroption 来处理应用程序中的意外错误。当然，还可以使用renderError 组件选项来处理渲染函数中的错误。</p>
<p>而在新版本中，vue引入了errorCaptured 钩子，具有此钩子的组件捕获其子组件树（不包括其自身）中的所有错误（不包括在异步回调中调用的那些）。这和React的思想是一致的。</p>
<p>要利用 errorCaputerd，可以封装一个通用组件，来包含其他的业务组件，来捕获业务组件内的异常，并做对应的展示处理。下面列一个官方给的简单示例，封装一个通用组件(ErrorBoundary)来包含和处理其他业务组件(another component)的异常。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Vue.component(&apos;ErrorBoundary&apos;, &#123;</div><div class="line">  data: () =&gt; (&#123; error: null &#125;),</div><div class="line">  errorCaptured (err, vm, info) &#123;    </div><div class="line">    this.error = `$&#123;err.stack&#125;\n\nfound in $&#123;info&#125; of component`</div><div class="line">    return false</div><div class="line">  &#125;,</div><div class="line">  render (h) &#123;    </div><div class="line">    if (this.error) &#123;      </div><div class="line">      return h(&apos;pre&apos;, &#123; style: &#123; color: &apos;red&apos; &#125;&#125;, this.error)</div><div class="line">    &#125;    </div><div class="line">    // ignoring edge cases for the sake of demonstration</div><div class="line">    return this.$slots.default[0]</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;error-boundary&gt;</div><div class="line">  &lt;another-component /&gt;</div><div class="line">&lt;/error-boundary&gt;</div></pre></td></tr></table></figure>
<p>errorCaputed参数传递主要有如下的特性：</p>
<ul>
<li>如果定义了全局的 errorHandler，所有的异常还是会传递给 errorHadnler，如果没有定义<br>errorHandler，这些异常仍然可以报告给一个单独的分析服务。</li>
<li>如果一个组件上通过继承或父组件定义了多个 errorCapured 钩子函数，这些钩子函数都会收到同样的异常信息。</li>
<li>可以在 errorCapured 钩子内 return false 来阻止异常传播，表示：该异常已经被处理，可忽略。而且，也会阻止其他的 errorCapured 钩子函数和全局的 errorHandler 函数触发这个异常。<h2 id="SFC-函数式组件"><a href="#SFC-函数式组件" class="headerlink" title="SFC 函数式组件"></a>SFC 函数式组件</h2></li>
</ul>
<p>通过 vue-loader v13.3.0 或以上版本，支持在单文件组件内定义一个“函数式组件”，且支持模板编译、作用域 CSS 和 热部署等功能。</p>
<p>函数式组件的定义，需要在 template 标签上定义 functional 属性来声明。且模板内的表达式的执行上下文是 函数式声明上下文，所以要访问组件的属性，需要使用 props.xxx 来获取。例子见下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;template functional&gt;</div><div class="line">  &lt;div&gt;&#123;&#123; props.msg &#125;&#125;&lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<h2 id="与环境无关的服务端渲染（SSR-环境）"><a href="#与环境无关的服务端渲染（SSR-环境）" class="headerlink" title="与环境无关的服务端渲染（SSR 环境）"></a>与环境无关的服务端渲染（SSR 环境）</h2><p>使用 vue-server-renderer 来构建 SSR 应用时，默认是需要一个 Node.js 环境的，使得一些像 php-v8js 或 Nashorn 这样的 JavaScript 运行环境下无法运行。v2.5 中对此进行了完善，使得上述环境下都可以正常运行 SSR 应用。</p>
<p>在 php-v8js 和 Nashorn 中，在环境的准备阶段需要模拟 global 和 process 全局对象，并且需要单独设置 process 的环境变量。需要设置 process.env.VUE_ENV 为 “server”，设置 process.env.NODE_ENV 为 “development” 或 “production”。</p>
<p>另外，在 Nashorn 中，还需要用 Java 原生的 timers 为 Promise 和 settimeout 提供一个 polyfill。官方给出了一个在 php-v8js 中的使用示例，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$vue_source = file_get_contents(&apos;/path/to/vue.js&apos;);</div><div class="line">$renderer_source = file_get_contents(&apos;/path/to/vue-server-renderer/basic.js&apos;);</div><div class="line">$app_source = file_get_contents(&apos;/path/to/app.js&apos;);</div><div class="line">$v8 = new V8Js();</div><div class="line">$v8-&gt;executeString(&apos;var process = &#123; env: &#123; VUE_ENV: &quot;server&quot;, NODE_ENV: &quot;production&quot; &#125;&#125;; this.global = &#123; process: process &#125;;&apos;);</div><div class="line">$v8-&gt;executeString($vue_source);</div><div class="line">$v8-&gt;executeString($renderer_source);</div><div class="line">$v8-&gt;executeString($app_source);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// app.js</div><div class="line">var vm = new Vue(&#123;</div><div class="line">  template: `&lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;`,</div><div class="line">  data: &#123;</div><div class="line">    msg: &apos;hello&apos;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// exposed by vue-server-renderer/basic.js</div><div class="line">renderVueComponentToString(vm, (err, res) =&gt; &#123;</div><div class="line">  print(res)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>Vue.js 这款渐进式的 JavaScript 框架自 2013 年发布至今，其简洁的语法设计、轻量快速的特点深受技术社区喜爱，在国内外都获得了非常广泛的应用及拓展，比如饿了么的开源组件库 Element UI 即是 根据Vue 开发的，而阿里巴巴的 Weex 与 Vue 也多有合作，而美团点评的mpVue也是比较出色的一款框架。</p>
<h1 id="v-on-修饰符"><a href="#v-on-修饰符" class="headerlink" title="v-on 修饰符"></a>v-on 修饰符</h1><h2 id="键值-key-自动修饰符"><a href="#键值-key-自动修饰符" class="headerlink" title="键值 key 自动修饰符"></a>键值 key 自动修饰符</h2><p>在 Vue v2.5 之前的版本中，如果要在 v-on 中使用没有内置别名的键盘键值，要么直接使用 keyCode 当修饰符（@keyup.13=”foo”），要么需要使用 config.keyCodes 来为键值注册别名。在 v2.5中，你可以直接使用合法的键值 key 值（参考MDN中的 KeyboardEvent.key）作为修饰符来串联使用它。如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input @keyup.page-down=&quot;onPageDown&quot;&gt;</div></pre></td></tr></table></figure>
<p>上述例子中，事件处理函数只会在 $event.key === ‘PageDown’ 时被调用。<br>注意：现有键值修饰符仍然可用。在IE9中，一些键值（.esc 和 方向键的 key）不是一致的值，如果要兼容 IE9，需要按 IE9 中内置的别名来处理。</p>
<h2 id="exact-修饰符"><a href="#exact-修饰符" class="headerlink" title=".exact 修饰符"></a>.exact 修饰符</h2><p>新增了一个 .exact 修饰符，该修饰符应该和其他系统修饰符(.ctrl, .alt, .shift and .meta)结合使用，可用用来区分一些强制多个修饰符结合按下才会触发事件处理函数。如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 当 Alt 或 Shift 被按下也会触发处理函数 --&gt;</div><div class="line">&lt;button @click.ctrl=&quot;onClick&quot;&gt;A&lt;/button&gt;</div><div class="line"></div><div class="line">&lt;!-- 只有当 Ctrl 被按下，才会触发处理函数 --&gt;</div><div class="line">&lt;button @click.ctrl.exact=&quot;onCtrlClick&quot;&gt;A&lt;/button&gt;</div></pre></td></tr></table></figure>
<h2 id="简化-Scoped-Slots-的使用"><a href="#简化-Scoped-Slots-的使用" class="headerlink" title="简化 Scoped Slots 的使用"></a>简化 Scoped Slots 的使用</h2><p>之前，如果要在 template 标签上使用 scope 属性定义一个 scoped slot，可以像下面这样定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;comp&gt;</div><div class="line">  &lt;template scope=&quot;props&quot;&gt;</div><div class="line">    &lt;div&gt;&#123;&#123; props.msg &#125;&#125;&lt;/div&gt;</div><div class="line">  &lt;/template&gt;</div><div class="line">&lt;/comp&gt;</div></pre></td></tr></table></figure>
<p>在 v2.5 中，scope 属性已被弃用（仍然可用，但是会爆出一个警告，就像本文文首的那样），我们使用 slot-scope 属性替代 scope 属性来表示一个 scoped slot，且 slot-scope 属性除了可以被用在 template 上，还可以用在标签元素和组件上。如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;comp&gt;</div><div class="line">  &lt;div slot-scope=&quot;props&quot;&gt;</div><div class="line">    &#123;&#123; props.msg &#125;&#125;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/comp&gt;</div></pre></td></tr></table></figure>
<p>注意：这次的调整，表示 slot-scope 已经是一个保留属性了，不能再被单独用在组件属性上了。</p>
<h2 id="Inject-新增默认值选项"><a href="#Inject-新增默认值选项" class="headerlink" title="Inject 新增默认值选项"></a>Inject 新增默认值选项</h2><p>本次调整中，Injections 可以作为可选配置，并且可以声明默认值。也可以用 from 来表示原属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">export default &#123;</div><div class="line">  inject: &#123;</div><div class="line">    foo: &#123;</div><div class="line">      from: &apos;bar&apos;,</div><div class="line">      default: &apos;foo&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>与属性类似，数组和对象的默认值需要使用一个工厂函数返回。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">export default &#123;</div><div class="line">  inject: &#123;</div><div class="line">    foo: &#123;</div><div class="line">      from: &apos;bar&apos;,</div><div class="line">      default: () =&gt; [1, 2, 3]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>附：<a href="http://blog.csdn.net/csdnnews/article/details/78252848" target="_blank" rel="external">美团小程序框架mpVue</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TypeScript&quot;&gt;&lt;a href=&quot;#TypeScript&quot; class=&quot;headerlink&quot; title=&quot;TypeScript&quot;&gt;&lt;/a&gt;TypeScript&lt;/h1&gt;&lt;p&gt;TypeScript是一种由微软开发的自由和开源的编程语言。它是JavaSc
    
    </summary>
    
      <category term="前端" scheme="http://www.xiangzhihong.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://www.xiangzhihong.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin极简教程(第一章 Kotlin简介)</title>
    <link href="http://www.xiangzhihong.com/2017/09/16/Kotlin%E6%9E%81%E7%AE%80%E6%95%99%E7%A8%8B(%E7%AC%AC%E4%B8%80%E7%AB%A0%20Kotlin%E7%AE%80%E4%BB%8B)/"/>
    <id>http://www.xiangzhihong.com/2017/09/16/Kotlin极简教程(第一章 Kotlin简介)/</id>
    <published>2017-09-15T16:00:00.000Z</published>
    <updated>2017-11-20T02:14:16.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-1-kotlin简史"><a href="#1-1-kotlin简史" class="headerlink" title="1.1 kotlin简史"></a>1.1 kotlin简史</h1><p>科特林岛（Котлин）是一座俄罗斯的岛屿，位于圣彼得堡以西约30公里处，形状狭长，东西长度约14公里，南北宽度约2公里，面积有16平方公里，扼守俄国进入芬兰湾的水道。科特林岛上建有喀琅施塔得市，为圣彼得堡下辖的城市。</p>
<h2 id="1-1-1-Kotlin概述"><a href="#1-1-1-Kotlin概述" class="headerlink" title="1.1.1 Kotlin概述"></a>1.1.1 Kotlin概述</h2><p>我们这里讲的Kotlin，就是一门以这个Котлин岛命名的现代程序设计语言。它是一门静态类型编程语言，支持JVM平台，Android平台，浏览器JS运行环境，本地机器码等。支持与Java，Android 100% 完全互操作。</p>
<p>其主要设计者是来自 Saint Petersburg, Russia JetBrains团队的布雷斯拉夫( Andrey Breslav , <a href="https://www.linkedin.com/in/a" target="_blank" rel="external">https://www.linkedin.com/in/a</a>… )等人，源码在github上，其实现主要是JetBrains团队成员以及开源贡献者。</p>
<p>在正式介绍Kotlin之前，让我们来看一下Kotlin的发展历史。</p>
<p>2011年7月，JetBrains推出Kotlin项目。</p>
<p>2012年2月，JetBrains以Apache 2许可证开源此项目。</p>
<p>2016年2月15日，Kotlin v1.0（第一个官方稳定版本）发布。</p>
<p>2017 Google I/O 大会，Kotlin “转正”，成为Android开发的官方语言。</p>
<p>Kotlin 具有很多下一代编程语言1静态语言特性：如类型推断、多范式支持、可空性表达、扩展函数、模式匹配等。</p>
<p>Kotlin的编译器kompiler可以被独立出来并嵌入到 Maven、Ant 或 Gradle 工具链中。这使得在 IDE 中开发的代码能够利用已有的机制来构建，可以在新环境中自由使用。</p>
<p>Kotlin以K字打头的用语，甚至连 contributors 这类词也改成了kontributors。</p>
<h2 id="1-1-2-Kotlin-元年-2016"><a href="#1-1-2-Kotlin-元年-2016" class="headerlink" title="1.1.2 Kotlin 元年:2016"></a>1.1.2 Kotlin 元年:2016</h2><p>2016 年是 Kotlin “元年（First year of Kotlin）”，官网给出了这样一幅图来展示它一年来的成绩：</p>
<p><img src="http://img.blog.csdn.net/20171026132853813?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>Kotlin 是由工程师设计，各种细节设计非常切合工程师的需要。语法近似 Java 和 Scala，且已活跃在 Android 开发领域，被誉为 Android 平台的 Swift。</p>
<p>设计Kotlin之初，主要是为了解决下面的一些问题：</p>
<ul>
<li>创建一种兼容 Java 的语言</li>
<li>让它比 Java 更安全，能够静态检测常见的陷阱。如：引用空指针</li>
<li>让它比 Java 更简洁，通过支持 variable type inference，higher-order functions (closures)，extension functions，mixins and first-class delegation 等实现。</li>
<li>让它比最成熟的竞争对手 Scala语言更加简单。</li>
</ul>
<h1 id="1-2-快速学习工具"><a href="#1-2-快速学习工具" class="headerlink" title="1.2 快速学习工具"></a>1.2 快速学习工具</h1><h2 id="1-2-1-云端IDE"><a href="#1-2-1-云端IDE" class="headerlink" title="1.2.1 云端IDE"></a>1.2.1 云端IDE</h2><p>未来的是云的世界。不需要搭建本地开发运行环境，直接用浏览器打开。当然Kotlin也是支持这种云端运行方式的。打开下面的地址：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://try.kotlinlang.org/</div></pre></td></tr></table></figure>
<p>就可以直接使用云端IDE来即时编写Kotlin代码，并运行之。<br><img src="http://img.blog.csdn.net/20171026133255722?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="1-2-2-本地命令行环境搭建"><a href="#1-2-2-本地命令行环境搭建" class="headerlink" title="1.2.2 本地命令行环境搭建"></a>1.2.2 本地命令行环境搭建</h2><p>Kotlin是运行在JVM环境下的语言。首先我们要有JDK环境。</p>
<p>有时候我们并不需要打开IDE来做一些事情。打开 IDE 是件很麻烦的事情，在某些场景下，我们比较喜欢命令行。</p>
<p>使用命令行环境，我们可以方便地使用Kotlin REPL（Read-Eval-Print-Loop，交互式编程环境）。REPL可以实时编写Kotlin代码，并查看运行结果。通常REPL交互方式可以用于调试、测试以及试验某种想法。</p>
<p>下面我们讲下怎么搭建 Kotlin 命令行环境。</p>
<p>Kotlin 命令行环境主要依赖就是Kotlin Compiler，目前最新版本是 1.1.2-2。其下载链接是：<a href="https://github.com/JetBrains/" target="_blank" rel="external">https://github.com/JetBrains/</a>…</p>
<p>这个zip包里面就是Kotlin Compiler的核心依赖jar包。解压后，目录结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── bin</div><div class="line">│   ├── kotlin</div><div class="line">│   ├── kotlin.bat</div><div class="line">│   ├── kotlinc</div><div class="line">│   ├── kotlinc-js</div><div class="line">│   ├── kotlinc-js.bat</div><div class="line">│   ├── kotlinc-jvm</div><div class="line">│   ├── kotlinc-jvm.bat</div><div class="line">│   └── kotlinc.bat</div><div class="line">├── build.txt</div><div class="line">├── lib</div><div class="line">│   ├── allopen-compiler-plugin.jar</div><div class="line">│   ├── android-extensions-compiler.jar</div><div class="line">│   ├── kotlin-annotation-processing.jar</div><div class="line">│   ├── kotlin-ant.jar</div><div class="line">│   ├── kotlin-build-common-test.jar</div><div class="line">│   ├── kotlin-compiler-client-embeddable.jar</div><div class="line">│   ├── kotlin-compiler.jar</div><div class="line">│   ├── kotlin-daemon-client.jar</div><div class="line">│   ├── kotlin-jslib-sources.jar</div><div class="line">│   ├── kotlin-jslib.jar</div><div class="line">│   ├── kotlin-preloader.jar</div><div class="line">│   ├── kotlin-reflect.jar</div><div class="line">│   ├── kotlin-runner.jar</div><div class="line">│   ├── kotlin-runtime-sources.jar</div><div class="line">│   ├── kotlin-runtime.jar</div><div class="line">│   ├── kotlin-script-runtime-sources.jar</div><div class="line">│   ├── kotlin-script-runtime.jar</div><div class="line">│   ├── kotlin-stdlib-js-sources.jar</div><div class="line">│   ├── kotlin-stdlib-js.jar</div><div class="line">│   ├── kotlin-stdlib-sources.jar</div><div class="line">│   ├── kotlin-stdlib.jar</div><div class="line">│   ├── kotlin-test-js.jar</div><div class="line">│   ├── kotlin-test.jar</div><div class="line">│   ├── noarg-compiler-plugin.jar</div><div class="line">│   ├── sam-with-receiver-compiler-plugin.jar</div><div class="line">│   └── source-sections-compiler-plugin.jar</div><div class="line">└── license</div><div class="line">    ├── LICENSE.txt</div><div class="line">    ├── NOTICE.txt</div><div class="line">    └── third_party</div><div class="line">        ├── args4j_LICENSE.txt</div><div class="line">        ├── asm_license.txt</div><div class="line">        ├── closure-compiler_LICENSE.txt</div><div class="line">        ├── dart_LICENSE.txt</div><div class="line">        ├── jshashtable_license.txt</div><div class="line">        ├── json_LICENSE.txt</div><div class="line">        ├── maven_LICENSE.txt</div><div class="line">        ├── pcollections_LICENSE.txt</div><div class="line">        ├── prototype_license.txt</div><div class="line">        ├── rhino_LICENSE.txt</div><div class="line">        ├── scala_license.txt</div><div class="line">        ├── trove_license.txt</div><div class="line">        └── trove_readme_license.txt</div><div class="line"></div><div class="line">4 directories, 50 files</div></pre></td></tr></table></figure>
<p>其中，kotlinc，kotlin两个命令就是Kotlin语言的编译.kt文件和运行Kt.class文件命令，这两个命令有点类似于Java的javac和java命令。分别是将文件编译成.class字节码文件和运行文件。</p>
<p>我们来看一下kotlinc的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env bash</div><div class="line">#</div><div class="line">##############################################################################</div><div class="line"># Copyright 2002-2011, LAMP/EPFL</div><div class="line"># Copyright 2011-2015, JetBrains</div><div class="line">#</div><div class="line"># This is free software; see the distribution for copying conditions.</div><div class="line"># There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A</div><div class="line"># PARTICULAR PURPOSE.</div><div class="line">##############################################################################</div><div class="line"></div><div class="line">cygwin=false;</div><div class="line">case &quot;`uname`&quot; in</div><div class="line">    CYGWIN*) cygwin=true ;;</div><div class="line">esac</div><div class="line"></div><div class="line"># Based on findScalaHome() from scalac script</div><div class="line">findKotlinHome() &#123;</div><div class="line">    local source=&quot;$&#123;BASH_SOURCE[0]&#125;&quot;</div><div class="line">    while [ -h &quot;$source&quot; ] ; do</div><div class="line">        local linked=&quot;$(readlink &quot;$source&quot;)&quot;</div><div class="line">        local dir=&quot;$(cd -P $(dirname &quot;$source&quot;) &amp;&amp; cd -P $(dirname &quot;$linked&quot;) &amp;&amp; pwd)&quot;</div><div class="line">        source=&quot;$dir/$(basename &quot;$linked&quot;)&quot;</div><div class="line">    done</div><div class="line">    (cd -P &quot;$(dirname &quot;$source&quot;)/..&quot; &amp;&amp; pwd)</div><div class="line">&#125;</div><div class="line"></div><div class="line">KOTLIN_HOME=&quot;$(findKotlinHome)&quot;</div><div class="line"></div><div class="line">if $cygwin; then</div><div class="line">    # Remove spaces from KOTLIN_HOME on windows</div><div class="line">    KOTLIN_HOME=`cygpath --windows --short-name &quot;$KOTLIN_HOME&quot;`</div><div class="line">fi</div><div class="line"></div><div class="line">[ -n &quot;$JAVA_OPTS&quot; ] || JAVA_OPTS=&quot;-Xmx256M -Xms32M&quot;</div><div class="line"></div><div class="line">declare -a java_args</div><div class="line">declare -a kotlin_args</div><div class="line"></div><div class="line">while [ $# -gt 0 ]; do</div><div class="line">  case &quot;$1&quot; in</div><div class="line">    -D*)</div><div class="line">      java_args=(&quot;$&#123;java_args[@]&#125;&quot; &quot;$1&quot;)</div><div class="line">      shift</div><div class="line">      ;;</div><div class="line">    -J*)</div><div class="line">      java_args=(&quot;$&#123;java_args[@]&#125;&quot; &quot;$&#123;1:2&#125;&quot;)</div><div class="line">      shift</div><div class="line">      ;;</div><div class="line">    *)</div><div class="line">      kotlin_args=(&quot;$&#123;kotlin_args[@]&#125;&quot; &quot;$1&quot;)</div><div class="line">      shift</div><div class="line">      ;;</div><div class="line">  esac</div><div class="line">done</div><div class="line"></div><div class="line">if [ -z &quot;$JAVACMD&quot; -a -n &quot;$JAVA_HOME&quot; -a -x &quot;$JAVA_HOME/bin/java&quot; ]; then</div><div class="line">    JAVACMD=&quot;$JAVA_HOME/bin/java&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">declare -a kotlin_app</div><div class="line"></div><div class="line">if [ -n &quot;$KOTLIN_RUNNER&quot; ];</div><div class="line">then</div><div class="line">    java_args=(&quot;$&#123;java_args[@]&#125;&quot; &quot;-Dkotlin.home=$&#123;KOTLIN_HOME&#125;&quot;)</div><div class="line">    kotlin_app=(&quot;$&#123;KOTLIN_HOME&#125;/lib/kotlin-runner.jar&quot; &quot;org.jetbrains.kotlin.runner.Main&quot;)</div><div class="line">else</div><div class="line">    [ -n &quot;$KOTLIN_COMPILER&quot; ] || KOTLIN_COMPILER=org.jetbrains.kotlin.cli.jvm.K2JVMCompiler</div><div class="line">    java_args=(&quot;$&#123;java_args[@]&#125;&quot; &quot;-noverify&quot;)</div><div class="line">    kotlin_app=(&quot;$&#123;KOTLIN_HOME&#125;/lib/kotlin-preloader.jar&quot; &quot;org.jetbrains.kotlin.preloading.Preloader&quot; &quot;-cp&quot; &quot;$&#123;KOTLIN_HOME&#125;/lib/kotlin-compiler.jar&quot; $KOTLIN_COMPILER)</div><div class="line">fi</div><div class="line"></div><div class="line">&quot;$&#123;JAVACMD:=java&#125;&quot; $JAVA_OPTS &quot;$&#123;java_args[@]&#125;&quot; -cp &quot;$&#123;kotlin_app[@]&#125;&quot; &quot;$&#123;kotlin_args[@]&#125;&quot;</div></pre></td></tr></table></figure>
<p>我们可以看出，kotlinc是直接依赖java命令的，所以，使用Kotlin Compiler，首先要有JDK环境。其中kotlin-preloader.jar、kotlin-compiler.jar是其入口依赖jar，入口类是org.jetbrains.kotlin.cli.jvm.K2JVMCompiler。</p>
<p>kotlin命令脚本如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">export KOTLIN_RUNNER=1</div><div class="line"></div><div class="line">DIR=&quot;$&#123;BASH_SOURCE[0]%/*&#125;&quot;</div><div class="line">: $&#123;DIR:=&quot;.&quot;&#125;</div><div class="line"></div><div class="line">&quot;$&#123;DIR&#125;&quot;/kotlinc &quot;$@&quot;</div></pre></td></tr></table></figure>
<p>我们可以看出，直接是依赖kotlinc。在if逻辑代码中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if [ -n &quot;$KOTLIN_RUNNER&quot; ];</div><div class="line">then</div><div class="line">    java_args=(&quot;$&#123;java_args[@]&#125;&quot; &quot;-Dkotlin.home=$&#123;KOTLIN_HOME&#125;&quot;)</div><div class="line">    kotlin_app=(&quot;$&#123;KOTLIN_HOME&#125;/lib/kotlin-runner.jar&quot; &quot;org.jetbrains.kotlin.runner.Main&quot;)</div></pre></td></tr></table></figure>
<p>从这个逻辑，我们可以看出，Kt.class在java命令执行前，需要从kotlin-runner.jar这个逻辑里走一遍。同时，我们也能知道Kt.class跟Java.class文件有着这个kotlin-runner.jar的逻辑映射上的区别。也就是说，Kotlin的Bytecode跟纯的JVM bytecode存在一个kotlin-runner.jar的映射关系。</p>
<p>像scala，groovy等基于JVM的语言的compiler,runner，基本都采用这种运行方式。在实现细节上也许会有不同，总的思路是一致的。比如说，scalac的入口类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/EasyKotlin/scala/blob/2.12.x/src/compiler/scala/tools/nsc/Main.scala</div></pre></td></tr></table></figure>
<p>对应scalac中的命令行脚本是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"></div><div class="line">execCommand \</div><div class="line">  &quot;$&#123;JAVACMD:=java&#125;&quot; \</div><div class="line">  $JAVA_OPTS \</div><div class="line">  &quot;$&#123;java_args[@]&#125;&quot; \</div><div class="line">  &quot;$&#123;classpath_args[@]&#125;&quot; \</div><div class="line">  -Dscala.home=&quot;$SCALA_HOME&quot; \</div><div class="line">  $OVERRIDE_USEJAVACP \</div><div class="line">  &quot;$EMACS_OPT&quot; \</div><div class="line">  $WINDOWS_OPT \</div><div class="line">   scala.tools.nsc.Main  &quot;$@&quot;</div><div class="line">   </div><div class="line">...</div></pre></td></tr></table></figure>
<p>我们解压完kotlin-compiler-1.1.2-2.zip，放到相应的目录下。然后配置系统环境变量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export KOTLIN_HOME=/Users/jack/soft/kotlinc</div><div class="line">export PATH=$PATH:$KOTLIN_HOME/bin</div></pre></td></tr></table></figure>
<p>执行source ~/.bashrc, 命令行输入kotlinc， 即可REPL环境，我们可以看到如下输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ kotlinc</div><div class="line">Welcome to Kotlin version 1.1.2-2 (JRE 1.8.0_40-b27)</div><div class="line">Type :help for help, :quit for quit</div><div class="line">&gt;&gt;&gt; println(&quot;Hello,World&quot;)</div><div class="line">Hello,World</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>然后，我们就可以像使用python,ruby,scala,groovy的REPL一样去尽情享受Kotlin的编程乐趣了。</p>
<h2 id="1-2-3-使用IntelliJ-IDEA"><a href="#1-2-3-使用IntelliJ-IDEA" class="headerlink" title="1.2.3 使用IntelliJ IDEA"></a>1.2.3 使用IntelliJ IDEA</h2><p>最新版本的IDEA已经默认集成了Kotlin环境。我们首先去下载安装IntelliJ IDEA。下载页面是：<br><a href="https://www.jetbrains.com/ide" target="_blank" rel="external">https://www.jetbrains.com/ide</a>…</p>
<p>如果您之前没用过IDEA，现在想尝试一下，可以去下面这个页面了解一下：</p>
<p><a href="https://www.jetbrains.com/ide" target="_blank" rel="external">https://www.jetbrains.com/ide</a>…</p>
<p>安装完毕，然后点击File &gt; New &gt; Project, 我们可以选择。</p>
<p><img src="http://img.blog.csdn.net/20171026141515365?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>也可以选择Maven，Gradle构建工程。本书采用Gradle来构建工程。如下图所示：<br><img src="http://img.blog.csdn.net/20171026141839918?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>然后按照后续步骤操作，最后等待Gradle下载依赖，完成工程构建。我们将得到一个标准的Gradle工程。</p>
<p><img src="http://img.blog.csdn.net/20171026142058687?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>我们在src/main/kotlin下面新建package :com.easy.kotlin.chaptor1。然后新建HelloWorld.kt，编写以下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">package com.easy.kotlin.chaptor1</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by jack on 2017/6/5.</div><div class="line"> */</div><div class="line"></div><div class="line">fun main(args:Array&lt;String&gt;)&#123;</div><div class="line">    println(&quot;Hello,World!&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20171026142205639?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>然后就会得到输出了：</p>
<p><img src="http://img.blog.csdn.net/20171026142357520?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>我们观察IDEA控制台输出的执行日志，可以看出IDEA集成Kotlin环境使用的核心依赖jar包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/bin/java &quot;-javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=65404:/Applications/IntelliJ IDEA.app/Contents/bin&quot; -Dfile.encoding=UTF-8 -classpath /Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home/jre/lib/deploy.jar:...</div><div class="line">...</div><div class="line"></div><div class="line">.../kotlin-stdlib-jre8-1.1.1.jar:</div><div class="line">.../kotlin-stdlib-jre7-1.1.1.jar:</div><div class="line">.../kotlin-stdlib-1.1.1.jar:... com.easy.kotlin.chaptor1.HelloWorldKt</div><div class="line">...</div><div class="line"></div><div class="line"></div><div class="line">Hello,World!</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure>
<h2 id="1-2-4-使用Eclipse"><a href="#1-2-4-使用Eclipse" class="headerlink" title="1.2.4 使用Eclipse"></a>1.2.4 使用Eclipse</h2><p>使用Eclipse的开发者们，可以通过安装Kotlin插件来进行Kotlin程序的开发。但是，体验上要比使用IDEA逊色很多。如果您想完美体验Kotlin在IDE中的开发，强烈建议使用IDEA。JetBrains自家的东西，自然是比Eclipse支持的要好很多。</p>
<p>首先，打开Help &gt; Eclipse Marketplace, 如下图：<br><img src="http://img.blog.csdn.net/20171026142525705?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>在搜索框里输入Kotlin , 将得到如下结果。<br><img src="http://img.blog.csdn.net/20171026142852059?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>点击Install, 等待完成安装，重启Eclipse。然后，选择Kotlin Perspective , 如下图：<br><img src="http://img.blog.csdn.net/20171026142946466?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20171026142956700?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>然后我们就可以新建 Kotlin 工程了。<br><img src="http://img.blog.csdn.net/20171026143048550?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>新建完工程，我们将得到如下结构的工程：<br><img src="http://img.blog.csdn.net/20171026143115312?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>我们可以看出，kotlin-runtime.jar, kotlin-reflect.jar,kotlin-script-runtime.jar 被加到了工程依赖库里。这个配置是在.classpath， .project 配置的。当然这些配置依赖库，执行程序等等的工作是由Eclipse Kotlin插件完成的。</p>
<p>我们在src目录新建一个package : easy_kotlin_chatper_1，然后在此package下面新建一个HelloWorld.kt源码文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">package easy_kotlin_chatper_1</div><div class="line"></div><div class="line">fun main(args: Array&lt;String&gt;)&#123;</div><div class="line">    println(&quot;Hello,Kotlin!&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>右击HelloWorld.kt源码文件，如下图运行：<br><img src="http://img.blog.csdn.net/20171026143328658?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>本节示例工程源码：<a href="https://github.com/EasyKotlin" target="_blank" rel="external">https://github.com/EasyKotlin</a>…</p>
<h2 id="1-2-5-使用Gradle构建Kotlin工程"><a href="#1-2-5-使用Gradle构建Kotlin工程" class="headerlink" title="1.2.5 使用Gradle构建Kotlin工程"></a>1.2.5 使用Gradle构建Kotlin工程</h2><p>在本节简单介绍一下使用Gradle构建Kotlin工程的配置。这个配置主要在build.gradle文件中。其中，构建过程的核心依赖配置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    ext.kotlin_version = &apos;1.1.1&apos;</div><div class="line"></div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>kotlin-gradle-plugin完成了Gradle构建Kotlin工程的所有依赖构建执行的相关工作。然后，使用Gradle java、kotlin插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;java&apos;</div><div class="line">apply plugin: &apos;kotlin&apos;</div></pre></td></tr></table></figure>
<p>当然，如果我们同时想使用Groovy语言也是可以的，加上如下的一些配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;groovy&apos;</div></pre></td></tr></table></figure>
<p>源代码JDK兼容性配置兼容1.8往后的版本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sourceCompatibility = 1.8</div></pre></td></tr></table></figure>
<p>配置Maven仓库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，添加如下的工程依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version&quot;</div><div class="line">    compile &quot;org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version&quot;</div><div class="line">    compile &apos;org.codehaus.groovy:groovy-all:2.3.11&apos;</div><div class="line">    testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.12&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中，kotlin-stdlib-jre8是Kotlin JVM执行环境依赖。<br>org.jetbrains.kotlin:kotlin-stdlib-js是Kotlin JS执行环境依赖。<br>我们可以通过Gradle项目的依赖树看出kotlin-stdlib-jre8依赖</p>
<p><img src="http://img.blog.csdn.net/20171026143826057?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-1-kotlin简史&quot;&gt;&lt;a href=&quot;#1-1-kotlin简史&quot; class=&quot;headerlink&quot; title=&quot;1.1 kotlin简史&quot;&gt;&lt;/a&gt;1.1 kotlin简史&lt;/h1&gt;&lt;p&gt;科特林岛（Котлин）是一座俄罗斯的岛屿，位于圣彼得堡以西
    
    </summary>
    
      <category term="编程语言" scheme="http://www.xiangzhihong.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="编程语言" scheme="http://www.xiangzhihong.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>58 同城 iOS 客户端 iOS11 及 iPhone X 适配实践</title>
    <link href="http://www.xiangzhihong.com/2017/09/13/%E7%BE%8E%E5%9B%A2iphone%20x%E7%95%99%E6%B5%B7%E9%80%82%E9%85%8D/"/>
    <id>http://www.xiangzhihong.com/2017/09/13/美团iphone x留海适配/</id>
    <published>2017-09-12T16:00:00.000Z</published>
    <updated>2017-09-30T01:53:59.466Z</updated>
    
    <content type="html"><![CDATA[<p>一、前言</p>
<p>前段时间 WWDC 大会上苹果推出了 iOS11 系统 和 iPhone X 新机型，相信各个 iOS 团队的开发者都已经在计划新系统和新机型的适配工作了。不得不说，新系统和新机型的发布确实是给 iOS 开发者带来了不小的工作量，因此有必要将 58 同城 iOS 客户端适配过程中遇到的问题跟大家分享一下。</p>
<p>二、iOS 11 UIKit</p>
<p>在适配 iOS 11 之前，我们首先要弄清楚 iOS 11 做了哪些改动，哪些改动会对我们现有的应用产生影响，这样有助于我们分析现象。建议大家看下 WWDC 的官方视频，视频中提到了如何适配 iOS 11 及如何设计和适配 iPhoneX 新机型：</p>
<p>Updating Your App for iOS 11<br>Building Apps for iPhone X<br>Designing for iPhone X</p>
<ol>
<li>UIKit’sBars</li>
</ol>
<p>图 1 UIKit’sBar 提供 size 的方法截图<br>iOS11 UIKit’sBar 改动很大，对现有的应用来说 UINavigationBar 的 titleView 适配应该是最大的问题，LargeTitle 虽然看起来似乎是很大的改动，但是实际上对现有的应用没有太多的影响。iOS11 之后 UINavigationBar 和 UIToolbar 支持 Auto Layout ，开发者必须要提供自定义视图的 size。如果自定义 titleView 中使用了 Auto Layout，那么通过设置自定义 titleView 的 frame 的方式来设定 size 在某些场景下可能就不再合适了，开发者应该着重注意下自定义 view 内部的约束（具体案例将在下文中阐述）。如图 1 所示，我们可以通过以下三种方式来提供 size：</p>
<p>约束自身宽高；<br>实现 intrinsicContentSize 方法；<br>利用子视图宽高及间距来约束 titleView；</p>
<ol>
<li>UIScrollView</li>
</ol>
<p>图 2 安全区域示意图<br>iOS11 引入了安全区域的概念，默认情况下安全区域是指 NavigationBar 以下 TabBar 以上的区域（iPhoneX 则不包括底部的虚拟 Home 区域），也就是说 StatusBar、NavigationBar、TabBar、虚拟 Home 都不是安全区域（可参见图 2）。为了帮助开发者判断各个 view 与安全区域的距离关系，iOS11 在 UIView 加入了一个属性：</p>
<p>需要注意的是这个属性是描述 view 与页面安全区域的距离关系，如果 view 的某个方向超过了安全区域则这个方向的数值为正数，如果 view 完全在安全区域内则 safeAreaInsets 的值全为 0。如在图 3 所示一个空白页面中。</p>
<p>图3 安全区域测试图<br>红、蓝 view 是父子视图的关系，且蓝色子视图完全在红色视图内，由于红、蓝两个 view 顶部超过安全区域 44 点（状态栏 44 高度），所以它们的 safeAreaInsets 都为 {44, 0, 0, 0}，也就是说在同一个控制器中，他们的安全区域是一致的，与视图层级无关。在一个控制器中，安全区域并不是固定不变的，可以通过 ViewController 的 additionalSafeAreaInsets 方法来修改页面的安全区域，如果此时将安全区域上延 11 个点。</p>
<p>那么它们的 safeAreaInsets 都会变为 {33, 0, 0, 0}。</p>
<p>我们再来看 UIScrollView 新增加的两个很重要的属性：</p>
<p>iOS 11 中 adjustedContentInset 是用来调整 scrollView 内容边距的属性，这个属性实际上是 contentInset 和 safeAreaInsets 在各个方向上的加和，即 contentInset+safeAreaInsets。contentInsetAdjustmentBehavior 是控制采取何种策略来控制调整边距的属性，默认为 UIScrollViewContentInsetAdjustmentAutomatic。在 iOS 11 之前，控制是否自动调整内边距的属性是 UIViewController 的 automaticallyAdjustsScrollViewInsets，但是这个属性现在已经废弃，取而代之的是 UIScrollView 的 contentInsetAdjustmentBehavior 。contentInsetAdjustmentBehavior 共有四种设置，如图 4 所示：</p>
<p>图 4 contentInsetAdjustmentBehavior<br>如果 UIScrollView 需要调整内容边距则加上安全区域的偏移，即 adjustedContentInset = contentInset+safeAreaInsets，如果不调整则 safeAreaInsets 不参与到计算中，即 adjustedContentInset = contentInset。简而言之，contentInsetAdjustmentBehavior 就是告诉 UIScrollView 在计算 adjustedContentInset 时要不要加上 safeAreaInsets。</p>
<ol>
<li>UITableView</li>
</ol>
<p>UITableView 除了继承自 UIScrollView 的特性外，还有自身 API 的变动。新系统中，UITableView 开启了估算行高，estimatedRowHeight、 estimatedSectionHeaderHeight、estimatedSectionFooterHeight 不再默认是 0，而是 UITableViewAutomaticDimension（这个值打印输出是 -1），这一举措旨在帮助开发者提高性能，减少 heightForRowAtIndexPath: 方法的的调用次数，但是这样会导致 API 执行顺序发生变化。在没有开启估算行高之前 tableView 总是先执行：</p>
<p>再执行</p>
<p>API 调用顺序如图 5 所示：</p>
<p>图 5 关闭预估高度方法执行顺序打印<br>而开启估算行高之后 tableView 会先执行：</p>
<p>再执行：</p>
<p>方法调用次数减少且调用顺序变为如图 6 所示：</p>
<p>图 6 开启预估高度方法执行顺序打印<br>由此可见：</p>
<p>的调用次数大大减少。但是如果开发者实现：</p>
<p>方法，那么无论是否关闭 estimatedRowHeight，API 的调用顺序和调用次数都是一样的，如图 7 所示。</p>
<p>图 7 实现预估高度方法后方法执行顺序打印<br>因此我们要注意新系统中 API 执行顺序和执行次数的变化。</p>
<p>除此之外我们还应该注意在开启预估高度tableView.estimatedSectionHeaderHeight = UITableViewAutomaticDimension; 的情况下，如果不实现</p>
<p>和</p>
<p>那么</p>
<p>和</p>
<p>是不会被执行的。</p>
<p>三、58 同城的实战经历</p>
<p>适配 iPhoneX 首先要添加一个 1125x2436 的启动图，否则会在屏幕的上方和下方留下两道黑框。在适配开始前先简单介绍下 58 同城 iOS 客户端的页面结构，因为页面结构不同可能遇到的问题会不尽相同。58 同城 iOS 客户端的 key window 的 rootViewController 是一个导航控制器，而不是 UITabBarController。导航控制器的 rootViewController 是一个 UITabBarController 样式（非 UITabBarController）的 ViewController。了解了应用的结构之后，下面介绍下 58 同城 iOS 客户端适配过程中遇到的比较典型的问题：</p>
<ol>
<li>首页</li>
</ol>
<p>先看下适配之前的首页，如图 8 所示：</p>
<p>图 8 适配前首页图<br>适配前，首页主要存在的问题有 3 个：</p>
<p>顶部的天气与状态栏有重叠；<br>首页的动画默认已经进行了一部分；<br>底部的 tabBar 在非安全区域内。<br>先看问题 1，产生问题 1 的原因是由于 iPhoneX 的状态栏高度产生了变化，由 20 变成了 44，天气组件的位置没有预留出新增的 24 点，导致与状态栏重叠。解决的办法是对顶部 view 进行重新布局约束，根据机型来判断是够需要增加 24 点。机型的判断由于没有真机验证，我们无法准确地获取到设备名称，因此暂时采用设备高度来判断机型。如果屏幕高度为 812，则暂时可以认为是 iPhoneX：</p>
<p>问题 2 的原因是 tableView 的安全区域的引起的。由于首页 tableView 的 contentInsetAdjustmentBehavior 默认为 UIScrollViewContentInsetAdjustmentAutomatic， 在隐藏导航栏的情况下 tableView 的内容偏移为安全区域的 44 点，因此 tableView 自动偏移了 44 点，看起来像动画进行了一半。解决方法是将 contentInsetAdjustmentBehavior 设置为 never 忽略安全区域偏移。</p>
<p>问题 3 的原因是 iPhoneX 新增了 34 点高度的虚拟 home 区域替代了 home 实体键。虚拟 home 区域并不是安全区域，因此需要在 iPhoneX 的机型上，屏幕底部预留出 34 点高度。</p>
<p>适配后首页在 iPhoneX 上的效果如图 9：</p>
<p>图 9 适配后首页图</p>
<ol>
<li>列表</li>
</ol>
<p>在适配过程中，我们发现在二手物品列表，上拉加载数据时底部自定义的 tabBar 会来回反复地进行显示隐藏，tabBar 为下图蓝框内区域，如图 10 所示：</p>
<p>图 10 带有 tab 的列表图<br>经过排查我们发现 tableView 的 contentOffset 在有新的内容被添加进来的时候会产生跳动，如：不断上拉的一个列表，列表的 contentOffset 的 Y 值会不断增大，如果上拉过程中触发网络请求添加了新的内容到列表中，那么列表的 contentOffset 会产生一个跳动。如图 11 所示，在 contentOffset 的 Y 值为 9000 左右的时候列表新增了一页数据，导致 contentOffset 的 Y 值变为 3000 左右。</p>
<p>图 11 上拉加载更多时 scrollView 的偏移量 Y 值打印图<br>当下拉返回顶部时，contentOffset 的 Y 值会产生一系列不连续的跳动，如当前 contentOffset 的 Y 值为 3600，下拉后变为 3500 左右然后又变为 3600 左右，如图 12 打印所示：</p>
<p>图 12 下拉返回时 scrollView 的偏移量 Y 值打印图<br>如果利用 contentOffset 的 Y 值变化判断滑动方向的话，那么现在会判断为方向时而向上时而向下，导致底部的 tabBar 反复隐藏显示。</p>
<p>问题根本原因是由于</p>
<p>方法中获取 aScrollView 的偏移量会存在跳动的现象。具体的解决办法与各自的实现逻辑有较强的关联，在此不进行详细阐述。</p>
<ol>
<li>IM</li>
</ol>
<p>在使用 iOS11 beta 版时我们发现 IM 会话页的很多消息都变成了未识别消息类型，图 13 中左侧为适配前效果，右侧为适配后效果：</p>
<p>图 13 IM 会话页适配前后对比图<br>当消息滑出屏幕再滑回来时消息才被正确解析出来。最开始以为是 Xcode9 beta 版的 bug，因为只有 Xcode 9 打包安装的应用才会出现这种问题，而通过 Xcode8 正式版打包后安装到 iOS11 的手机上并不会出现这种问题。不过随着 beta 版的不断稳定，这种现象并没有随之消失，因此我们觉得有必要查看下消息不识别的具体原因。经过排查后我们发现，异常情况出现的原 l 因是由于 tableView 没有取到可重用的 cell，代码如图 14：</p>
<p>图 14 tableView 获取 Cell 的方法图<br>会话页将未取到 cell 作为一种异常情况进行了处理，处理方式是将这种情况当做未识别消息展示，处理逻辑如图 15 所示：</p>
<p>图 15 IM 会话列表异常处理代码<br>经过分析，取不到 cell 很有可能是因为 cell 没有被注册，而之前代码中注册 cell 的逻辑在</p>
<p>方法中。由于 iOS11 默认开启了 estimatedRowHeight，导致</p>
<p>方法先执行，</p>
<p>后执行，因此 cell 没有被注册成功，代码走进了异常处理逻辑。为了尽量不修改之前的业务逻辑，我们采用的适配方式的将估算高度关闭。</p>
<p>除此之外，IM 还存在适配安全区域的问题。未适配之前，IM 会话页面的输入框在 iPhoneX 的非安全区域内，见图 16 标注区域。</p>
<p>图 16 IM 会话页底部输入未适配前图<br>因此页面的底部需要设置 34 点的边距。iPhoneX 与其他手机很明显的不同就是键盘的高度，iPhoneX 的键盘高度为 333，这个键盘是从屏幕底部抬起并跨过了底部的虚拟 home 区域，键盘在安全区域内的高度为（333-34）。因此在监听键盘的事件中要注意对抬起高度的处理，以 IM 会话页为例，在非 iPhoneX 手机上输入框会上升 keyboardHeight 的高度，但是在 iPhoneX 上则只需要上升 keyboardHeight-34 点的高度。在 iPhoneX 手机上我们要格外注意键盘高度和安全区域结合带来的潜在问题。</p>
<ol>
<li>发布</li>
</ol>
<p>在适配发布页面的时候，我们发现小区搜索页面的 titleView 在 iOS11 手机上变得很小，没有完全展开，效果如图 17 所示：</p>
<p>图 17 小区选择未适配前图<br>图 16 中的导航栏的 titleView 是 WBPUBSearchBar 类型的。由于自定义的 WBPUBSearchBar 是原来是通过 initWithFrame: 来创建并指明宽高的，WBPUBSearchBar 内部布局是依赖 Masonry 的，但是布局并没有设置 textFiled 和 button 的宽度，仅仅指明了 textFiled 和 button 各自的左右间距。在此情况下，自定义的 titleView 无法依赖内部子视图的约束得到正确的宽度，因此 titleView 的宽度并不正确。因此需要实现方法：</p>
<p>向外界提供自身的 size。当然除了实现 intrinsicContentSize 方法外也可以通过添加自身约束的方式来设置自身的正确合理的 size。</p>
<ol>
<li>视频</li>
</ol>
<p>58 同城的二手房详情页支持视频展示房源，当全屏播放视频的时候会导致虚拟 home 条遮挡住视频内容，适配前视频全屏播放效果如图 18。</p>
<p>图 18 房源视频全屏播放图<br>由于在播放视频的时候有交互较少，苹果允许开发者在当前页面隐藏虚拟 home 条。因此可以在视频播放控制器中实现下述方法来隐藏虚拟 home 条：</p>
<p>在适当时机刷新虚拟 home。</p>
<p>实现 prefersHomeIndicatorAutoHidden 方法,返回是否需要隐藏虚拟 home。</p>
<p>当用户触碰屏幕时虚拟 home 会再次出现。这样就可以解决横屏虚拟 home 遮挡屏幕的问题。</p>
<ol>
<li>宠物</li>
</ol>
<p>在使用 iOS11 beta 版时我们发现导航栏的自定义返回按钮距离屏幕左侧过远。这种情况只有在 Xcode9 编译时才会出现，Xcode8 编译打包在 iOS11 beta 的手机上运行并不会出现这种问题。对比导航栏的视图层级结构我们发现导航栏的层级做了很大的变动。</p>
<p>图 19 iOS 11 前导航栏层级结构和实际展示图</p>
<p>图 20 iOS11 导航栏层级结构和实际展示图<br>在 iOS11 下设置 UIBarButtonItem 时，系统新增了 _UINavigationBarContentView 和 _UIButtonBarStackView 两层 View，新增的两层 frame 是有偏移的，而且布局采用的是约束方式。因此需要遍历层级找到 _UIButtonBarStackView 这层视图并修改它与 _UINavigationBarContentView 间的约束，修改约束的时机放自定义导航控制器的在 viewDidLayoutSubviews 方法中。修改约束关键代码如图 21 所示：</p>
<p>图 21 修改约束关键代码<br>四、总结</p>
<p>总结一下，58 同城 iOS 客户端在适配过程中遇到了以下问题：</p>
<p>由于安全区域的引入，引起了 UIScrollView 的偏移。安全区域引起的 UIScrollView 偏移导致的问题非常多，文中仅仅以首页为例向大家展示了 58 同城的解决方式。当然，解决方式有很多种，只要了解问题的原因，那么解决方式可以根据自己的场景自由决定。文中没有提及 RN 和 web 的适配方式，主要原因是 RN 和 web 的适配方式与 Native 的适配方式类似，最主要的工作仍然是适配安全区域。</p>
<p>tableView 的变化总体而言还是很大的，因此需要我们仔细观察现象排查代码。</p>
<p>对于导航栏的适配，我们应该注意 titleView 的内部约束，返回按钮的适配需要注意的是修改约束的时机。</p>
<p>键盘抬起本身并不会引起适配问题，但是涉及到安全区域的适配可能就会导致 UI 处理不正确。</p>
<p>开发者应该根据场景来控制虚拟 home 的显示和隐藏。</p>
<p>以上是 58 同城 iOS 客户端在适配过程中遇到的问题。当然，实际适配过程中遇到的问题远比文中描述的多，且情况要更为复杂。文中只是列出了一些比较典型的问题，希望对读者有所帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、前言&lt;/p&gt;
&lt;p&gt;前段时间 WWDC 大会上苹果推出了 iOS11 系统 和 iPhone X 新机型，相信各个 iOS 团队的开发者都已经在计划新系统和新机型的适配工作了。不得不说，新系统和新机型的发布确实是给 iOS 开发者带来了不小的工作量，因此有必要将 58 
    
    </summary>
    
      <category term="iOS" scheme="http://www.xiangzhihong.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://www.xiangzhihong.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>解决低版本Xcode不支持高版本iOS真机调试的问题</title>
    <link href="http://www.xiangzhihong.com/2017/09/13/%E8%A7%A3%E5%86%B3%E4%BD%8E%E7%89%88%E6%9C%ACXcode%E4%B8%8D%E6%94%AF%E6%8C%81%E9%AB%98%E7%89%88%E6%9C%ACiOS%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://www.xiangzhihong.com/2017/09/13/解决低版本Xcode不支持高版本iOS真机调试的问题/</id>
    <published>2017-09-12T16:00:00.000Z</published>
    <updated>2017-11-20T02:07:34.693Z</updated>
    
    <content type="html"><![CDATA[<p>今天在做真机调试的时候，遇到下面的一个问题：<br><img src="http://img.blog.csdn.net/20171026231911247?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Could not locate device support files. </div><div class="line">This iPhone 6s is running iOS 11.1 (15B93), which may not be supported by this version of Xcode.</div></pre></td></tr></table></figure></p>
<p>上面的意思是，在调试前我将我手机的iOS系统 升级到了最新版11.1版本，而我的Xcode9支持的最高版本是11.0的。这也不奇怪，手机肯定都是先推送的，这是苹果一贯的做法。那么遇到上面的问题我们怎么解决呢？</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>1、复制一份旧的SDK，并重新命名为真机测试需要的SDK版本；<br>具体做法是，找到路径: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk （提示：要在应用程序中找到Xcode，右键点击 -&gt; 显示包内容，以前Xcode版本的iOS SDK有的保存在系统根目录下）。</p>
<p>复制一份iPhoneOS.sdk，并命名为iPhoneOS11.1.sdk。如下图所示：<br><img src="http://img.blog.csdn.net/20171026232057643?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"> </p>
<p>2，新增真机调试包及内容<br>打开路径：<br>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport 。我在CocoaChina上找到了11.1的真机包，链接地址如下：<br><a href="http://www.cocoachina.com/bbs/read.php?tid=1726904。然后我们打开DeviceSupport并复制一份。" target="_blank" rel="external">http://www.cocoachina.com/bbs/read.php?tid=1726904。然后我们打开DeviceSupport并复制一份。</a><br><img src="http://img.blog.csdn.net/20171026233043238?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>具体做法是，创建一个新的真机需要的版本11.1(15B93)，然后将从 cocoachina下载的文件拷贝到这个地方即可。</p>
<p>3、修改SDKSettings.plist文件中的版本号</p>
<p>按照/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk 的顺序打开SDKSettings.plist 文件，将里面所有跟版本有关的数字都修改为11.1即可。再次运行就好了。<br><img src="http://img.blog.csdn.net/20171026233457764?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在做真机调试的时候，遇到下面的一个问题：&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171026231911247?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob
    
    </summary>
    
      <category term="iOS" scheme="http://www.xiangzhihong.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://www.xiangzhihong.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>中国AR行业专题研究报告</title>
    <link href="http://www.xiangzhihong.com/2017/08/18/%E4%B8%AD%E5%9B%BDAR%E8%A1%8C%E4%B8%9A%E4%B8%93%E9%A2%98%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/"/>
    <id>http://www.xiangzhihong.com/2017/08/18/中国AR行业专题研究报告/</id>
    <published>2017-08-17T16:00:00.000Z</published>
    <updated>2017-11-20T02:06:37.600Z</updated>
    
    <content type="html"><![CDATA[<p>本报告将从AR技术特征入手，研究技术背后的产业逻辑，通过对国内AR市场代表性初创厂商的研究，探讨未来AR的商业化之路。</p>
<p>1，突破屏幕、虚实融合、自然交互是增强现实技术最重要的特征。<br>2，核心技术突破，政策利好，行业应用广泛和交互方式的变革推动增强现实技术快速发展。<br>3，技术驱动的特点决定增强现实行业将经历较长的技术红利期。<br>4，顺势而为，结合自身优势，找准合适的技术应用场景，提供增量价值，是创业者切入增强现实市场的关键。</p>
<h2 id="虚实融合是AR技术最重要的特征"><a href="#虚实融合是AR技术最重要的特征" class="headerlink" title="虚实融合是AR技术最重要的特征"></a>虚实融合是AR技术最重要的特征</h2><p>➀将虚拟场景投射于现实是增强现实的主要特征</p>
<p>增强现实（AR）技术：借助计算机视觉技术和人工智能技术产生物理世界中不存在的虚拟对象, 并将虚拟对象准确“放置”在现实世界中。通过更自然的交互，呈现给用户一个感知效果更丰富的新环境。</p>
<p>在现实世界中精准叠加虚拟信息，实现虚实融合是增强现实最重要也是区别于虚拟现实的关键特征。<br><img src="http://img.blog.csdn.net/20170906104724642?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>➁计算机视觉、虚实融合、人机交互，显示输出是增强现实技术的基础</p>
<p>增强现实的技术原理是：通过摄像机采集真实世界图像，人可以通过语音和手势等对设备输入指令，计算机利用计算机视觉技术和人工智能技术实现对周围环境的理解，同时对交互进行识别。再经过渲染引擎处理，最后通过显示技术输出，以达到虚实融合的效果。</p>
<p><img src="http://img.blog.csdn.net/20170906104808743?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>➂更自然的人机交互依赖于人工智能技术的成熟</p>
<p>Analysys易观分析认为，增强现实的核心在于人机交互，而作为其底层的人工智能技术则起着重要作用。增强现实（AR）可以认为是人工智能（AI）的一个可视化呈现和交互方式。<br><img src="http://img.blog.csdn.net/20170906104908523?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>➃以智能眼镜为代表的近眼屏或许是未来增强现实（AR）硬件的方向</p>
<p>AR硬件有两个环节值得关注。</p>
<p>车用平视显示器(HUD)：与无人驾驶技术，以及基于LBS地理信息定位的AR服务结合。</p>
<p>AR智能眼镜：基于第一视角的交互更自然。</p>
<p>目前市面上主流的增强现实产品分为三类。分别是头戴显示器，手持移动终端和以PC、HUD车用平视显示器为代表的空间显示器。从市场普及度来看，PC显示器和移动终端略高于以AR眼镜为代表的头戴式显示器。但由于AR眼镜突破了屏幕的限制，未来整个物理界面都可能成为AR的交互界面。</p>
<p>Analysys易观分析认为，以AR眼镜为代表的近眼屏也许是未来增强现实硬件的方向。</p>
<p><img src="http://img.blog.csdn.net/20170906104955918?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="多重因素推动AR技术快速发展"><a href="#多重因素推动AR技术快速发展" class="headerlink" title="多重因素推动AR技术快速发展"></a>多重因素推动AR技术快速发展</h2><p>➀多重因素推动增强现实技术快速发展<br><img src="http://img.blog.csdn.net/20170906105057141?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>➁人工智能技术、计算机视觉技术的进步和大数据的累积推动增强现实技术取得突破性进展</p>
<p>增强现实的核心技术是计算机视觉和人工智能。近年来，与此相关的技术取得了突破性进展。一方面，以神经网络为基础的深度学习算法在视觉识别领域的准确率超过95%。另一方面，互联网时代海量数据也为深度学习算法的训练提供了数据基础。<br><img src="http://img.blog.csdn.net/20170906105150549?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20170906105209290?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>➂“政策红利+市场教育 ”双轮驱动增强现实技术落地</p>
<p>2016年，有两个信号利好增强现实市场。第一，人工智能技术被提升至国家政策层面，这将极大推动增强现实技术落地；第二，一款名为Pokémon GO的AR+LBS游戏火遍全球，加速了增强现实的市场教育。</p>
<p><img src="http://img.blog.csdn.net/20170906105247627?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>➃虚实融合的特点促使增强现实技术行业应用前景广阔</p>
<p>由于增强现实（AR）的工具属性更强，因此其在企业级和消费级市场上都有较广阔的应用。</p>
<p>企业市场上，如军事、安防、工业维修等领域，可以使用AR进行远程的专家指导。医疗领域可以佩戴AR智能眼镜进行第一视角的手术直播或者辅助教学等。教育领域里，可以利用AR将二维图像三维化，并在此上面叠加一些信息，能有效解决知识传递的问题。</p>
<p>消费级市场上，有AR+LBS游戏，比如前段时间很火的Pokémon GO。商场可以利用AR进行立体营销，在旅游中，还可以与LBS的地理信息定位结合，达到线上下线信息的融合。未来甚至还可以延伸到社交等领域。<br><img src="http://img.blog.csdn.net/20170906105539642?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>➄增强现实技术将融合线上信息和线下物理操作</p>
<p>增强现实（AR）的本质之一是融合了虚与实两个平行的世界，模糊了线下线上的界限。</p>
<p>互联网时代，线下、线上信息不对称问题日益严重。而AR的出现正好可以打破这种界限，让人们在线下物理操作的同时，线上信息的访问也变得更自然。这在视觉上的直接表现就是虚实融合。<br><img src="http://img.blog.csdn.net/20170906105550927?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>➅增强现实市场规模将达千亿，市场潜力无限</p>
<p>增强现实市场潜力巨大，Digi-captical预测，到2020年，预计AR/VR市场规模达1500 亿美元。而AR将占据最大份额，为 1200 亿美元。到目前为止，主要科技公司在AR/VR方向的投资总额达到20亿美元。</p>
<p>在增强现实的收入来源预测中，硬件将占最大份额。这说明，早期的AR市场还处于一个技术驱动的阶段，并且会经历一段较长时间的技术红利期。<br><img src="http://img.blog.csdn.net/20170906105637460?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>➆更自然的人机交互需求推动增强现实行业发展</p>
<p>从计算机发展历程看，每一次人机交互的变革都带来巨大的产业革命。从早期鼠标加键盘的PC互联网时代，到触屏实现交互的移动互联网时代，再到未来的人工智能时代，一个总的趋势是：从有屏到无屏再到万物皆屏，从可触摸到无触摸。交互趋于自然流畅，人机交互变得更像人人交互。</p>
<p>这就对下一代个人计算平台提出了要求：第一，突破屏幕。交互应该在整个物理世界中进行。第二， 虚实结合。尤其在移动状态下，生活在物理空间的人们需要有更便捷的实时线上信息。第三，自然交互。语音、手势、图像都可以成为未来交互的入口。而这三个需求，最后都指向了增强现实。<br><img src="http://img.blog.csdn.net/20170906105750037?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="我国AR市场发展正处于热启动期"><a href="#我国AR市场发展正处于热启动期" class="headerlink" title="我国AR市场发展正处于热启动期"></a>我国AR市场发展正处于热启动期</h2><p>➀底层平台和技术、硬件、内容，以及行业应用构成增强现实产业链的主体</p>
<p>当前的增强现实产业链具有技术驱动型特点，人工智能技术和计算机视觉等核心底层技术制约产业发展。但是，以需求为起点的行业应用却是一个能将技术、硬件和内容结合起来的的商业闭环，是未来发力的重点。<br><img src="http://img.blog.csdn.net/20170906110220162?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>➁巨头基于自身业务生态，以实验室或并购的方式抢先布局底层技术<br><img src="http://img.blog.csdn.net/20170906110245033?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>➂初创厂商重点发力以智能眼镜为代表的硬件环节<br><img src="http://img.blog.csdn.net/20170906110326112?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>➃增强现实市场发展正处于热启动期</p>
<p>增强现实（AR）技术在经历了实验室的探索之后，开始走向产业。最有代表性的例子是2013年原计划谷歌眼镜的发布，将AR的市场教育推向一个高潮。但随后，2015年，谷歌宣布暂停“探索者”项目，AR市场暂时进入低谷期。不过，在2017年6月苹果宣布ARKit的使用场景和Google宣布开放ARCore技术之后，AR又一次站到台前。<br><img src="http://img.blog.csdn.net/20170906110533682?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>Analysys易观分析认为，AR市场目前还处在技术驱动的阶段，并且会经历一段较长时间的技术红利期。未来1-3年内，将有更多厂商进入AR市场，随着底层技术的成熟，硬件设备的完善，AR技术将应用到更多场景中，行业应用解决方案日益丰富。当AR整体产业链能够搭建一个软硬结合、汇集大量优质内容的平台的时候，将会迎来AR真正的爆发期。</p>
<p>➄增强现实技术的商业化还面临着一些阻碍因素<br><img src="http://img.blog.csdn.net/20170906110637551?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>##合适的时点和环节是切入AR市场的关键</p>
<p>➀切入市场的时间点取决于对商业机会的把握</p>
<p>找准行业中的变与不变，把握先机，顺势而为是切入增强现实市场的关键。过去30年，人类分别经历了以IBM和微软为代表的PC时代，以谷歌、BAT等为代表的互联网时代，以苹果、微信为代表的移动互联时代。这其中，变的是技术，是市场热点。而不变的是大的趋势，是娱乐、消费升级背后，人们对工具变革，更自然交互的需求。而未来满足这一需求的很可能是下一代个人计算平台—增强现实。<br><img src="http://img.blog.csdn.net/20170906110726470?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>➁对初创厂商而言：</p>
<p>明确自身定位，找准行业需求是切入增强现实市场的关键</p>
<p>Analysys易观分析认为，在找准需求的过程中，需要注意以下问题。</p>
<p>第一，明确自身定位。遵循行业本身的业务逻辑，提供行业增量价值，以合作者而非颠覆者的身份进入行业。</p>
<p>第二， 找准真正的刚需。技术的推广要结合真正的场景，通过小范围试错，针对用户的反馈进行产品快速迭代。深耕一点，不盲目追求大而全。</p>
<p>第三，找到跨行业共性的机会。通过技术的累积下沉，找到一种平台化的，可以以一个较低成本快速复制的商业模式。同时，善于利用产业内渠道资源。借助上下游资源，利用现有渠道实现产品推广和落地部署。<br><img src="http://img.blog.csdn.net/20170906110856152?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>➂对希望切入企业级市场的初创厂商而言</p>
<p>遵循行业逻辑，提供增量价值，解决“安全—增产—增效” 或许是一条可行之路。<br><img src="http://img.blog.csdn.net/20170906110927038?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>典型企业——亮亮视野：以被集成角色融入传统行业，提供增量价值<br><img src="http://img.blog.csdn.net/20170906111006189?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>亮亮视野：AR眼镜+行业解决方案，切入企业级市场，寻求平台化商业模式</p>
<p>通过智能眼镜与行业解决方案相结合的方式，亮亮视野切入了电力巡检、移动安防、和手术直播领域。试图走出一条“以需求为起点，软硬结合，能快速完成技术下沉和平台化复制的”商业化之路。</p>
<p><img src="http://img.blog.csdn.net/20170906111319277?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>➃对希望切入消费级市场的初创厂商而言</p>
<p>可找准标杆企业或平台型企业的战略方向和时机，借助大厂对市场的教育，选择合适时间点切入；针对产品特点，找准细分人群和场景；结合自身产品路线图，规划项目周期，完成产品迭代。<br><img src="http://img.blog.csdn.net/20170906111400095?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>典型企业——奥图科技：以C端用户为突破口，推进酷镜商业化进程</p>
<p>奥图科技是一个典型的以消费级市场为突破口的增强现实企业。目前选择从户外直播切入，希望实现细分市场和场景的突破。</p>
<p><img src="http://img.blog.csdn.net/20170906111552434?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>奥图科技以酷镜为依托，打造增强现实生态链</p>
<p>奥图科技的策略称为“螺旋式” 三步走。</p>
<p>第一步，满足产品的基本功能，如拍照、通信、导航等，实现产品落地。一来能延续用户的使用习惯，二来可以实现智能手机到眼镜的平滑过渡。</p>
<p>第二步，在此技术上加入增强现实信息，产品开始走向量产化。</p>
<p>第三步， 通过开放第三方应用平台，深挖用户社交行为数据，不断迭代产品，实现交互方式的创新。<br><img src="http://img.blog.csdn.net/20170906111634042?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>➄B2B2C也许是第三条可选择的道路</p>
<p>从企业用户切入，通过让B类用户直接付费，保证现金流的持续性；同时完成技术下沉和C类用户的数据积累，不断进行技术和产品迭代。</p>
<p><img src="http://img.blog.csdn.net/20170906111712335?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>典型企业——亮风台：依托算法、技术优势，构筑增强现实底层平台</p>
<p>亮风台是一家技术驱动，市场牵引型的公司。采取的是软硬结合、构筑平台的模式，夯实增强现实底层技术。<br><img src="http://img.blog.csdn.net/20170906111758307?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>亮风台：软硬结合+构筑平台，以AR智能眼镜为载体，切入娱乐、教育等领域</p>
<p>亮风台的特点是先从增强现实（AR）的核心软件开发工具HiAR SDK切入，将AR SDK嵌入到操作系统中；在此基础上搭载AR内容平台和前端浏览器。同时以智能眼镜为核心，扩展娱乐、教育、旅游、营销等方面的行业应用。</p>
<p>研究背景</p>
<p>2013年，谷歌计划推出谷歌眼镜，引发市场对增强现实(AR)技术的关注。2016年7月，一款名Pokémon GO的AR+LBS游戏再次引爆市场。机构甚至因此调高了AR市场预期。巨头看好AR市场，纷纷提前布局底层技术，加速了AR市场教育。</p>
<p>与此同时，国内增强现实初创厂商纷纷入场，先行布局AR市场，期望在巨大的AR市场中分得一杯羹。而如何选准合适的时机和环节切入则是创业者们十分关心的问题。本报告基于行业内的深度访谈，对上述问题进行深入分析和探讨。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本报告将从AR技术特征入手，研究技术背后的产业逻辑，通过对国内AR市场代表性初创厂商的研究，探讨未来AR的商业化之路。&lt;/p&gt;
&lt;p&gt;1，突破屏幕、虚实融合、自然交互是增强现实技术最重要的特征。&lt;br&gt;2，核心技术突破，政策利好，行业应用广泛和交互方式的变革推动增强现实技术
    
    </summary>
    
      <category term="杂谈" scheme="http://www.xiangzhihong.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://www.xiangzhihong.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin 喧嚣过后，Java 程序员未来在哪里</title>
    <link href="http://www.xiangzhihong.com/2017/08/16/Kotlin%20%E5%96%A7%E5%9A%A3%E8%BF%87%E5%90%8E%EF%BC%8CJava%20%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%AA%E6%9D%A5%E5%9C%A8%E5%93%AA%E9%87%8C/"/>
    <id>http://www.xiangzhihong.com/2017/08/16/Kotlin 喧嚣过后，Java 程序员未来在哪里/</id>
    <published>2017-08-15T16:00:00.000Z</published>
    <updated>2017-11-20T02:15:12.053Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.jobbole.com/111024/" target="_blank" rel="external">自从谷歌 I/O 2017宣布将支持 Kotlin 作为 Android 开发的 First-Class 语言</a>，各种 Kotlin 能否取代 Java 的文章、争论层出不穷。 作为一名老 Java 程序员，虽然类似场面见过不少，但心态是比较复杂的。</p>
<p>早在 2009 年，就有了 Scala 是否是 Java 后继者的争论。2009年7月 InfoQ 发表的一篇文章：「Roundup: Scala as the long term replacement for Java」，还谈到了 Java 之父 James Gosling 也偏爱 Scala 。（参考下图）</p>
<p><img src="http://jbcdn2.b0.upaiyun.com/2017/06/077c6c331d941ed20a062ac2efd822d2.png" alt="这里写图片描述"></p>
<p>尽管 Scala 在业界的口碑不错，还受到不少自命极客的程序猿的拥趸。在 Java 程序员当中，也掀起了一阵学习 Scala 的风潮。但时至今日，取代 Java，还远远谈不上。</p>
<p>Java 从诞生到现在，已有22年的历史。Java 在业界的霸主地位，虽然这些年一直受到 C/C++ 、Node.js 、GO 、Python 等语言的挑战，但一直稳如泰山。在众多领域的普及率、Java 不是榜首，也是名列前茅。下图是 2017年5月 最新的 TIOBE 编程语言排行榜。</p>
<p><img src="http://jbcdn2.b0.upaiyun.com/2017/06/18c7a545e04c4d27f284116a3ae94702.png" alt="这里写图片描述"></p>
<p>懂得居安思危、未雨绸缪，未来的运气才不会太差。</p>
<h1 id="Java-生态圈"><a href="#Java-生态圈" class="headerlink" title="Java 生态圈"></a>Java 生态圈</h1><p>Java 的生态环境开放、自由，在Sun/Oracle、Google、Apache、Eclipse基金会等各大厂商，还有技术大牛的共同努力下，Java 的生态圈异常繁荣，各种优秀的开源框架层出不穷。</p>
<h2 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h2><p>Spring Boot 是 Pivotal 团队推出的一个支持快速开发的框架，伴随 Spring4.0 而生，继承了 Spring 的优秀特质，简化了使用 Spring 编码、配置、部署的过程，使项目的开发变得简单、敏捷。</p>
<h2 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h2><p>Spring Cloud 是基于 Spring Boot 的一整套分布式系统下的微服务构建框架，包含了众多的子项目，如 Spring Cloud Config 、Spring Cloud Stream 等。</p>
<p>具体可参考：<a href="http://projects.spring.io/spring-cloud/" target="_blank" rel="external">http://projects.spring.io/spring-cloud/</a></p>
<h2 id="Hadoop-Spark"><a href="#Hadoop-Spark" class="headerlink" title="Hadoop/Spark"></a>Hadoop/Spark</h2><p>Hadoop 是首个获得极大应用的大数据框架，是大数据领域标志性的解决方案。</p>
<p>Spark 通过完善的内存计算和处理优化，极大的提升了速度，是具备流处理能力的下一代批处理框架。</p>
<p>Spark 体系还包括一系列附加库，如Spark Streaming 、Spark MLlib、Spark GraphX、SparkNet、CaffeOnSpark等。</p>
<h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><p>Kafka 是 LinkedIn 使用 Scala 开发的一个分布式消息中间件，可以实现不同应用之间的松耦合，由于其可扩展、高吞吐、低延迟、高可靠等特性而被广泛使用。</p>
<p>具体可参考：<a href="https://kafka.apache.org/intro" target="_blank" rel="external">https://kafka.apache.org/intro</a></p>
<h2 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h2><p>ElasticSearch 是基于 Lucene 的实时分布式搜索引擎，由于其搜索稳定、可靠，速度快、安装方便等特点，是使用最广泛的开源搜索引擎之一。</p>
<p>具体可参考《Elasticsearch: 权威指南》：<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="external">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html</a></p>
<h2 id="Nutch"><a href="#Nutch" class="headerlink" title="Nutch"></a>Nutch</h2><p>Nutch 是 Apache 旗下的高度可扩展、可伸缩、可插拔的开源网络爬虫框架，功能完整。</p>
<p>当然爬出框架还有很多：Heritrix、Crawler4j、WebCollector、WebMagic、SeimiCrawler、HtmlUnit 等，可根据实际项目需要选择。</p>
<p>在爬虫领域，Python 可能使用的更多一些，入门也简单。</p>
<p>爬虫的难点不在于语言的选择，无论 Java 、Python 都可以胜任，关键还是反反爬策略的制定，以及各种实战的积累。</p>
<h2 id="ethereumj"><a href="#ethereumj" class="headerlink" title="ethereumj"></a>ethereumj</h2><p>ethereumj 是以太坊协议的纯 Java 实现。不过在区块链领域，Go 语言的使用率可能更高一些。开发人员可以酌情选择。</p>
<p>代码可参考：<a href="https://github.com/ethereum/ethereumj" target="_blank" rel="external">https://github.com/ethereum/ethereumj</a></p>
<h2 id="Deeplearning4J"><a href="#Deeplearning4J" class="headerlink" title="Deeplearning4J"></a>Deeplearning4J</h2><p>DeepLearning4J（DL4J）是基于Java语言的分布式深度学习框架，在机器学习领域应用广泛。</p>
<p>入门可以参考《DL4J快速入门》：<a href="https://deeplearning4j.org/cn/quickstart" target="_blank" rel="external">https://deeplearning4j.org/cn/quickstart</a></p>
<p>不过由于谷歌的 TensorFlow 提供的 java API 也会日趋完善，目前不少 java 程序员也会选择 TensorFlow 作为机器学习的首选框架。</p>
<p>以上只是个人正在使用或练手，并且比较看好的一些开源框架。如果想了解更多，可以去 Github 上搜索。</p>
<p>譬如，在 GitHub 的 Search 框，输入 java stars:&gt;10000，可以搜索到星数最多、最热门的一些 Java 开源框架，如图：<br><img src="http://jbcdn2.b0.upaiyun.com/2017/06/3e48861d07ac2cf1d75cc91ed59c710f.png" alt="这里写图片描述"></p>
<p>如果想发掘 Java 前沿的开源项目，可以选择 Explore，点击 Trending 按钮，就可以看到近期热门的一些开源项目。</p>
<p>可以选择 today「当天热门」、this week「一周热门」和 this month「一月热门」，还可以在右侧选择语言来查看，比如选择 Java 语言，如图：<br><img src="http://jbcdn2.b0.upaiyun.com/2017/06/12a66f81788e8cbed51d8c2703199a8b.png" alt="这里写图片描述"></p>
<p>注：觉得好的，记得点击 star，大神贡献代码也需要鼓励  :)</p>
<p>可以看到，得益于最近被谷歌钦点为 Android 的官方语言，JetBrains 的 Kotlin 这一周成了最大的热门。</p>
<p>Java 的生态圈如此繁盛，Java 离陨落还尚需时日吧。</p>
<p>普通的 Java 程序员能更多的学习、使用这些优秀的框架，有能力的还可贡献一些代码，融入这个繁荣的生态，在我看来是上上策。</p>
<h1 id="JVM-语系"><a href="#JVM-语系" class="headerlink" title="JVM 语系"></a>JVM 语系</h1><p>Java 功能强大、生态丰富，已无需多言。但类型、语法与编程范式方面，存在一些局限性，也长期为人所诟病。</p>
<p>所以，有不少开发人员试图去寻求其他语言，既可以突破 Java 的这些局限，又可以与 Java 和谐共处。</p>
<p>Java 的祖师爷们也是非常明智，一开始就将编程语言 Java 与运行时环境 JVM 分离。</p>
<p>JVM 负责与操作系统的交互，屏蔽了具体操作系统的细节，制订了一整套生成字节码的规范，使得前面这一构想得以顺利实施。</p>
<p>如今有众多语言运行在 JVM 上，Groovy、Scala、Kotlin、Clojure 可能算得上是其中的佼佼者。</p>
<h2 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h2><p>Groovy 是类似 Ruby 的动态语言，适合编写脚本、插件、测试例，DSL (领域特定语言)等。知名的自动化建构工具 Gradle 主要就基于 Groovy 。</p>
<p>##Scala</p>
<p>Scala 的设计初衷，就是在 JVM 上整合面向对象与函数式编程的各种特性。</p>
<p>大名鼎鼎的大数据处理框架 Spark、消息中间件 Kafka、用于构建可容错，可扩展、高并发应用的Akka，都是基于 Scala 语言编写。</p>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><p>前几日刚升级为 Android 官方开发语言的 Kotlin ，近期是一个热门。从前面讲到的 Github 上的 star 指数也可窥见一斑。</p>
<p>基于 Kotlin 的库和框架、官方工具的支持、教学视频、文档等，也肯定会层出不穷。</p>
<h2 id="Clojure"><a href="#Clojure" class="headerlink" title="Clojure"></a>Clojure</h2><p>Clojure 被认为是基于 JVM 的 Lisp 方言，是函数式编程的铁杆。知名的大数据处理框架 Storm 主要就是由 Clojure 语言编写而成。</p>
<h2 id="Ceylon"><a href="#Ceylon" class="headerlink" title="Ceylon"></a>Ceylon</h2><p>Ceylon 是面向企业级应用设计开发的强静态类型编程语言，支持 Java 和 JavaScript 虚拟机。</p>
<p>具体可参考：<a href="https://ceylon-lang.org/documentation/current/" target="_blank" rel="external">https://ceylon-lang.org/documentation/current/</a></p>
<p>下图是 2017 年的 JVM 语言使用率调查：<br><img src="http://img.blog.csdn.net/20171025105231444?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>注：Groovy 达到了将近40％的份额，有点出乎我的意料。另外，得益于谷歌这么推一把，Kotlin 后续的比例有望来个大跃进。2008 年开始，Oracle主办的 JVM 语言峰会，为 JVM 语系的架构师、设计师、工程师，提供了非常好的开放式合作的机遇。<br>作为一名 Java 程序员，如果要选择第二门编程语言、或想来个多语言编程的话，选择 JVM 系的语言显然是一个非常不错的选择。</p>
<p>选择 JVM 系语言的一大优势是，前期可以使用熟悉的 Java 搭架子，局部功能优先尝试一下新语言，如此风险最小，与 Java 可以实现无缝切换。</p>
<p>至于具体如何选择，就要看你在功能性、实用性、舒适性、有趣性之间，如何取舍了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>Java 自身在性能、语法、编程范式等方面，也是在不断地提高改进。</strong></p>
<p>譬如 Java 8 引入了 Lambda 表达式、Optional、Streams、Date/Time API 等，Java 9 带来了 Jigsaw（模块化）等。</p>
<p><strong>Java 程序员可以适时的与时俱进。</strong></p>
<p>不过，谷歌等其他厂商由于对 Java 不具备掌控力，还有吃官司的风险，寻求 Java 的替代方案，动机是存在的。</p>
<p><strong>所以，作为 Java 程序员，过于依赖 Java，也是比较有风险的。适时的主动去改变，不要让自己哪天陷于被动。</strong></p>
<p>除了学习第二、第三编程语言，程序员可以把更多的重心，放在算法上。</p>
<p>以后的生活无处不算法，从娱乐影视推荐、新闻资讯过滤，到出行购物、住宿交友等等，我们都离不开算法。</p>
<p>尽管许多优秀的算法，包括最前沿的深度学习学法，都会有大牛奉献开源实现，但只有其中的原理深刻理解了，才能掌握、并利用好这些算法。</p>
<p><strong>技术的更迭，有时候会来的很突然，很猛烈。但系统的更迭，往往会慢得多。</strong></p>
<p>譬如 Cobol 语言，尽管语言本身陨落已超过 20 年，依然能在银行、证券、保险、电信等行业领域里见到 Cobol 的身影。</p>
<p>即使几年之后，Java 因各种阴差阳错、机缘巧合，开始走向陨落，Java 程序员们再混个 20 年，也是毫无压力。</p>
<p><strong>因为 Java 常年占据编程语言前列（榜首），目前有太多的平台使用 Java 了。</strong></p>
<p>Amazon、Google、eBay、阿里、京东、银行、证券、医疗、移动、电信、ERP等等。</p>
<p>各个领域，各行各业，Java 程序员吃老本也能再吃个 20 年……</p>
<p>当然，这只是 Java 抽中了下下签，您又恰巧选择了下下策。但愿不会如此。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://blog.jobbole.com/111024/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;自从谷歌 I/O 2017宣布将支持 Kotlin 作为 Android 开发的 First-Class 语言&lt;/a&gt;，各种 K
    
    </summary>
    
      <category term="编程语言" scheme="http://www.xiangzhihong.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="编程语言" scheme="http://www.xiangzhihong.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>vue.js与其他前端框架的对比</title>
    <link href="http://www.xiangzhihong.com/2017/08/13/Vue.js%E4%B8%8E%E5%85%B6%E4%BB%96%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E7%9A%84%E5%AF%B9%E6%AF%94/"/>
    <id>http://www.xiangzhihong.com/2017/08/13/Vue.js与其他前端框架的对比/</id>
    <published>2017-08-12T16:00:00.000Z</published>
    <updated>2017-11-20T02:00:52.200Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><p>React 和 Vue 有许多相似之处，它们都有：</p>
<ul>
<li>使用 Virtual DOM</li>
<li>提供了响应式 (Reactive) 和组件化 (Composable) 的视图组件。</li>
<li>将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库。</li>
</ul>
<p>由于有着众多的相似处，我们会用更多的时间在这一块进行比较。这里我们不只保证技术内容的准确性，同时也兼顾了平衡的考量。我们需要承认 React 比 Vue 更好的地方，比如更丰富的生态系统。</p>
<h2 id="相似之处"><a href="#相似之处" class="headerlink" title="相似之处"></a>相似之处</h2><p>React与Vue存在很多相似之处，例如他们都是JavaScript的UI框架，专注于创造前端的富应用。不同于早期的JavaScript框架“功能齐全”，Reat与Vue只有框架的骨架，其他的功能如路由、状态管理等是框架分离的组件。</p>
<h3 id="Virtual-DOM"><a href="#Virtual-DOM" class="headerlink" title="Virtual DOM"></a>Virtual DOM</h3><p>Vue.js(2.0版本)与React的其中最大一个相似之处，就是他们都使用了一种叫’Virtual DOM’的东西。所谓的Virtual DOM基本上说就是它名字的意思：虚拟DOM，DOM树的虚拟表现。它的诞生是基于这么一个概念：改变真实的DOM状态远比改变一个JavaScript对象的花销要大得多。</p>
<p>简单来说，Virtual DOM是一个映射真实DOM的JavaScript对象，如果需要改变任何元素的状态，那么是先在Virtual DOM上进行改变，而不是直接改变真实的DOM。当有变化产生时，一个新的Virtual DOM对象会被创建并计算新旧Virtual DOM之间的差别。之后这些差别会应用在真实的DOM上。</p>
<p>例子如下，我们可以看看下面这个列表在HTML中的代码是如何写的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ul class=&quot;list&quot;&gt;</div><div class="line">  &lt;li&gt;item 1&lt;/li&gt;</div><div class="line">  &lt;li&gt;item 2&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>而在JavaScript中，我们可以用对象简单地创造一个针对上面例子的映射：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    type: &apos;ul&apos;, </div><div class="line">    props: &#123;&apos;class&apos;: &apos;list&apos;&#125;, </div><div class="line">    children: [</div><div class="line">        &#123; type: &apos;li&apos;, props: &#123;&#125;, children: [&apos;item 1&apos;] &#125;,</div><div class="line">        &#123; type: &apos;li&apos;, props: &#123;&#125;, children: [&apos;item 2&apos;] &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>真实的Virtual DOM会比上面的例子更复杂，但它本质上是一个嵌套着数组的原生对象。当新一项被加进去这个JavaScript对象时，一个函数会计算新旧Virtual DOM之间的差异并反应在真实的DOM上。计算差异的算法是高性能框架的秘密所在，React和Vue在实现上有点不同。</p>
<p>Vue宣称可以<a href="https://cn.vuejs.org/v2/guide/comparison.html#React" target="_blank" rel="external">更快地计算出Virtual DOM</a>的差异，这是由于它在渲染过程中，会跟踪每一个组件的依赖关系，不需要重新渲染整个组件树。</p>
<p>而对于React而言，<a href="https://facebook.github.io/react/docs/react-component.html?utm_source=caibaojian.com#shouldcomponentupdate" target="_blank" rel="external">每当应用的状态被改变时</a>，全部子组件都会重新渲染。当然，这可以通过shouldComponentUpdate这个生命周期方法来进行控制，但Vue将此视为默认的优化。</p>
<h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p>React与Vue都鼓励组件化应用。这本质上说，是建议你将你的应用分拆成一个个功能明确的模块，每个模块之间可以通过合适的方式互相联系。在Vue中，如果你遵守一定的规则，你可以使用<a href="https://vuejs.org/v2/guide/single-file-components.html?utm_source=caibaojian.com" target="_blank" rel="external">单文件组件</a>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">//PastaItem.vue</div><div class="line"></div><div class="line">&lt;template&gt;</div><div class="line">&lt;li class=&quot;pasta-dish list-unstyled&quot;&gt;</div><div class="line">    &lt;div class=&quot;row&quot;&gt;</div><div class="line">        &lt;div class=&quot;col-md-3&quot;&gt;</div><div class="line">            &lt;img :src=&quot;this.item.image&quot; :alt=&quot;this.item.name&quot; /&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div class=&quot;col-md-9 text-left&quot;&gt;</div><div class="line">            &lt;h3&gt;&#123;&#123;this.item.name&#125;&#125;&lt;/h3&gt;</div><div class="line">            &lt;p&gt;</div><div class="line">                &#123;&#123;this.item.desc&#125;&#125;</div><div class="line">            &lt;/p&gt;</div><div class="line">            &lt;button v-on:click=&quot;addToOrderNew&quot; class=&quot;btn btn-primary&quot;&gt;Add to order&lt;/button&gt; &lt;mark&gt;&#123;&#123;this.orders&#125;&#125;&lt;/mark&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/li&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">    name: &apos;pasta-item&apos;,</div><div class="line">    props: [&apos;item&apos;],</div><div class="line">    data:  function()&#123;</div><div class="line">        return&#123;</div><div class="line">            orders: 0</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">        addToOrderNew: function(y)&#123;</div><div class="line">            this.orders += 1;</div><div class="line">            this.$emit(&apos;order&apos;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;style src=&quot;./Pasta.css&quot;&gt;&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>正如上面你看到的例子中，HTML, JavaScript和CSS都写在一个文件之中，你不再需要在.vue组件文件中引入CSS。<br>而在React语法中，JavaScript与JSX被写入同一个组件文件中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line"></div><div class="line">class PastaItem extends React.Component &#123;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        const &#123; details, index &#125; = this.props;</div><div class="line"></div><div class="line">        return (</div><div class="line">            &lt;li className=&quot;pasta-dish list-unstyled&quot;&gt;</div><div class="line">                &lt;div className=&quot;row&quot;&gt;</div><div class="line">                    &lt;div className=&quot;col-md-3&quot;&gt;</div><div class="line">                        &lt;img src=&#123;details.image&#125; alt=&#123;details.name&#125; /&gt;</div><div class="line">                    &lt;/div&gt;</div><div class="line">                    &lt;div className=&quot;col-md-9 text-left&quot;&gt;</div><div class="line">                        &lt;h3&gt;&#123;details.name&#125;&lt;/h3&gt;</div><div class="line">                        &lt;p&gt;</div><div class="line">                            &#123;details.desc&#125;</div><div class="line">                        &lt;/p&gt;</div><div class="line">                        &lt;button onClick=&#123;() =&gt; this.props.addToOrder(index)&#125; className=&quot;btn btn-primary&quot;&gt;Add to order&lt;/button&gt; &lt;mark&gt;&#123;this.props.orders || 0&#125;&lt;/mark&gt;</div><div class="line">                    &lt;/div&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default PastaItem;</div></pre></td></tr></table></figure>
<h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><p>在上面两个例子中，我们可以看到React和Vue都有’props’的概念，这是properties的简写。props在组件中是一个特殊的属性，允许父组件往子组件传送数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Object.keys(this.state.pastadishes).map(key =&gt;</div><div class="line">    &lt;PastaItem index=&#123;key&#125; key=&#123;key&#125; details=&#123;this.state.pastadishes[key]&#125; addToOrder=&#123;this.addToOrder&#125; orders=&#123;this.state.orders[key]&#125; /&gt;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>上面的JSX库组中，index, key, details, orders 与 addToOrder都是props，数据会被下传到子组件PastaItem中去。</p>
<p>在React中，这是必须的，它依赖一个“单一数据源”作为它的“状态”。而在Vue中，props略有不同。它们一样是在组件中被定义，但Vue依赖于模板语法，你可以通过模板的循环函数更高效地展示传入的数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;pasta-item v-for=&quot;(item, key) in samplePasta&quot; :item=&quot;item&quot; :key=&quot;key&quot; @order=&quot;handleOrder(key)&quot;&gt;&lt;/pasta-item&gt;</div></pre></td></tr></table></figure>
<h3 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h3><p>React和Vue都有自己的构建工具，你可以使用它快速搭建开发环境。React可以使用<a href="https://github.com/facebookincubator/create-react-app?utm_source=caibaojian.com" target="_blank" rel="external">Create React App (CRA)</a>，而Vue对应的则是<a href="https://github.com/vuejs/vue-cli?utm_source=caibaojian.com" target="_blank" rel="external">vue-cli</a>。两个工具都能让你得到一个根据最佳实践设置的项目模板。</p>
<p>由于CRA有很多选项，使用起来会稍微麻烦一点。这个工具会逼迫你使用<a href="https://webpack.js.org/?utm_source=caibaojian.com" target="_blank" rel="external">Webpack</a>和<a href="https://babeljs.io/?utm_source=caibaojian.com" target="_blank" rel="external">Babel</a>。而vue-cli则有<a href="https://github.com/vuejs-templates?utm_source=caibaojian.com" target="_blank" rel="external">模板列表</a>可选，能按需创造不同模板，使用起来更灵活一点。</p>
<p>事实上说，两个工具都非常好用，都能为你建立一个好环境。而且如果可以不配置Webpack的话，我和Jeff认为这是天大的好事。</p>
<h3 id="Chrome-开发工具"><a href="#Chrome-开发工具" class="headerlink" title="Chrome 开发工具"></a>Chrome 开发工具</h3><p>React和Vue都有很好的Chrome扩展工具去帮助你找出bug。它们会检查你的应用，让你看到Vue或者React中的变化。你也可以看到应用中的状态，并实时看到更新。</p>
<p>React的开发工具:<br><a href="https://cdn.deliciousbrains.com/content/uploads/2017/06/15151112/react-devtools.mp4" target="_blank" rel="external">https://cdn.deliciousbrains.com/content/uploads/2017/06/15151112/react-devtools.mp4</a></p>
<p>Vue的开发工具:<br><a href="https://cdn.deliciousbrains.com/content/uploads/2017/06/15151111/vue-devtools.mp4" target="_blank" rel="external">https://cdn.deliciousbrains.com/content/uploads/2017/06/15151111/vue-devtools.mp4</a></p>
<h2 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a>主要区别</h2><p>Vue与React最后一个相似但略有不同之处是它们配套框架的处理方法。相同之处在于，两个框架都专注于UI层，其他的功能如路由、状态管理等都交由同伴框架进行处理。</p>
<p>而不同之处是在于它们如何关联它们各自的配套框架。Vue的核心团队维护着<a href="https://github.com/vuejs/vue-router?utm_source=caibaojian.com" target="_blank" rel="external">vue-router</a>和<a href="https://github.com/vuejs/vuex?utm_source=caibaojian.com" target="_blank" rel="external">vuex</a>，它们都是作为官方推荐的存在。而React的<a href="https://github.com/ReactTraining/react-router?utm_source=caibaojian.com" target="_blank" rel="external">react-router</a>和<a href="http://redux.js.org/?utm_source=caibaojian.com" target="_blank" rel="external">react-redux</a>则是由社区成员维护，它们都不是官方维护的。</p>
<h3 id="模板-vs-JSX"><a href="#模板-vs-JSX" class="headerlink" title="模板 vs JSX"></a>模板 vs JSX</h3><p>React与Vue最大的不同是模板的编写。Vue鼓励你去写近似常规HTML的模板。写起来很接近标准HTML元素，只是多了一些属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">    &lt;template v-for=&quot;item in items&quot;&gt;</div><div class="line">        &lt;li&gt;&#123;&#123; item.msg &#125;&#125;&lt;/li&gt;</div><div class="line">        &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;</div><div class="line">    &lt;/template&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>这些属性也可以被使用在单文件组件中，尽管它需要在在<a href="https://vuejs.org/v2/guide/single-file-components.html?utm_source=caibaojian.com" target="_blank" rel="external">构建时</a>将组件转换为合法的JavaScript和HTML。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">  &lt;pasta-item v-for=&quot;(item, key) in samplePasta&quot; :item=&quot;item&quot; :key=&quot;key&quot; @order=&quot;handleOrder(key)&quot;&gt;&lt;/pasta-item&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>Vue鼓励你去使用HTML模板去进行渲染，使用相似于Angular风格的方法去输出动态的内容。因此，通过把原有的模板整合成新的Vue模板，Vue很容易提供旧的应用的升级。这也让新来者很容易适应它的语法。</p>
<p>React推荐你所有的模板通用JavaScript的语法扩展——<a href="https://facebook.github.io/react/docs/introducing-jsx.html?utm_source=caibaojian.com" target="_blank" rel="external">JSX</a>书写，不过这对于传统的前端开发人员需要相应的学习。同样的代码，用JSX书写的例子如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;ul className=&quot;pasta-list&quot;&gt;</div><div class="line">    &#123;</div><div class="line">        Object.keys(this.state.pastadishes).map(key =&gt;</div><div class="line">            &lt;PastaItem index=&#123;key&#125; key=&#123;key&#125; details=&#123;this.state.pastadishes[key]&#125; addToOrder=&#123;this.addToOrder&#125; orders=&#123;this.state.orders[key]&#125; /&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>React/JSX乍看之下，觉得非常啰嗦，但使用JavaScript而不是模板来开发，赋予了开发者许多编程能力。</p>
<h3 id="状态管理-vs-对象属性"><a href="#状态管理-vs-对象属性" class="headerlink" title="状态管理 vs 对象属性"></a>状态管理 vs 对象属性</h3><p>如果你对React熟悉，你就会知道应用中的状态是（React）关键的概念。也有一些配套框架被设计为管理一个大的state对象，如Redux。此外，state对象在React应用中是不可变的，意味着它不能被直接改变，在React中你需要使用setState()方法去更新状态。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">addToOrder(key) &#123;</div><div class="line">       //Make a copy of this.state</div><div class="line">       const orders = &#123; ...this.state.orders &#125;;</div><div class="line"></div><div class="line">       //update or add</div><div class="line">       orders[ key ] = orders[ key ] + 1 || 1;</div><div class="line">       this.setState( &#123; orders &#125; );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Vue中，state对象并不是必须的，数据由data属性在Vue对象中进行管理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">export default &#123;</div><div class="line">  name: &apos;app&apos;,</div><div class="line">  data() &#123;</div><div class="line">    return &#123;</div><div class="line">      samplePasta: samplePasta,</div><div class="line">      orders: &#123;&#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">...</div><div class="line">  methods: &#123;</div><div class="line">    handleOrder: function (key) &#123;</div><div class="line"></div><div class="line">      if (!this.orders.hasOwnProperty(key)) &#123;</div><div class="line">        this.$set(this.orders, key, &#123; count: 0 &#125;);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      this.orders[key].count += 1;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而在Vue中，则不需要使用如setState()之类的方法去改变它的状态，在Vue对象中，data参数就是应用中数据的保存者。</p>
<p>不过恶心的是React出了一个霸王条款：<a href="https://yq.aliyun.com/roundtable/59146?spm=5176.8217306.rtmain.26.ZEwc2t" target="_blank" rel="external">Facebook拒修改React开源许可</a></p>
<h1 id="Angularjs"><a href="#Angularjs" class="headerlink" title="Angularjs"></a>Angularjs</h1><p>Vue 的一些语法和 AngularJS 的很相似 (例如 v-if vs ng-if)。因为 AngularJS 是 Vue 早期开发的灵感来源。然而，AngularJS 中存在的许多问题，在 Vue 中已经得到解决。</p>
<h3 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h3><p>1，MVVM（Model）(View)(View-model)<br>2，模块化（Module）控制器（Contoller）依赖注入：<br>3，双向数据绑定：界面的操作能实时反映到数据，数据的变更能实时展现到界面。<br>4，指令(ng-click ng-model ng-href ng-src ng-if…)<br>5，服务Service($compile $filter $interval $timeout $http…)<br>其中双向数据绑定的实现使用了$scope变量的脏值检测，使用$scope.$watch（视图到模型），$scope.$apply(模型到视图)检测，内部调用的都是digest，当然也可以直接调用$scope.$digest进行脏检查。值得注意的是当数据变化十分频繁时，脏检测对浏览器性能的消耗将会很大，官方注明的最大检测脏值为2000个数据。</p>
<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>vue.js官网：是一套构建用户界面的 渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue 完全有能力驱动采用单文件组件和 Vue 生态系统支持的库开发的复杂单页应用。</p>
<p>Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p>
<p>（1）模块化，目前最热的方式是在项目中直接使用ES6的模块化，结合Webpack进行项目打包<br>（2）组件化，创造单个component后缀为.vue的文件，包含template(html代码)，script(es6代码),style(css样式)<br>（3）路由，<br>vue非常小巧，压缩后min源码为72.9kb，gzip压缩后只有25.11kb，想比Angular为144kb，可以自驾搭配使用需要的库插件，类似路由插件(Vue-router)，Ajax插件(vue-resource)等</p>
<p>下面从几个方面来比较一下Vue.js和Angular.js的区别</p>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><p>Angular 事实上必须用 TypeScript 来开发，因为它的文档和学习资源几乎全部是面向 TS 的。TS 有很多显而易见的好处 —— 静态类型检查在大规模的应用中非常有用，同时对于 Java 和 C# 背景的开发者也是非常提升开发效率的。<br>然而，并不是所有人都想用 TS —— 在中小型规模的项目中，引入 TS 可能并不会带来太多明显的优势。在这些情况下，用 Vue 会是更好的选择，因为在不用 TS 的情况下使用 Angular 会很有挑战性。<br>最后，虽然 Vue 和 TS 的整合可能不如 Angular 那么深入，我们也提供了官方的 类型声明 和 组件装饰器，并且知道有大量用户在生产环境中使用 Vue + TS 的组合。我们也和微软的 TS / VSCode 团队进行着积极的合作，目标是为 Vue + TS 用户提供更好的类型检查和 IDE 开发体验。</p>
<p>##大小和性能</p>
<p>在性能方面，这两个框架都非常的快，我们也没有足够的实际应用数据来下一个结论。如果你一定想看些数据的话，你可以参考这个<a href="http://stefankrause.net/js-frameworks-benchmark4/webdriver-ts/table.html" target="_blank" rel="external">第三方跑分</a>。单就这个跑分来看，Vue 似乎比 Angular 要更快一些。<br>在大小方面，最近的 Angular 版本中在使用了 AOT 和 tree-shaking 技术后使得最终的代码体积减小了许多。但即使如此，一个包含了 Vuex + Vue Router 的 Vue 项目 (30kb gzipped) 相比使用了这些优化的 angular-cli 生成的默认项目尺寸 (~130kb) 还是要小的多。<br>灵活性</p>
<p>Vue 相比于 Angular 更加灵活，Vue 官方提供了构建工具来协助你构建项目，但它并不限制你去如何组织你的应用代码。有人可能喜欢有严格的代码组织规范，但也有开发者喜欢更灵活自由的方式。<br>学习曲线</p>
<p>要学习 Vue，你只需要有良好的 HTML 和 JavaScript 基础。有了这些基本的技能，你就可以非常快速地通过阅读 指南 投入开发。<br>Angular 的学习曲线是非常陡峭的 —— 作为一个框架，它的 API 面积比起 Vue 要大得多，你也因此需要理解更多的概念才能开始有效率地工作。当然，Angular 本身的复杂度是因为它的设计目标就是只针对大型的复杂应用；但不可否认的是，这也使得它对于经验不甚丰富的开发者相当的不友好。</p>
<p>不过就算有这么多好处，但是相比Angular2，Vue还是有很多的不足：</p>
<ol>
<li>Angular2原生Form支持： Angular2原生的Form模块功能相当强大。除了双向绑定之类的基本功能，还能通过programatic API 控制dom元素的表单行为。也有成型API提供自定义validator。这一点Vue只有v-model和第三方库。对于后台之类的重表单应用，还是Ng2有优势。</li>
<li>依赖注入无论你喜不喜欢DI，这就是Angular2的强大功能之一。有DI可以在不改变代码结构的情况下完成功能替换。（如，在desktop和mobile有不同功能，可以通过注入不同service实现，而共用相同的template和directive）。Vue则需要程序员自己规划代码组织，用来支持共享组件。DI也可以用于类似module local state的功能。比如，一个视频播放控件有几个子组件完成，子组件需要分享一个状态。这一点Angular2有原生的service injection pattern。而Vue则没有官方推荐。</li>
<li>对标准向后兼容Angular2在一些细节上对标准有更好的支持。比如 list differ 算法中 Angular2 可以支持实现了Symbol.iterator的对象，而Vue只能支持Array。对Observable和Promise，Angular2在应用的各个地方，甚至模板级别都有支持(async pipe)。而Vue需要vue-rx等第三方库支持。Angular2的组件有shadow dom的实现可以选择，而Vue目前还没有。</li>
<li>测试Angular2一开始就设计好了如何对组件进行测试，而Vue组件虽然也很好写测试，但是没有官方推荐的唯一标准（当然，对视图是否需要测试还有待探讨）。除此以外，Angular2还有一些小功能比如检验模板的类型安全（即，模板里能在编译器保证没有引用model未定义的变量），不过AoT本身似乎还没有稳定，所以不能算优势。对TS的支持也是Angular好，当然前提是你喜欢TS。</li>
</ol>
<h1 id="Ember"><a href="#Ember" class="headerlink" title="Ember"></a>Ember</h1><p>Ember 是一个全能框架。它提供了大量的约定，一旦你熟悉了它们，开发会变得很高效。不过，这也意味着学习曲线较高，而且并不灵活。这意味着在框架和库 (加上一系列松散耦合的工具) 之间做权衡选择。后者会更自由，但是也要求你做更多架构上的决定。<br>也就是说，我们最好比较的是 Vue 内核和 Ember 的模板与数据模型层：</p>
<ul>
<li>Vue 在普通 JavaScript 对象上建立响应，提供自动化的计算属性。在 Ember 中需要将所有东西放在 Ember<br>对象内，并且手工为计算属性声明依赖。</li>
<li>Vue 的模板语法可以用全功能的 JavaScript 表达式，而 Handlebars 的语法和帮助函数相比来说非常受限。</li>
<li>在性能上，Vue 比 Ember 好很多，即使是 Ember 2.x 的最新 Glimmer 引擎。Vue 能够自动批量更新，而Ember 在关键性能场景时需要手动管理。</li>
</ul>
<h1 id="Knockout"><a href="#Knockout" class="headerlink" title="Knockout"></a>Knockout</h1><p>Knockout 是 MVVM 领域内的先驱，并且追踪依赖。它的响应系统和 Vue 也很相似。它在<a href="http://knockoutjs.com/documentation/browser-support.html" target="_blank" rel="external">浏览器支持</a>以及其他方面的表现也是让人印象深刻的。它最低能支持到 IE6，而 Vue 最低只能支持到 IE9。<br>随着时间的推移，Knockout 的发展已有所放缓，并且略显有点老旧了。比如，它的组件系统缺少完备的生命周期事件方法，尽管这些在现在是非常常见的。以及相比于 Vue 调用子组件的接口它的方法显得有点笨重。<br>如果你有兴趣研究，你还会发现二者在接口设计的理念上是不同的。这可以通过各自创建的 simple Todo List 体现出来。或许有点主观，但是很多人认为 Vue 的 API 接口更简单结构更优雅。</p>
<h1 id="Polymer"><a href="#Polymer" class="headerlink" title="Polymer"></a>Polymer</h1><p>Polymer 是另一个由谷歌赞助的项目，事实上也是 Vue 的一个灵感来源。Vue 的组件可以粗略的类比于 Polymer 的自定义元素，并且两者具有相似的开发风格。最大的不同之处在于，Polymer 是基于最新版的 Web Components 标准之上，并且需要重量级的 polyfills 来帮助工作 (性能下降)，浏览器本身并不支持这些功能。相比而言，Vue 在支持到 IE9 的情况下并不需要依赖 polyfills 来工作。<br>在 Polymer 1.0 版本中，为了弥补性能，团队非常有限的使用数据绑定系统。例如，在 Polymer 中唯一支持的表达式只有布尔值否定和单一的方法调用，它的 computed 方法的实现也并不是很灵活。<br>Polymer 自定义的元素是用 HTML 文件来创建的，这会限制使用 JavaScript/CSS (和被现代浏览器普遍支持的语言特性)。相比之下，Vue 的单文件组件允许你非常容易的使用 ES2015 和你想用的 CSS 预编译处理器。<br>在部署生产环境时，Polymer 建议使用 HTML Imports 加载所有资源。而这要求服务器和客户端都支持 Http 2.0 协议，并且浏览器实现了此标准。这是否可行就取决于你的目标用户和部署环境了。如果状况不佳，你必须用 Vulcanizer 工具来打包 Polymer 元素。而在这方面，Vue 可以结合异步组件的特性和 Webpack 的代码分割特性来实现懒加载 (lazy-loaded)。这同时确保了对旧浏览器的兼容且又能更快加载。<br>而 Vue 和 Web Component 标准进行深层次的整合也是完全可行的，比如使用 Custom Elements、Shadow DOM 的样式封装。然而在我们做出严肃的实现承诺之前，我们目前仍在等待相关标准成熟，进而再广泛应用于主流的浏览器中。</p>
<h1 id="Riot"><a href="#Riot" class="headerlink" title="Riot"></a>Riot</h1><p>Riot 2.0 提供了一个类似于基于组件的开发模型 (在 Riot 中称之为 Tag)，它提供了小巧精美的 API。Riot 和 Vue 在设计理念上可能有许多相似处。尽管相比 Riot ，Vue 要显得重一点，Vue 还是有很多显著优势的：</p>
<ul>
<li>过渡效果系统。Riot 现在还没有提供。</li>
<li>功能更加强大的路由机制，Riot 的路由功能的 API 是极少的。</li>
<li>更好的性能。Riot 使用了 遍历 DOM 树 而不是虚拟 DOM，但实际上用的还是脏检查机制，因此和 AngularJS患有相同的性能问题。</li>
<li>更多成熟工具的支持。Vue 提供官方支持 webpack 和 Browserify，而 Riot 是依靠社区来建立集成系统。</li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink&quot; title=&quot;React&quot;&gt;&lt;/a&gt;React&lt;/h1&gt;&lt;p&gt;React 和 Vue 有许多相似之处，它们都有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 Virtual DOM&lt;/li&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.xiangzhihong.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://www.xiangzhihong.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发证书管理</title>
    <link href="http://www.xiangzhihong.com/2017/08/13/iOS%E5%BC%80%E5%8F%91%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86/"/>
    <id>http://www.xiangzhihong.com/2017/08/13/iOS开发证书管理/</id>
    <published>2017-08-12T16:00:00.000Z</published>
    <updated>2017-11-20T02:05:33.081Z</updated>
    
    <content type="html"><![CDATA[<p>最近，没啥事情，就逛逛论坛，研究一些新技术，偶尔导入github上一些开源的iOS项目学习学习别人的一些写法。不过有时间，在运行别人的项目的时候，总会报一些错误，有些是语法上的错误，老的代码在新的编译环境下不通过，还有的因为因为签名导致的错误，如常见的错误提示：“Failed to create provisioning profile.”，ios的证书管理是ios开发中必须掌握的技能，本文先简单的总结下。</p>
<h2 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h2><p>证书，是苹果颁发给开发者的凭证，常常以.cer结尾的文件。这个.cer文件格式的证书是让开发者使用的设备（也就是你的Mac）有真机调试，发布APP的权限。形如：<br><img src="http://img.blog.csdn.net/20170907223413847?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>在苹果开发体系中，证书主要分为两种：开发证书和发布证书。</p>
<h3 id="Developer-Certification-开发证书"><a href="#Developer-Certification-开发证书" class="headerlink" title="Developer Certification(开发证书)"></a>Developer Certification(开发证书)</h3><p>安装在电脑上提供权限：开发人员通过设备进行真机测试。也可以生成副本供多台电脑安装；</p>
<h3 id="Distribution-Certification-发布证书"><a href="#Distribution-Certification-发布证书" class="headerlink" title="Distribution Certification(发布证书)"></a>Distribution Certification(发布证书)</h3><p>安装在电脑上提供发布iOS程序的权限：开发人员可以制做测试版和发布版的程序。不可生成副本，仅有配置该证书的电脑才可使用；</p>
<h2 id="授权文件"><a href="#授权文件" class="headerlink" title="授权文件"></a>授权文件</h2><p>授权文件是对设备如iPod Touch、iPad、iPhone的授权，文件内记录的是设备的UDID和程序的App Id，即：使被授权的设备可以安装或调试Bundle identifier与授权文件中记录的App Id对应的程序。<br>开发者帐号在创建授权文件时候会选择App Id，（开发者帐号下App Id中添加，单选）和UDID（开发者帐号下Devices中添加最多100个，多选）。授权文件分为两种，并对应相应的证书使用。</p>
<h3 id="Developer-Provisioning-Profile-开发授权文件"><a href="#Developer-Provisioning-Profile-开发授权文件" class="headerlink" title="Developer Provisioning Profile(开发授权文件)"></a>Developer Provisioning Profile(开发授权文件)</h3><p>在装有开发证书或副本的电脑上使用，开发人员选择该授权文件通过电脑将程序安装到授权文件记录的设备中，即可进行真机测试。<br>注意：确保电脑有权限真机调试，即安装了开发证书或副本；在开发工具中程序的Bundle identifier和选中使用的授权文件的App Id要一致；连接调试的设备的UDID在选中的授权文件中有记录。</p>
<h3 id="Distribution-Provisioning-Profile-发布授权文件"><a href="#Distribution-Provisioning-Profile-发布授权文件" class="headerlink" title="Distribution Provisioning Profile(发布授权文件)"></a>Distribution Provisioning Profile(发布授权文件)</h3><p>在装有发布证书的电脑上（即配置证书的电脑，只有一台）制做测试版和发布版的程序。<br>发布版就是发布到App Store上的程序文件，开发者帐号创建授权文件时选择store选项，选择App Id，无需选择UDID；<br>测试版就是在发布之前交给测试人员可同步到设备上的程序文件，开发者帐号创建授权文件时选择AdHoc，选择App Id和UDID；只有选中的UDID对应的设备才可能安装上通过该授权文件制做的程序。</p>
<h2 id="开发密钥"><a href="#开发密钥" class="headerlink" title="开发密钥"></a>开发密钥</h2><p>安装证书成功的情况下证书下都会生成Keychain，上面提到的证书副本（导出证书重新命名）就是通过配置证书的电脑导出Keychain（就是.p12文件）安装到其他机子上，让其他机子得到证书对应的权限。Developer Certification就可以制做副本Keychain分发到其他电脑上安装，使其可以进行真机测试。</p>
<h1 id="证书申请与使用"><a href="#证书申请与使用" class="headerlink" title="证书申请与使用"></a>证书申请与使用</h1><p>注：本部分截图全部来源于网上，笔者在最新的苹果环境中已验证。</p>
<p>1，登录苹果开发者中心，地址为：<a href="https://developer.apple.com。登录成功后在页面右侧选择“Certificates”。" target="_blank" rel="external">https://developer.apple.com。登录成功后在页面右侧选择“Certificates”。</a><br><img src="http://img.blog.csdn.net/20170907230431561?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20170907230509190?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>登录成功之后，可以看到和你账号相关的证书和账号等信息。<br><img src="http://img.blog.csdn.net/20170907230632528?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>2，如果你的账号是新的账号，则需要重新走申请流程。首先，需要生成CSR文件。在桌面快捷中打开钥匙串访问。<br><img src="http://img.blog.csdn.net/20170907230827206?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>打开右上方钥匙串访问栏-&gt;证书助理-&gt;从证书颁发机构请求证书…，然后填写相关信息。最后将.csr文件下载到本地硬盘。<br><img src="http://img.blog.csdn.net/20170907230936664?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20170907231104641?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>3，如果你还没有申请App ID，那么直接申请一个就可以。打开证书管理界面，点击左侧的APP IDs选项，点击+即可。<br><img src="http://img.blog.csdn.net/20170907231247217?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20170907231406923?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>然后填写相关的信息。<br><img src="http://img.blog.csdn.net/20170907231437755?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>最后会有一个详细的内容列表，对应无误后，提交完成。</p>
<p>4，证书申请，选择证书的类型，iOS罗列了开发常用的证书类型。<br><img src="http://img.blog.csdn.net/20170907232147349?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>如果是申请推送证书，则会关联一个App ID。<br><img src="http://img.blog.csdn.net/20170907232233330?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>接下来，需要上传之前建好的CSR文件。<br><img src="http://img.blog.csdn.net/20170907232328456?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>5，授权文件申请。和申请证书一样，系统会罗谢ios开发中的常用授权文件。<br><img src="http://img.blog.csdn.net/20170907232501380?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>选择关联App ID。<br><img src="http://img.blog.csdn.net/20170907232537922?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>6，在项目中选择运行的链接上真机，记得勾选自动管理证书选项。   <img src="http://img.blog.csdn.net/20170907233123146?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，没啥事情，就逛逛论坛，研究一些新技术，偶尔导入github上一些开源的iOS项目学习学习别人的一些写法。不过有时间，在运行别人的项目的时候，总会报一些错误，有些是语法上的错误，老的代码在新的编译环境下不通过，还有的因为因为签名导致的错误，如常见的错误提示：“Faile
    
    </summary>
    
      <category term="iOS" scheme="http://www.xiangzhihong.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://www.xiangzhihong.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Scala入门</title>
    <link href="http://www.xiangzhihong.com/2017/08/11/Scala%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.xiangzhihong.com/2017/08/11/Scala入门笔记/</id>
    <published>2017-08-10T16:00:00.000Z</published>
    <updated>2017-09-30T02:13:43.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scala入门"><a href="#Scala入门" class="headerlink" title="Scala入门"></a>Scala入门</h1><h2 id="Scala简介"><a href="#Scala简介" class="headerlink" title="Scala简介"></a>Scala简介</h2><p>ps：在最新的薪资调查中，Scala程序员的工资是平均最高的<a href="https://yq.aliyun.com/roundtable/57909?spm=5176.8091938.0.0.020PfH" target="_blank" rel="external">Scala工资</a>。<br>Scala是一门多范式的编程语言，一种类似java的编程语言，设计初衷是实现可伸缩的语言 、并集成面向对象编程和函数式编程的各种特性。Scala的官网地址为：<a href="http://www.Scala-lang.org/" target="_blank" rel="external">http://www.Scala-lang.org/</a><br>Scala有几项关键特性表明了它的面向对象的本质。例如，Scala中的每个值都是一个对象，包括基本数据类型（即布尔值、数字等）在内，连函数也是对象。另外，类可以被子类化，而且Scala还提供了基于mixin的组合（mixin-based composition）。与只支持单继承的语言相比，Scala具有更广泛意义上的类重用。Scala还包含了若干函数式语言的关键概念，包括高阶函数（Higher-Order Function）、局部套用（Currying）、嵌套函数（Nested Function）、序列解读（Sequence Comprehensions）等等。</p>
<p>Scala运行于Java平台（Java虚拟机），并兼容现有的Java程序。它也能运行于Java ME, CLDC（Java Platform, Micro Edition Connected Limited Device Configuration）上。还有另一.NET平台的实现，不过该版本更新有些滞后。Scala的编译模型（独立编译，动态类加载）与Java和C#一样，所以Scala代码可以调用Java类库（对于.NET实现则可调用.NET类库）。Scala包中包含了编译器和类库，以BSD许可证发布。</p>
<h2 id="Scala发展历史"><a href="#Scala发展历史" class="headerlink" title="Scala发展历史"></a>Scala发展历史</h2><ol>
<li>联邦理工学院洛桑（EPFL）的Martin Odersky于2001年基于Funnel的工作开始设计Scala。Funnel是把函数式编程思想和Petri网相结合的一种编程语言。Odersky先前的工作是Generic Java和javac（Sun Java编译器）。Java平台的Scala于2003年底/2004年初发布。.NET平台的Scala发布于2004年6月。该语言第二个版本，v2.0，发布于2006年3月。</li>
<li>截至2009年9月，最新版本是版本2.7.6。Scala 2.8预计的特性包括重写的Scala类库（Scala collections library）、方法的命名参数和默认参数、包对象（package object），以及Continuation.</li>
<li>2009年4月，Twitter宣布他们已经把大部分后端程序从Ruby迁移到Scala，其余部分也打算要迁移。此外，Wattzon已经公开宣称，其整个平台都已经是基于Scala基础设施编写的。</li>
</ol>
<h2 id="Scale语言特点"><a href="#Scale语言特点" class="headerlink" title="Scale语言特点"></a>Scale语言特点</h2><p><strong>快速实验</strong>:  Scala有交互式命令行(REPL),可以在上面快速的试各种语法和代码。这对学习新特性，或者实验新想法非常有用。</p>
<p><strong>一致性</strong>:  尽管Scala融合了静态类型系统、面向对象、函数式编程等语言特性，但却很少能看出融合的痕迹。Scala是我见到融合最多语言特性而又不显得杂乱的编程语言之一。</p>
<p><strong>类型安全</strong>： Scala创始人是教授，他先带领创建了java 5编译器，而后觉得Java有太多羁绊而发明了Scala。Scala编译器和类型系统非常强大，它的目标是尽量把软件错误消灭在编写过程中。Scala类型系统是图灵完备的，甚至可以在编译期间解决问题。</p>
<p><strong>面向对象</strong>:  Scala是面向对象的编程语言，所有的变量和方法都封装在对象中，可以把信息封装起来供外部使用。</p>
<p><strong>函数式编程</strong>： Scala同时又是函数式编程语言，函数可以独立存在，可以定义一个函数作为另一个函数的返回值，也可以接受函数作为函数的参数。这给组合函数带来了很大的便利。如何把面向对象编程形容成搭积木的话，函数式编程就像拼线条，更灵活和更有创意。</p>
<p><strong>异步编程</strong>:  由于函数式编程提倡变量不可变，使异步编程变得非常容易。同时Scala提供的Future，和akka类库，使得异步编程变得非常容易。</p>
<p><strong>基于JVM</strong>:  Scala会被编译成为jvm bytecode,所以Scala能无缝集成已有的Java类库。你可以非常自然的使用已经存在的非常庞大且稳定的Java类库，比如小巧好用的apache.common.*,或者Java上的各种工具类库。</p>
<p><strong>静态类型</strong>:  Scala是具备类型系统，通过编译时的检查，保证代码的安全性和一致性。类型系统具体支持以下特性：泛型类，型变注释（Variance Annotation），类型继承结构的上限和下限，把类别和抽象类型作为对象成员，复合类型，引用自己时显式指定类型，视图，多态方法。</p>
<p><strong>扩展性</strong>:  Scala的设计承认一个事实，即在实践中，某个领域特定的应用程序开发往往需要特定于该领域的语言扩展。Scala提供了许多独特的语言机制，可以以库的形式轻易无缝添加新的语言结构：任何方法可用作前缀或后缀操作符，可以根据预期类型自动构造闭包。联合使用以上两个特性，使你可以定义新的语句而无须扩展语法也无须使用宏之类的元编程特性。</p>
<p>其他特定：更高层的并发模型Actor、轻量级的函数语法、高阶、嵌套、局部套用（Currying）、与Java无缝地互操作</p>
<p>因为如此众多特性，用Scala可以优雅地编写简洁的代码，同时又能减少很多低级错误；能快速进行开发，又能保证系统性能、团队协作和长期维护。Scala的风格和特性已经吸引了大量的开发者。总而言之，Scala是一种函数式面向对象语言，它融汇了许多前所未有的特性，而同时又运行于JVM之上。随着开发者对Scala的兴趣日增，以及越来越多的工具支持，无疑Scala语言将成为你手上一件必不可少的工具。</p>
<h1 id="Scala语法"><a href="#Scala语法" class="headerlink" title="Scala语法"></a>Scala语法</h1><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>构造函数不是特殊的方法，他们是除了类的方法定义之外的代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class MyClass(x: Int, y: Int) &#123;           // Defines a new type MyClass with a constructor  </div><div class="line">  require(y &gt; 0, &quot;y must be positive&quot;)    // precondition, triggering an IllegalArgumentException if not met  </div><div class="line">  def this (x: Int) = &#123; ... &#125;             // auxiliary constructor   </div><div class="line">  def nb1 = x                             // public method computed every time it is called  </div><div class="line">  def nb2 = y  </div><div class="line">  private def test(a: Int): Int = &#123; ... &#125; // private method  </div><div class="line">  val nb3 = x + y                         // computed only once  </div><div class="line">  override def toString =                 // overridden method  </div><div class="line">      member1 + &quot;, &quot; + member2 </div><div class="line">  &#125;</div><div class="line"></div><div class="line">new MyClass(1, 2) // creates a new object of type</div></pre></td></tr></table></figure>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承和Java的语法类似。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">abstract class TopLevel &#123;     // abstract class  </div><div class="line">  def method1(x: Int): Int   // abstract method  </div><div class="line">  def method2(x: Int): Int = &#123; ... &#125;  </div><div class="line">&#125;</div><div class="line"></div><div class="line">class Level1 extends TopLevel &#123;  </div><div class="line">  def method1(x: Int): Int = &#123; ... &#125;  </div><div class="line">  override def method2(x: Int): Int = &#123; ...&#125; // TopLevel&apos;s method2 needs to be explicitly overridden  </div><div class="line">&#125;</div><div class="line"></div><div class="line">object MyObject extends TopLevel &#123; ... &#125; // defines a singleton object. No other instance can be created</div></pre></td></tr></table></figure></p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Scala 定义了两种类型的变量val和var，val类似于Java中的final变量，一旦初始化之后，不可以重新赋值。而var类似于一般的非final变量，可以任意重新赋值。<br>例如，定义一个字符串常变量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; val msg=&quot;Hello,World&quot;</div><div class="line">msg:String= Hello,World</div></pre></td></tr></table></figure>
<p>可以看到我们在定义这个变量时并不需要像Java一样定义其类型，Scala 可以根据赋值的内容推算出变量的类型。此外Scala语句也不需要以分号结尾。 如果在命令行中需要分多行输入，Scala解释器在新行前面显示|，表示该行接着上一行。例如，上面的代码可以改为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; val msg3=    </div><div class="line"></div><div class="line">           |&quot;Hello world 3rd time&quot;</div><div class="line"></div><div class="line">msg3:String= Hello world 3rd time</div></pre></td></tr></table></figure>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>scala类型系统以Any为根，分为AnyRef和AnyVal 两个分支体系，在AnyRef分支的最底层，有个Null类型的特殊类型，它被当作是所有AnyRef类型的子类型。更进一步在两个分支共同的最底层类型是Nothing类型，它被当作所有AnyRef和AnyVal类型的子类型。</p>
<h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>Scala的数值类型包含：</p>
<ul>
<li>Byte 1字节</li>
<li>Short 2</li>
<li>Int 4</li>
<li>Long 8</li>
<li>Foat</li>
<li>Double<br> 高精度类型 a = 低精度类型 b (同c自动转换)<br>低精度类型 b = 高精度类型 a (error :type mismatch)<h3 id="Boolen-类型"><a href="#Boolen-类型" class="headerlink" title="Boolen 类型"></a>Boolen 类型</h3></li>
<li>false</li>
<li>true</li>
</ul>
<h3 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a>Null类型</h3><p>Null类型只有一个唯一的值：null，可以被赋给所有的AnyRef类型变量List(Null,Null,1)</p>
<h2 id="Block代码块"><a href="#Block代码块" class="headerlink" title="Block代码块"></a>Block代码块</h2><p>Block 也是一个表达式,其最终的求得的值是最后一个表达式的结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;exp1;exp2&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">exp1</div><div class="line">exp2</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>第五步使用while来实现循环，和使用Java实现无太大差异，而Scala是面向函数的语言，更好的方法是采用“函数式”风格来编写代码。比如使用foreach方法来实现循环，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">args.foreach(arg =&gt; println(arg))</div></pre></td></tr></table></figure>
<p>该表达式，调用args的foreach方法，传入一个参数，这个参数类型也是一个函数（lambda表达式，和C#中概念类似）。这段代码可以再写的精简些，你可以利用Scala支持的缩写形式，如果一个函数只有一个参数并且只包含一个表达式，那么你无需明确指明参数。因此，上面的表达式还可以简写为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">args.foreach( println)</div></pre></td></tr></table></figure>
<p>而Scala的for循环比Java更加强大，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">for( a &lt;- 1 to 10)&#123; </div><div class="line">         println( &quot;Value of a: &quot; + a );</div><div class="line">         </div><div class="line">//或者</div><div class="line">// for loop execution with a range</div><div class="line">for( a &lt;- 1 until 10)&#123; </div><div class="line">       println( &quot;Value of a: &quot; + a );      &#125;</div></pre></td></tr></table></figure>
<h3 id="while-和-do-while"><a href="#while-和-do-while" class="headerlink" title="while 和 do while"></a>while 和 do while</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var a = 10;</div><div class="line">     // while loop execution</div><div class="line">      while( a &lt; 20 )&#123;</div><div class="line">         println( &quot;Value of a: &quot; + a ); </div><div class="line">         a = a + 1;&#125;</div><div class="line"> // do loop execution</div><div class="line">do &#123;        </div><div class="line">        println( &quot;Value of a: &quot; + a );</div><div class="line">         a = a + 1;</div><div class="line">      &#125;</div><div class="line">      while( a &lt; 20 )   &#125;</div></pre></td></tr></table></figure>
<h2 id="match表达式"><a href="#match表达式" class="headerlink" title="match表达式"></a>match表达式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">val alice = new Person(&quot;Alice&quot;, 25)</div><div class="line">val bob = new Person(&quot;Bob&quot;, 32)</div><div class="line">val charlie = new Person(&quot;Charlie&quot;, 32)</div><div class="line">for (person &lt;- List(alice, bob, charlie)) &#123;</div><div class="line"></div><div class="line">         person match &#123; </div><div class="line">            case Person(&quot;Alice&quot;, 25) =&gt; println(&quot;Hi Alice!&quot;)</div><div class="line">            case Person(&quot;Bob&quot;, 32) =&gt; println(&quot;Hi Bob!&quot;) </div><div class="line">            case Person(name, age) =&gt; println(</div><div class="line">               &quot;Age: &quot; + age + &quot; year, name: &quot; + name + &quot;?&quot;)</div><div class="line">         &#125;</div><div class="line">      &#125; </div><div class="line">   &#125;</div><div class="line">#这个类是特殊的用以比较的类</div><div class="line">case class Person(name: String, age: Int)</div><div class="line">&gt;&gt;&gt;</div><div class="line">Hi Alice!</div><div class="line">Hi Bob! </div><div class="line">Age: 32 year, name: Charlie?</div></pre></td></tr></table></figure>
<h2 id="Traits"><a href="#Traits" class="headerlink" title="Traits"></a>Traits</h2><p>是一些字段和行为的集合，可以扩展或混入（mixin）你的类中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">trait Car &#123;</div><div class="line">  val brand: String</div><div class="line">&#125;</div><div class="line"></div><div class="line">trait Shiny &#123;</div><div class="line">  val shineRefraction: Int</div><div class="line">&#125;</div><div class="line">class BMW extends Car &#123;</div><div class="line">  val brand = &quot;BMW&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过with关键字，一个类可以扩展多个特质：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class BMW extends Car with Shiny &#123;</div><div class="line">  val brand = &quot;BMW&quot;</div><div class="line">  val shineRefraction = 12</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">object IdFactory &#123;</div><div class="line">  private var counter = 0</div><div class="line">  def create(): Int = &#123;</div><div class="line">    counter += 1</div><div class="line">    counter</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">//获取单例实例</div><div class="line">val newId: Int = IdFactory.create()</div><div class="line">println(newId) // 1</div></pre></td></tr></table></figure>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>Scala语言的一个特点是支持面向函数编程，因此学习Scala的一个重要方面是改变之前的指令式编程思想（尤其是来自Java或C#背景的程序员），观念要向函数式编程转变。首先在看代码上要认识哪种是指令编程，哪种是函数式编程。一个简单的原则，如果代码中含有var类型的变量，这段代码就是传统的指令式编程，如果代码只有val变量，这段代码就很有可能是函数式代码，因此学会函数式编程关键是不使用vars来编写代码。更多Scala的知识请访问<a href="http://www.Scala-lang.org/" target="_blank" rel="external">官网</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Scala入门&quot;&gt;&lt;a href=&quot;#Scala入门&quot; class=&quot;headerlink&quot; title=&quot;Scala入门&quot;&gt;&lt;/a&gt;Scala入门&lt;/h1&gt;&lt;h2 id=&quot;Scala简介&quot;&gt;&lt;a href=&quot;#Scala简介&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="后端" scheme="http://www.xiangzhihong.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://www.xiangzhihong.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Android热修复技术总结</title>
    <link href="http://www.xiangzhihong.com/2017/08/05/Android%E7%83%AD%E4%BF%AE%E5%A4%8D%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    <id>http://www.xiangzhihong.com/2017/08/05/Android热修复技术总结/</id>
    <published>2017-08-04T16:00:00.000Z</published>
    <updated>2017-09-30T02:15:11.902Z</updated>
    
    <content type="html"><![CDATA[<p>插件化和热修复技术是Android开发中比较高级的知识点，是中级开发人员通向高级开发中必须掌握的技能，插件化的知识可以查我我之前的介绍：<a href="http://blog.csdn.net/xiangzhihong8/article/details/52876440" target="_blank" rel="external">Android插件化</a>。本篇重点讲解热修复，并对当前流行的热修复技术做一个简单的总结。</p>
<h1 id="热修复"><a href="#热修复" class="headerlink" title="热修复"></a>热修复</h1><h3 id="什么是热修复？"><a href="#什么是热修复？" class="headerlink" title="什么是热修复？"></a>什么是热修复？</h3><p>简单来讲，为了修复线上问题而提出的修补方案，程序修补过程无需重新发版！</p>
<h3 id="技术背景"><a href="#技术背景" class="headerlink" title="技术背景"></a>技术背景</h3><p>在正常软件开发流程中，线下开发-&gt;上线-&gt;发现bug-&gt;紧急修复上线。不过对于这种方式代价太大。<br><img src="http://img.blog.csdn.net/20170830150512155?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>而热修复的开发流程显得更加灵活，无需重新发版，实时高效热修复，无需下载新的应用，代价小，最重要的是及时的修复了bug。<br><img src="http://img.blog.csdn.net/20170830150614435?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h3 id="当前热门的热修复技术"><a href="#当前热门的热修复技术" class="headerlink" title="当前热门的热修复技术"></a>当前热门的热修复技术</h3><p>当前热门的热修复技术有：</p>
<ul>
<li><a href="http://blog.csdn.net/asialiyazhou/article/details/70495589" target="_blank" rel="external">QQ空间超级补丁</a>、微信[Tinker]</li>
<li><a href="https://help.aliyun.com/document_detail/53240.html" target="_blank" rel="external">阿里的Sophix</a>、<a href="http://baichuan.taobao.com/docs/doc.htm?spm=a3c0d.7629140.0.0.1EKYpC&amp;treeId=234&amp;articleId=105517&amp;docType=1" target="_blank" rel="external">阿里Hotfix</a></li>
<li>饿了么<a href="https://github.com/eleme/Amigo" target="_blank" rel="external">Amigo</a></li>
<li>美团<a href="https://github.com/Meituan-Dianping/Robust" target="_blank" rel="external">Robust</a></li>
<li><p>360<a href="https://github.com/Qihoo360/RePlugin" target="_blank" rel="external">RePlugin</a></p>
</li>
<li><p>…</p>
</li>
</ul>
<h2 id="热修复技术"><a href="#热修复技术" class="headerlink" title="热修复技术"></a>热修复技术</h2><p>要弄清热修复技术的原理，就要先弄清Android的ClassLoader机制，相关文章可以阅读之前的介绍：<a href="http://blog.csdn.net/xiangzhihong8/article/details/52880327" target="_blank" rel="external">ClassLoader类加载机制</a>。Android的ClassLoader分为PathClassLoader和DexClassLoader，它们都都继承自BaseDexClassLoader，其中PathClassLoader用来加载系统类和应用类；DexClassLoader用来加载jar、apk、dex文件。例如下面要介绍的阿里的Andfix和Sophix的原理如下：</p>
<h3 id="AndFix"><a href="#AndFix" class="headerlink" title="AndFix"></a>AndFix</h3><p><strong>AndFix</strong>：由补丁类的classLoader加载补丁类，在native层针对不同Android架构中的不同的ArtMethod结构调用对应的replaceMethod方法按照定义好的ArtMethod结构一一替换方法的所有信息如所属类、访问权限、代码内存地址等。<br>稳定性较差，会受到国内ROM厂商对ArtMethod结构更改的影响,所以这正是AndFix不支持很多机型的原因。</p>
<h3 id="Sophix"><a href="#Sophix" class="headerlink" title="Sophix"></a>Sophix</h3><p><strong>Sophix</strong>:由补丁类的classLoader加载补丁类，在native层直接memcpy(smeth,dmth,sizeof(ArtMethod))替换整个artMethod的结构。初始化类时会为这个类分配空间，AllocArtMethodArray会紧挨着的new出来放入art中的方法数组中。通过计算辅助类的前后两个方法的起始地址就可以计算出artMethod结构的大小了。<br>注：补丁类初始化时，也会分配自己的artMethod空间，拿这个修复过的新ArtMethod去替换旧ArtMethod的内容，不用管ArtMethod的结构。稳定性大大提高！</p>
<h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><h2 id="内部类编译"><a href="#内部类编译" class="headerlink" title="内部类编译"></a>内部类编译</h2><h3 id="静态内部类-非静态内部类区别"><a href="#静态内部类-非静态内部类区别" class="headerlink" title="静态内部类/非静态内部类区别"></a>静态内部类/非静态内部类区别</h3><p>内部类会被编译器生成同外部类一样的顶级类。只不过非静态内部类会持有外部类的引用。这也是Android性能优化建议Handler使用静态内部类，防止外部类Activity不能被回收导致造成OOM。</p>
<p>###内部类和外部类互相访问<br>内部类和外部类互相访问private方法和字段时，会自动在对应类为对方生成public的access&amp;**方法。</p>
<h3 id="热部署解决方案"><a href="#热部署解决方案" class="headerlink" title="热部署解决方案"></a>热部署解决方案</h3><p>外部类如果有内部类把所有的field/method的private访问权限改成proteced或者public内部类将所有的field/method的private访问权限改成proteced或者public。</p>
<h2 id="匿名内部类编译"><a href="#匿名内部类编译" class="headerlink" title="匿名内部类编译"></a>匿名内部类编译</h2><h3 id="匿名内部类命名规则"><a href="#匿名内部类命名规则" class="headerlink" title="匿名内部类命名规则"></a>匿名内部类命名规则</h3><p>外部类&amp;number。number即编译器根据匿名内部类出现在外部类中的顺序，依次累加。</p>
<h3 id="热部署解决方案-1"><a href="#热部署解决方案-1" class="headerlink" title="热部署解决方案"></a>热部署解决方案</h3><p>新增/减少匿名内部类对热部署是无解的，因为补丁修复工具拿到的是class文件，无法区别DexFileDemo&amp;1和DexFileDemo&amp;2，会导致类的顺序乱套。如果匿名内部类插入到末尾则是允许。</p>
<h2 id="域编译"><a href="#域编译" class="headerlink" title="域编译"></a>域编译</h2><h3 id="静态field-非静态field编译"><a href="#静态field-非静态field编译" class="headerlink" title="静态field,非静态field编译"></a>静态field,非静态field编译</h3><p>热部署不支持field/method增加和删除和 clinit方法的修改，静态field的初始化和静态代码块会被编译在编译器合成的方法clinit中，非静态字段的初始化会被编译在编译器生成的init无参构造函数中，</p>
<h3 id="静态field-静态代码块"><a href="#静态field-静态代码块" class="headerlink" title="静态field,静态代码块"></a>静态field,静态代码块</h3><p>clinit方法会在类加载阶段的类初始化时调用，clinit中静态field和静态代码块的出现顺序就是二者在源码中出现的顺序。因为类已经加载过了，所以就算修复了clinit方法也不会生效了。<br>dvmResolveClass-&gt;dvmLinkClass-&gt;dvmInitClass,然后执行clinit方法<br>以下情况会去加载一个类<br>1.new 一个类的对象时new instance<br>2.调用类的静态方法（invoke static）<br>3.获取类的静态域的值（sget）</p>
<h3 id="非静态field-非静态代码块"><a href="#非静态field-非静态代码块" class="headerlink" title="非静态field,非静态代码块"></a>非静态field,非静态代码块</h3><p>类的构造函数会被编译器翻译成init方法，会先进行非静态field和非静态代码块的初始化。它们出现的顺序也是和在源码中出现的顺序一样。<br>执行new instance指令时，如果类没有加载过，就尝试加载类。然后对对象内存分配，再然后执行invoke direct指令调用类的init构造函数进行初始化</p>
<h3 id="热部署解决方案-2"><a href="#热部署解决方案-2" class="headerlink" title="热部署解决方案"></a>热部署解决方案</h3><p>不支持对静态字段和静态代码块的修改，会导致热部署失败，只能冷启动生效。支持非静态字段和非静态代码块修改，热部署只是将init构造函数作为普通的方法变更。</p>
<h2 id="final-static-域编译"><a href="#final-static-域编译" class="headerlink" title="final static 域编译"></a>final static 域编译</h2><h3 id="final-static-域编译规则"><a href="#final-static-域编译规则" class="headerlink" title="final static 域编译规则"></a>final static 域编译规则</h3><p>final static引用类型初始化仍在clinit中final static基本类型和String类型，类加载初始化dvminitClass在执行clinit方法之前，先执行initSFields，这个方法为static域赋予默认值。引用类型默认NULL，final static修饰的基本类型和String类型会在这里初始化赋值。</p>
<h3 id="final-static-域优化原理"><a href="#final-static-域优化原理" class="headerlink" title="final static 域优化原理"></a>final static 域优化原理</h3><p>final static基本类型执行const/4指令,操作数在dex中的位置(encoded_array_item)就是在opcode后一个字节。<br>final static String类型执行const-string指令，本质同上只不过拿到的是字符串常量在dex文件结构中字符串常量区的索引id。dex文件有一块区域存储所有的字符串常量会被完整的加载到虚拟机内存中-字符串常量区。<br>final static引用类型执行sget指令,首先调用dvmDexGetResolveField看这个域是否之前解析过，没有的话调用dvmDexResolveField尝试解析域，如果这个静态域所在的类没有解析过，尝试调用dvmResolveClass,拿到这个sField，然后通过dvmDexGetResolveField(sField)获取这个静态值。</p>
<h3 id="热部署解决方案-3"><a href="#热部署解决方案-3" class="headerlink" title="热部署解决方案"></a>热部署解决方案</h3><p>final static基本类型/string类型最终引用的类型会被热部署替换掉。<br>final static引用类型因为会被翻译到clinit方法中，热部署失败。</p>
<h2 id="泛型编译"><a href="#泛型编译" class="headerlink" title="泛型编译"></a>泛型编译</h2><h3 id="为什么需要泛型"><a href="#为什么需要泛型" class="headerlink" title="为什么需要泛型"></a>为什么需要泛型</h3><p>Java泛型完全有编译器实现，由编译器执行类型检查和类型推断，生成非泛型字节码，称之为擦除。<br>没有泛型之前想要实现类泛型，利用所有类的父类时Object进行强转，这完全依赖程序员的自主性，很容易出现ClassCastException。泛型的出现解决了类型检查和类型推断的问题。</p>
<h3 id="泛型类型擦除"><a href="#泛型类型擦除" class="headerlink" title="泛型类型擦除"></a>泛型类型擦除</h3><p>Java字节码中不包含泛型类型信息，想要区别类型定义可以限定泛型类型 <t extends="" number=""></t></p>
<h3 id="类型擦除与多态的冲突和解决"><a href="#类型擦除与多态的冲突和解决" class="headerlink" title="类型擦除与多态的冲突和解决"></a>类型擦除与多态的冲突和解决</h3><p>父类是泛型类有setNumber(T value),子类想override setNumber(Number value)。然而实际父类的方法实际是setNumber(Object value),子类想重写却变成了重载，这就出现了类型擦除和多态之间的冲突。然而编译器自动帮我们合成了Bridge方法实现了重载，在子类中生成了相同签名bridge方法，内部实际调用子类的重写方法。</p>
<h3 id="泛型类型转换"><a href="#泛型类型转换" class="headerlink" title="泛型类型转换"></a>泛型类型转换</h3><p>编译器如果发现变量声明加上了泛型信息，编译器自动加上了check-cast的强制转换，因为编译器会为泛型做类型检查，所以自动的强制转换不会出现ClassCastException。</p>
<h3 id="热部署解决方案-4"><a href="#热部署解决方案-4" class="headerlink" title="热部署解决方案"></a>热部署解决方案</h3><p>如果父类补丁变成了增加了泛型则会增加Bridge方法，造成热部署失败。<br>将方法从void get(B t) 变成 B extends Number void get(B t)方法逻辑不会发生变化，但是方法的签名会发生变化，这种情况热修复没有意义，需要避免这种情况的发生。</p>
<h2 id="Lambda表达式编译"><a href="#Lambda表达式编译" class="headerlink" title="Lambda表达式编译"></a>Lambda表达式编译</h2><h3 id="Lambda表达式编译规则"><a href="#Lambda表达式编译规则" class="headerlink" title="Lambda表达式编译规则"></a>Lambda表达式编译规则</h3><p>Lamda表达式具有函数式编程的特点，是Java中最接近闭包的概念。函数式接口：一个接口具有唯一一个抽象方法<br>Java中的Runable和Comparator都是典型的函数式接口</p>
<p>Lamada表达式和匿名内部类的区别：<br>1.this关键字指包围Lamada表达式的类而不是指向匿名内部类自己<br>2.编译方式，Java编译器将Lamda表达式编译成类的私有方法，使用了Java7的invokedynamic动态绑定这个私有方法。而匿名内部类则是生成外部类&amp;number的新类.编译器都会在类下生成lamda$main$<em>*{ </em> }私有静态方法，这个方法实现了lamda表达式的逻辑，引用的变量都会变成方法的参数。</p>
<p>在HostSpot VM下解释class文件的lamda表达式：<br>invokeDynamic指令调用java/lang/invoke/LamdaMetafactory的metafactory这个静态方法。这个方法会在运行时生成实现函数式接口的具体类，这个具体类会调用那个静态私有方法。<br>在Android虚拟机下解释dex文件中的lamda表达式：则是在优化成dex文件的时候就生成了这个具体类。</p>
<h3 id="热部署解决方案-5"><a href="#热部署解决方案-5" class="headerlink" title="热部署解决方案"></a>热部署解决方案</h3><p>新增lamada表达式会导致外部类新增一个辅助方法。修改的lamda表达式逻辑引用了外部变量，会导致辅助类持有了外部对象，会新增这个外部对象的变量。也是会导致热修复失败。</p>
<p>#Sophix与QQ超级补丁和Tinker技术比较<br>针对现在市面上比较流行的热修复方案，这里选择Sophix、QQ超级补丁和Tinker进行简单的介绍。前面说过，类似于qq空间和微信的实现方式都需要重新启动才能修复bug，而阿里的Sophix采用的是非浸入式的方式不需要冷启动。</p>
<h2 id="QQ空间超级补丁"><a href="#QQ空间超级补丁" class="headerlink" title="QQ空间超级补丁"></a>QQ空间超级补丁</h2><p>QQ空间超级补丁采用的插桩方式，入侵打包流程，单独放一个帮助类在独立的dex中让其他类调用，阻止类在dexopt时被打伤CLASS_ISPREVERIFIED标记。其原理如下图：<br><img src="http://img.blog.csdn.net/20170830155305761?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>加载补丁dex得到dexFile对象作为参数构建一个Element对象插入到dexElement数组最前面。<br>Tinker提供差量包，整体替换dex的方案。将patch.dex与应用的class.dex合并生成一个完整的dex，加载完整的dex得到dexFile对象为参数构建一个Element对象替换dexElements数组。<br>官方multiDex没有补丁查询更新，下载补丁待下次启动时生效。<br>其流程可以总结为如下图所示：<br><img src="http://img.blog.csdn.net/20170830155426086?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>不过细心的读者会发现，QQ空间超级补丁在使用 过程中还存在如下问题：<br>1.不支持即时生效，必须通过重启才能生效。</p>
<p>2.为了实现修复这个过程，必须在应用中加入两个dex!dalvikhack.dex中只有一个类，对性能影响不大，但是对于patch.dex来说，修复的类到了一定数量，就需要花不少的时间加载。对手淘这种航母级应用来说，启动耗时增加2s以上是不能够接受的事。</p>
<p>3.在ART模式下，如果类修改了结构，就会出现内存错乱的问题。为了解决这个问题，就必须把所有相关的调用类、父类子类等等全部加载到patch.dex中，导致补丁包异常的大，进一步增加应用启动加载的时候，耗时更加严重。</p>
<p>针对上面的问题，腾讯出了QFix方案。<br>在native层提前调用dvmResolveClass，是的在dvmResolve中调用dvmDexGetResolve不为null，也避免了校验一致性的问题。<br>这个方案要求传递的在多dex情况下，referrer类必须跟patch类是同一个dex。fromUnverifiedConstant必须为true。referrer必须提前加载。<br>这方案还要一些问题，在dexopt之后绕过，但是dexopt会改变很多原先的逻辑，许多odex层面的优化会写死字段和访问方法的偏移。这会造成很严重的BUG。</p>
<h2 id="微信Tinker"><a href="#微信Tinker" class="headerlink" title="微信Tinker"></a>微信Tinker</h2><p>微信针对QQ空间超级补丁技术的不足提出了一个提供DEX差量包，整体替换DEX的方案。主要的原理是与QQ空间超级补丁技术基本相同，区别在于不再将patch.dex增加到elements数组中，而是差量的方式给出patch.dex，然后将patch.dex与应用的classes.dex合并，然后整体替换掉旧的DEX文件，以达到修复的目的。其原理图如下：<br><img src="http://img.blog.csdn.net/20170830160319806?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>微信的热修复的流程如图所示：<br><img src="http://img.blog.csdn.net/20170830160404197?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>不过微信的方案仍然会有如下问题：</p>
<p>1.与超级补丁技术一样，不支持即时生效，必须通过重启应用的方式才能生效。</p>
<p>2.需要给应用开启新的进程才能进行合并，并且很容易因为内存消耗等原因合并失败。</p>
<p>3.合并时占用额外磁盘空间，对于多DEX的应用来说，如果修改了多个DEX文件，就需要下发多个patch.dex与对应的classes.dex进行合并操作时这种情况会更严重，因此合并过程的失败率也会更高。</p>
<h2 id="HotFix"><a href="#HotFix" class="headerlink" title="HotFix"></a>HotFix</h2><p>阿里的HotFix方案，相对于QQ空间超级补丁技术和微信Tinker来说，定位于紧急BUG修复的场景下，能够最及时的修复BUG，下拉补丁立即生效无需等待。<br><img src="http://img.blog.csdn.net/20170830160645779?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>AndFix不同于QQ空间超级补丁技术和微信Tinker通过增加或替换整个DEX的方案，提供了一种运行时在Native修改Filed指针的方式，实现方法的替换，达到即时生效无需重启，对应用无性能消耗的目的。其原理如下：<br><img src="http://img.blog.csdn.net/20170830160828982?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>对于实现方法的替换，需要在Native层操作，主要经过三个步骤：<br><img src="http://img.blog.csdn.net/20170830160953982?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>不过HotFix也有不足：<br>1.不支持新增字段，以及修改方法，也不支持对资源的替换。</p>
<p>2.由于厂商的自定义ROM，对少数机型暂不支持。兼容性差。<br>综上，对于上面的几种框架技术总结如下：<br><img src="http://img.blog.csdn.net/20170830161151595?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h1 id="热修复方案总结"><a href="#热修复方案总结" class="headerlink" title="热修复方案总结"></a>热修复方案总结</h1><p>代码修复有两大主要方案：一种是阿里系的底层替换方案，另一种是腾讯系的类加载方案。底层替换方案限制颇多，但时效性最好，加载轻快，立即见效。类加载方案时效性差，需要重新冷启动才能见效，但修复范围广，限制少。</p>
<h2 id="底层替换方案"><a href="#底层替换方案" class="headerlink" title="底层替换方案"></a>底层替换方案</h2><p>底层替换方案是在已经加载了的类中直接替换掉原有方法，是在原来类的基础上进行修改的。因而无法实现对与原有类进行方法和字段的增减，因为这样将破坏原有类的结构。</p>
<p>一旦补丁类中出现了方法的增加和减少，就会导致这个类以及整个Dex的方法数的变化。方法数的变化伴随着方法索引的变化，这样在访问方法时就无法正常地索引到正确的方法了。</p>
<p>如果字段发生了增加和减少，和方法变化的情况一样，所有字段的索引都会发生变化。并且更严重的问题是，如果在程序运行中间某个类突然增加了一个字段，那么对于原先已经产生的这个类的实例，它们还是原来的结构，这是无法改变的。而新方法使用到这些老的实例对象时，访问新增字段就会产生不可预期的结果。</p>
<p>这是这类方案的固有限制，而底层替换方案最为人诟病的地方，在于底层替换的不稳定性。</p>
<p>传统的底层替换方式，不论是Dexposed、Andfix或者其他安全界的Hook方案，都是直接依赖修改虚拟机方法实体的具体字段。例如，改Dalvik方法的jni函数指针、改类或方法的访问权限等等。这样就带来一个很严重的问题，由于Android是开源的，各个手机厂商都可以对代码进行改造，而Andfix里ArtMethod的结构是根据公开的Android源码中的结构写死的。如果某个厂商对这个ArtMethod结构体进行了修改，就和原先开源代码里的结构不一致，那么在这个修改过了的设备上，通用性的替换机制就会出问题。这便是不稳定的根源。</p>
<p>而我们也对代码的底层替换原理重新进行了深入思考，从克服其限制和兼容性入手，以一种更加优雅的替换思路，实现了即时生效的代码热修复。sophix实现的是一种无视底层具体结构的替换方式，也就是把原先这样的逐一替换：</p>
<p>这么一来，我们不仅解决了兼容性问题，并且由于忽略了底层ArtMethod结构的差异，对于所有的Android版本都不再需要区分，代码量大大减少。即使以后的Android版本不断修改ArtMethod的成员，只要保证ArtMethod数组仍是以线性结构排列，就能直接适用于将来的Android 8.0、9.0等新版本，无需再针对新的系统版本进行适配了。</p>
<h2 id="类加载方案"><a href="#类加载方案" class="headerlink" title="类加载方案"></a>类加载方案</h2><p>类加载方案的原理是在app重新启动后让Classloader去加载新的类。因为在app运行到一半的时候，所有需要发生变更的类已经被加载过了，在Android上是无法对一个类进行卸载的。如果不重启，原来的类还在虚拟机中，就无法加载新类。因此，只有在下次重启的时候，在还没走到业务逻辑之前抢先加载补丁中的新类，这样后续访问这个类时，就会Resolve为新类。从而达到热修复的目的。</p>
<p>再来看看腾讯系三大类加载方案的实现原理。QQ空间方案会侵入打包流程，并且为了hack添加一些无用的信息，实现起来很不优雅。而QFix的方案，需要获取底层虚拟机的函数，不够稳定可靠，并且有个比较大的问题是无法新增public函数。</p>
<p>微信的Tinker方案是完整的全量dex加载，并且可谓是将补丁合成做到了极致，然而我们发现，精密的武器并非适用于所有战场。Tinker的合成方案，是从dex的方法和指令维度进行全量合成，整个过程都是自己研发的。</p>
<p>虽然可以很大地节省空间，但由于对dex内容的比较粒度过细，实现较为复杂，性能消耗比较严重。实际上，dex的大小占整个apk的比例是比较低的，一个app里面的dex文件大小并不是主要部分，而占空间大的主要还是资源文件。因此，Tinker方案的时空代价转换的性价比不高。</p>
<p>其实，dex比较的最佳粒度，应该是在类的维度。它既不像方法和指令维度那样的细微，也不像bsbiff比较那般的粗糙。在类的维度，可以达到时间和空间平衡的最佳效果。基于这个准则，我们另辟蹊径，实现了一种完全不同的全量dex替换方案。</p>
<p>sophix采用的也是全量合成dex的技术，这个技术是从手淘插件化框架Atlas汲取的。直接利用Android原先的类查找和合成机制，快速合成新的全量dex。这么一来，我们既不需要处理合成时方法数超过的情况，对于dex的结构也不用进行破坏性重构。</p>
<p><img src="http://img.blog.csdn.net/20170830163628022?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>从图中可以看到，我们重新编排了包中dex的顺序。这样，在虚拟机查找类的时候，会优先找到classes.dex中的类，然后才是classes2.dex、classes3.dex，也可以看做是dex文件级别的类插桩方案。这个方式十分巧妙，它对旧包与补丁包中classes.dex的顺序进行了打破与重组，最终使得系统可以自然地识别到这个顺序，以实现类覆盖的目的。这将会大大减少合成补丁的开销。</p>
<h2 id="资源修复"><a href="#资源修复" class="headerlink" title="资源修复"></a>资源修复</h2><p>在Android热修复的过程中，不仅需要对错误的代码进行修复，还需要对资源文件进行修复。目前市面上的资源热修复方案基本上都是参考<a href="http://blog.csdn.net/xiangzhihong8/article/details/64906131" target="_blank" rel="external">Instant Run</a>的实现。Instant Run实现过程大概分为两部：<br>1、构造一个新的AssetManager,并通过反射条用addAssetPath,把这个完整的新资源包加入到AssetManager中。这样就得到了一个含有所有新资源的AssetManager。</p>
<p>2、找到所有之前引用到原AssetManager的地方，通过反射，把引用处替换为AssetManager</p>
<p>这种方式下发完整的包很占用空间。而像有些方案，是先进行对资源包做差量，在运行时合成完整包再加载。这样确实减少包的体积，但是在运行时多了合成的操作，耗费了运行时间喝内存。合成后的包也是完整的包，仍旧会占磁盘空间。</p>
<h2 id="so库修复"><a href="#so库修复" class="headerlink" title="so库修复"></a>so库修复</h2><p>so库的修复本质上是对native方法的修复和替换。我们知道在JNI编程中，native方法可以通过动态注册和静态注册两种方式进行。动态注册的native方法必须实现<code>JNI_OnLoad</code>方法，同时实现一个<code>JNINativeMethod[]</code>数组，静态注册的native方法必须是<code>Java+类完整路径+方法名</code>的格式。</p>
<p><img src="http://img.blog.csdn.net/20170830164521841?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>动态注册的native方法映射通过加载so库过程中调用JNI_OnLoad方法调用完成，静态注册的native方法映射是在该native方法第一次执行的时候才完成映射，当然前提是该so库已经load过。</p>
<p>我们采用的是类似类修复反射注入方式。把补丁so库的路径插入到nativeLibraryDirectories数组的最前面，就能够达到加载so库的时候是补丁so库，而不是原来so库的目录，从而达到修复的目的。</p>
<p><img src="http://img.blog.csdn.net/20170830164634717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>参考：<a href="http://www.jianshu.com/p/ed03e8e4b08f" target="_blank" rel="external">http://www.jianshu.com/p/ed03e8e4b08f</a><br><a href="http://tinkerpatch.com/Docs/SDK" target="_blank" rel="external">Tinker集成</a><br><a href="https://help.aliyun.com/document_detail/53240.html" target="_blank" rel="external">Sophix集成</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;插件化和热修复技术是Android开发中比较高级的知识点，是中级开发人员通向高级开发中必须掌握的技能，插件化的知识可以查我我之前的介绍：&lt;a href=&quot;http://blog.csdn.net/xiangzhihong8/article/details/52876440&quot;
    
    </summary>
    
      <category term="Android" scheme="http://www.xiangzhihong.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.xiangzhihong.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>人工智能当道，你离失业还有多远</title>
    <link href="http://www.xiangzhihong.com/2017/07/25/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%BD%93%E9%81%93%EF%BC%8C%E4%BD%A0%E7%A6%BB%E5%A4%B1%E4%B8%9A%E8%BF%98%E6%9C%89%E5%A4%9A%E8%BF%9C/"/>
    <id>http://www.xiangzhihong.com/2017/07/25/人工智能当道，你离失业还有多远/</id>
    <published>2017-07-24T16:00:00.000Z</published>
    <updated>2017-11-20T02:18:50.186Z</updated>
    
    <content type="html"><![CDATA[<p>当今社会最火爆的两个话题，一个是人工智能，一个是云计算。今天我们来聊聊人工智能。近年来，人工智能在国家和社会的持续关注下得到了大力的发展，展望未来，以工业4.0 为代表的智能技术将影响包括中国在内的全球劳动力就业市场。</p>
<p>近年来，一些低端的产业正在被以人工智能蚕食。前不久，富士康上了一批机器人，几万人被迫离开流水线，回到市场重新找工作。如今，人工只能在医疗、教育、咨询服务等领域已无人能敌。根据最近几年的发展趋势和经济热点领域，可以看出来，人们正在被逐渐从重复机械的工作和体力工作中解放出来，这也是社会演化的大势所趋。</p>
<h1 id="信息咨询领域"><a href="#信息咨询领域" class="headerlink" title="信息咨询领域"></a>信息咨询领域</h1><p>作为一项工作内容重复性高的工作，客服的上手可谓相当容易，再加上人工客服人手的不足，人力成本也日渐上升，不少人曾断言会有人工智能客服出现，人工传统客服将没有必要存在。下面以上海网萌客服公司为例来看看人工智能技术对于传统客服公司的影响。</p>
<p>上海网萌客服公司将自家的客服与人工智能客服做了对比，发现使用人工智能客服后，将客服系统自动化确实会大大节省公司的时间和金钱。但是眼下，由于人工智能客服暂时处于发展阶段，许多颇带“人情味”的问题它还是没有办法解决。</p>
<p>比如说，客服就是专业为客户服务，但是如果把在线客服仅仅定位于和客户的网上交流，那么说这是仅仅服务客户的第一步，一个有着专业知识和良好沟通技巧的客服沟通，可以给客户更多的购物建议，更完善的解答客户的疑问，更快速的对买家售后问题给出反馈，从而更好的服务于客户，而人工智能客服在买家问题上与网萌客服相比只能扮演打杂的角色，回答一些语义非常明确直白的问题，无法给买家更全面的建议。</p>
<p>当买家在网萌客服的服务下，引导性的完成了一次良好的交易后，买家不仅了解卖家的服务态度，也对卖家的商品，物流有了切身的体验，当买家需要再次购买的时候，就会倾向性的选择所熟悉和所了解的商家，从而提高了客户的再次购买机率，而人工智能客服在面对许多不够清晰的问题时，机器服务完全无法理解，从而没办法进行引导性话语权，促成成交。</p>
<p>所以，目前在咨询领域，阻碍人工智能客服实现跨越式发展现在主要有三个问题：移情、想象力和主动学习能力。不过对于一些简单的情况处理，人工智能还是绰绰有余的。</p>
<h1 id="故宫售票处都拆了"><a href="#故宫售票处都拆了" class="headerlink" title="故宫售票处都拆了"></a>故宫售票处都拆了</h1><p>前几天，一条消息刷爆了科技圈：任性的故宫居然拆了售票处，百名售票员瞬间失业，印刷厂失去每天80000张印刷业务。淘汰我们的从来不是竞争对手，是我们不能跟上的时代观念。</p>
<p>就好像大型联合收割机替代了农民手工收割一样，无人超市会逐渐取代传统超市。机器人写稿，横空出世的无人超市，百度的无人驾驶汽车开上五环，亚马逊无人机送货。</p>
<h1 id="失业究竟离我们还有多远"><a href="#失业究竟离我们还有多远" class="headerlink" title="失业究竟离我们还有多远"></a>失业究竟离我们还有多远</h1><p>失业距离我们并不遥远。没有经验的应届生，因为没有方向和目标以及过高的期待失业。有经验的老鸟，因为自视甚高，不能适应变化，被经验困住失业，经理人因为决策不能带动企业发展而被调职。你看，每个阶段的我们有每个阶段的烦恼。</p>
<p>而更可怕的是与我们竞争的不止是人，还有机器人。人工智能、机器人正在大规模的被应用，劳动力密集型企业在寻求转型，机器、机器人和人工智能短期投入大，但是基本遵从边际成本递减规律，成本会不断摊薄。人工呢，只会越来越贵，换成你做老板，也会毫不犹豫的选择可以24小时工作而没有怨言的机器人。</p>
<p>那么面对挑战，怎么才能做到不失业呢？</p>
<h1 id="怎么才能不失业"><a href="#怎么才能不失业" class="headerlink" title="怎么才能不失业"></a>怎么才能不失业</h1><p>未来，高度重复的工作和机械的工作会被技术实现自动化，以及未来的人工智能取代。机械可以代替我们去做事务性工作，却不能陪伴、照顾、不能实现共情。未来的人们需要陪伴、照顾、咨询，需要艺术家，需要传统手工匠人，需要想象力丰富的人，需要能解决复杂问题的人。</p>
<p>一句话：未来，我们需要提高自己的想象力和共情能力，更需要不断的学习。只有掌握底层规律，才能不被社会淘汰。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当今社会最火爆的两个话题，一个是人工智能，一个是云计算。今天我们来聊聊人工智能。近年来，人工智能在国家和社会的持续关注下得到了大力的发展，展望未来，以工业4.0 为代表的智能技术将影响包括中国在内的全球劳动力就业市场。&lt;/p&gt;
&lt;p&gt;近年来，一些低端的产业正在被以人工智能蚕
    
    </summary>
    
      <category term="杂谈" scheme="http://www.xiangzhihong.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://www.xiangzhihong.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>前端ThinkJS框架解析</title>
    <link href="http://www.xiangzhihong.com/2017/07/14/%E5%89%8D%E7%AB%AFThinkJS%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.xiangzhihong.com/2017/07/14/前端ThinkJS框架解析/</id>
    <published>2017-07-13T16:00:00.000Z</published>
    <updated>2017-09-30T02:35:08.956Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://thinkjs.org/" target="_blank" rel="external">Thinkjs</a> 是一个快速、简单的基于MVC和面向对象的轻量级Node.js开发框架，遵循MIT协议发布。秉承简洁易用的设计原则，在保持出色的性能和至简的代码同时，注重开发体验和易用性，为WEB应用开发提供强有力的支持。</p>
<p>Thinkjs里面很多特性来源于ThinkPHP，同时根据Node.js的特点，使用了Promise, WebSocket等特性，让代码更简洁、优雅。</p>
<p>Thinkjs最大的特色是对目前比较潮的语法特性支持的特别好，比如es6、es7、typescript等，有了这些，对aysnc/await等特性支持，让代码更加fashion。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装命令行工具：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g thinkjs</div></pre></td></tr></table></figure>
<p>然后使用thinkjs new demo创建一个新项目。为了确保用户错误操作导致现有文件被覆盖，thinkjs new 命令仅适用于文件夹不存在的，或者空文件夹。否则会报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">path `/data/www/demo` is already a thinkjs project.</div></pre></td></tr></table></figure>
<p>实现这一特性其实是依赖一个项目根目录下的隐藏文件 .thinkjsrc ，使用 ls -a 可以查看隐藏文件，打开这个文件可以看到如下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;createAt&quot;: &quot;2017-02-12 19:08:38&quot;,</div><div class="line">  &quot;mode&quot;: &quot;module&quot;,</div><div class="line">  &quot;es&quot;: true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用命令后，系统就开始构建项目了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">$ thinkjs new demo</div><div class="line">  create : demo</div><div class="line">  create : demo/package.json</div><div class="line">  create : demo/.babelrc</div><div class="line">  create : demo/.thinkjsrc</div><div class="line">  create : demo/nginx.conf</div><div class="line">  create : demo/pm2.json</div><div class="line">  create : demo/.gitignore</div><div class="line">  create : demo/README.md</div><div class="line">  create : demo/www</div><div class="line">  create : demo/www/development.js</div><div class="line">  create : demo/www/production.js</div><div class="line">  create : demo/www/testing.js</div><div class="line">  create : demo/www/README.md</div><div class="line">  create : demo/www/static</div><div class="line">  create : demo/www/static/js</div><div class="line">  create : demo/www/static/css</div><div class="line">  create : demo/www/static/img</div><div class="line">  create : demo/src</div><div class="line">  create : demo/src/common/bootstrap</div><div class="line">  create : demo/src/common/bootstrap/middleware.js</div><div class="line">  create : demo/src/common/bootstrap/global.js</div><div class="line">  create : demo/src/common/config</div><div class="line">  create : demo/src/common/config/config.js</div><div class="line">  create : demo/src/common/config/view.js</div><div class="line">  create : demo/src/common/config/db.js</div><div class="line">  create : demo/src/common/config/hook.js</div><div class="line">  create : demo/src/common/config/session.js</div><div class="line">  create : demo/src/common/config/error.js</div><div class="line">  create : demo/src/common/config/env</div><div class="line">  create : demo/src/common/config/env/development.js</div><div class="line">  create : demo/src/common/config/env/testing.js</div><div class="line">  create : demo/src/common/config/env/production.js</div><div class="line">  create : demo/src/common/config/locale</div><div class="line">  create : demo/src/common/config/locale/en.js</div><div class="line">  create : demo/src/common/controller</div><div class="line">  create : demo/src/common/controller/error.js</div><div class="line">  create : demo/view/common</div><div class="line">  create : demo/view/common/error_400.html</div><div class="line">  create : demo/view/common/error_403.html</div><div class="line">  create : demo/view/common/error_404.html</div><div class="line">  create : demo/view/common/error_500.html</div><div class="line">  create : demo/view/common/error_503.html</div><div class="line">  create : demo/src/home/config</div><div class="line">  create : demo/src/home/config/config.js</div><div class="line">  create : demo/src/home/controller</div><div class="line">  create : demo/src/home/controller/base.js</div><div class="line">  create : demo/src/home/controller/index.js</div><div class="line">  create : demo/src/home/logic</div><div class="line">  create : demo/src/home/logic/index.js</div><div class="line">  create : demo/src/home/model</div><div class="line">  create : demo/src/home/model/index.js</div><div class="line">  create : demo/view/home</div><div class="line">  create : demo/view/home/index_index.html</div><div class="line"></div><div class="line">  enter path:</div><div class="line">  $ cd demo</div><div class="line"></div><div class="line">  install dependencies:</div><div class="line">  $ npm install</div><div class="line"></div><div class="line">  run the app:</div><div class="line">  $ npm start</div></pre></td></tr></table></figure>
<p>需要注意的是，新建项目的时候需要好多babel，所以项目的构建会比较慢，依赖的包主要有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;dependencies&quot;: &#123;</div><div class="line">   &quot;thinkjs&quot;: &quot;2.2.x&quot;,</div><div class="line">   &quot;babel-runtime&quot;: &quot;6.x.x&quot;,</div><div class="line">   &quot;source-map-support&quot;: &quot;0.4.0&quot;</div><div class="line"> &#125;,</div></pre></td></tr></table></figure>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── README.md</div><div class="line">├── app</div><div class="line">│   ├── common</div><div class="line">│   │   ├── bootstrap</div><div class="line">│   │   ├── config</div><div class="line">│   │   └── controller</div><div class="line">│   └── home</div><div class="line">│       ├── config</div><div class="line">│       ├── controller</div><div class="line">│       ├── logic</div><div class="line">│       └── model</div><div class="line">├── nginx.conf</div><div class="line">├── package.json</div><div class="line">├── pm2.json</div><div class="line">├── src</div><div class="line">│   ├── common</div><div class="line">│   │   ├── bootstrap</div><div class="line">│   │   ├── config</div><div class="line">│   │   └── controller</div><div class="line">│   └── home</div><div class="line">│       ├── config</div><div class="line">│       ├── controller</div><div class="line">│       ├── logic</div><div class="line">│       └── model</div><div class="line">├── tree.txt</div><div class="line">├── view</div><div class="line">│   ├── common</div><div class="line">│   │   ├── error_400.html</div><div class="line">│   │   ├── error_403.html</div><div class="line">│   │   ├── error_404.html</div><div class="line">│   │   ├── error_500.html</div><div class="line">│   │   └── error_503.html</div><div class="line">│   └── home</div><div class="line">│       └── index_index.html</div><div class="line">└── www</div><div class="line">    ├── README.md</div><div class="line">    ├── development.js</div><div class="line">    ├── production.js</div><div class="line">    ├── static</div><div class="line">    │   ├── css</div><div class="line">    │   ├── img</div><div class="line">    │   └── js</div><div class="line">    └── testing.js</div><div class="line"></div><div class="line">388 directories, 1381 files</div></pre></td></tr></table></figure>
<h2 id="启动流程分析"><a href="#启动流程分析" class="headerlink" title="启动流程分析"></a>启动流程分析</h2><p>1）启动命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm start</div></pre></td></tr></table></figure>
<p>那使用start后系统做了什么呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">   &quot;start&quot;: &quot;node www/development.js&quot;,</div><div class="line">   &quot;compile&quot;: &quot;babel src/ --out-dir app/&quot;,</div><div class="line">   &quot;watch-compile&quot;: &quot;node -e \&quot;console.log(&apos;&lt;npm run watch-compile&gt; no longer need, use &lt;npm start&gt; command direct.&apos;);console.log();\&quot;&quot;,</div><div class="line">   &quot;watch&quot;: &quot;npm run watch-compile&quot;</div><div class="line"> &#125;,</div></pre></td></tr></table></figure>
<p>即使用Node执行www/development.js，这是env环境处理，thinkjs采用了3中env，比较常见的有：</p>
<ul>
<li>development 开发模式</li>
<li>production 线上模式</li>
<li>testing 测试模式</li>
</ul>
<p>thinkjs是把www当成node项目目录，而www下的static才是静态资源文件目录。<br>www/development.js目录如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var instance = new thinkjs(&#123;</div><div class="line">  APP_PATH: rootPath + path.sep + &apos;app&apos;,</div><div class="line">  RUNTIME_PATH: rootPath + path.sep + &apos;runtime&apos;,</div><div class="line">  ROOT_PATH: rootPath,</div><div class="line">  RESOURCE_PATH: __dirname,</div><div class="line">  env: &apos;development&apos;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>当然，可以使用“tree src -L 3”  命令来查看项目的目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">$ tree src -L 3         </div><div class="line">src</div><div class="line">├── common</div><div class="line">│   ├── bootstrap</div><div class="line">│   │   ├── global.js</div><div class="line">│   │   └── middleware.js</div><div class="line">│   ├── config</div><div class="line">│   │   ├── config.js</div><div class="line">│   │   ├── db.js</div><div class="line">│   │   ├── env</div><div class="line">│   │   ├── error.js</div><div class="line">│   │   ├── hook.js</div><div class="line">│   │   ├── locale</div><div class="line">│   │   ├── session.js</div><div class="line">│   │   └── view.js</div><div class="line">│   └── controller</div><div class="line">│       └── error.js</div><div class="line">├── home</div><div class="line">│   ├── config</div><div class="line">│   │   └── config.js</div><div class="line">│   ├── controller</div><div class="line">│   │   ├── base.js</div><div class="line">│   │   └── index.js</div><div class="line">│   ├── logic</div><div class="line">│   │   └── index.js</div><div class="line">│   └── model</div><div class="line">│       └── index.js</div><div class="line"></div><div class="line"></div><div class="line">16 directories, 19 files</div></pre></td></tr></table></figure>
<p>常见模块配置（后文会具体涉及）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ thinkjs module topic(能创建不能删除，略遗憾)</div><div class="line"></div><div class="line">  create : src/topic/config</div><div class="line">  create : src/topic/config/config.js</div><div class="line">  create : src/topic/controller</div><div class="line">  create : src/topic/controller/base.js</div><div class="line">  create : src/topic/controller/index.js</div><div class="line">  create : src/topic/logic</div><div class="line">  create : src/topic/logic/index.js</div><div class="line">  create : src/topic/model</div><div class="line">  create : src/topic/model/index.js</div><div class="line">  exist : /Users/sang/workspace/github/nodewebframework/demo/view/topic/index_index.html</div></pre></td></tr></table></figure>
<p>此时目录结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">src</div><div class="line">├── common</div><div class="line">├── home</div><div class="line">└── topic</div></pre></td></tr></table></figure>
<p>3）业务模块目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">├── home</div><div class="line">│   ├── config</div><div class="line">│   │   └── config.js</div><div class="line">│   ├── controller</div><div class="line">│   │   ├── base.js</div><div class="line">│   │   └── index.js</div><div class="line">│   ├── logic</div><div class="line">│   │   └── index.js</div><div class="line">│   └── model</div><div class="line">│       └── index.js</div></pre></td></tr></table></figure>
<p>4）路由和view识别<br>路由识别，默认根据 模块/控制器/操作/参数1/参数1值/参数2/参数2值 其实就是一个约定。</p>
<p>比如/解析为：</p>
<ul>
<li>默认模块是home</li>
<li>控制是index</li>
<li>操作是indexAction</li>
</ul>
<p>那如果再来一个呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">import Base from &apos;./base.js&apos;;</div><div class="line"></div><div class="line">export default class extends Base &#123;</div><div class="line">  /**</div><div class="line">   * index action</div><div class="line">   * @return &#123;Promise&#125; []</div><div class="line">   */</div><div class="line">  indexAction()&#123;</div><div class="line">    //auto render template file index_index.html</div><div class="line">    return this.display();</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  myAction()&#123;</div><div class="line">    //auto render template file index_index.html</div><div class="line">    return this.display();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>增加myAction，报错[Error] Error: can’t find template file /Users/sang/workspace/github/nodewebframework/demo/view/home/index_my.html</p>
<p>将view/home/index_index.html复制为view/home/index_my.html。原理是my要对应index_my.html模块。即index是controller，而my是action。</p>
<p>理解了这个，你就会觉得index_index这样的命名也不是很怪异了。剩下的就是view编写之类的，此处就不在熬述。</p>
<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>前面提到了，开发阶段采用babel写的，所以效率不会很高。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ autocannon -c 100 -d 5 -p 10 localhost:8360</div><div class="line">Running 5s test @ http://localhost:8360</div><div class="line">100 connections with 10 pipelining factor</div><div class="line"></div><div class="line">Stat         Avg       Stdev    Max       </div><div class="line">Latency (ms) 108.9     201.32   866       </div><div class="line">Req/Sec      891.8     148.37   1000      </div><div class="line">Bytes/Sec    417.79 kB 50.76 kB 458.75 kB </div><div class="line"></div><div class="line">4k requests in 5s, 2.09 MB read</div></pre></td></tr></table></figure>
<p>点惨，是吧？但是这是开发模式啊，我们肯定要拿线上的production模式来测试。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">$ npm run compile</div><div class="line">$ node www/production.js </div><div class="line">$ autocannon -c 100 -d 5 -p 10 localhost:8360</div><div class="line">Running 5s test @ http://localhost:8360</div><div class="line">100 connections with 10 pipelining factor</div><div class="line"></div><div class="line">Stat         Avg       Stdev     Max       </div><div class="line">Latency (ms) 61.76     124.71    763       </div><div class="line">Req/Sec      1567.2    734.94    1993      </div><div class="line">Bytes/Sec    679.12 kB 242.25 kB 884.74 kB </div><div class="line"></div><div class="line">8k requests in 5s, 3.4 MB read</div><div class="line"></div><div class="line">$ autocannon -c 100 -d 5 -p 10 localhost:8360</div><div class="line">Running 5s test @ http://localhost:8360</div><div class="line">100 connections with 10 pipelining factor</div><div class="line"></div><div class="line">Stat         Avg       Stdev     Max      </div><div class="line">Latency (ms) 54.65     105.47    707      </div><div class="line">Req/Sec      1813.4    368.21    1999     </div><div class="line">Bytes/Sec    807.73 kB 156.09 kB 917.5 kB </div><div class="line"></div><div class="line">9k requests in 5s, 4.09 MB read</div><div class="line"></div><div class="line">$ autocannon -c 100 -d 5 -p 10 localhost:8360</div><div class="line">Running 5s test @ http://localhost:8360</div><div class="line">100 connections with 10 pipelining factor</div><div class="line"></div><div class="line">Stat         Avg       Stdev     Max     </div><div class="line">Latency (ms) 54.14     89.81     465     </div><div class="line">Req/Sec      1816.4    319.14    2000    </div><div class="line">Bytes/Sec    914.23 kB 145.96 kB 1.05 MB </div><div class="line"></div><div class="line">9k requests in 5s, 4.55 MB read</div></pre></td></tr></table></figure>
<p>下面以同样的功能express + ejs模板的方式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">$ autocannon -c 100 -d 5 -p 10 localhost:3000</div><div class="line">Running 5s test @ http://localhost:3000</div><div class="line">100 connections with 10 pipelining factor</div><div class="line"></div><div class="line">Stat         Avg       Stdev     Max       </div><div class="line">Latency (ms) 53.85     177.72    1309      </div><div class="line">Req/Sec      1728      385.85    2075      </div><div class="line">Bytes/Sec    702.87 kB 159.56 kB 851.97 kB </div><div class="line"></div><div class="line">9k requests in 5s, 3.53 MB read</div><div class="line"></div><div class="line">$ autocannon -c 100 -d 5 -p 10 localhost:3000</div><div class="line">Running 5s test @ http://localhost:3000</div><div class="line">100 connections with 10 pipelining factor</div><div class="line"></div><div class="line">Stat         Avg       Stdev     Max       </div><div class="line">Latency (ms) 46.06     141.52    739       </div><div class="line">Req/Sec      2061.2    320.53    2275      </div><div class="line">Bytes/Sec    842.14 kB 134.95 kB 950.27 kB </div><div class="line"></div><div class="line">10k requests in 5s, 4.2 MB read</div><div class="line"></div><div class="line">$ autocannon -c 100 -d 5 -p 10 localhost:3000</div><div class="line">Running 5s test @ http://localhost:3000</div><div class="line">100 connections with 10 pipelining factor</div><div class="line"></div><div class="line">Stat         Avg       Stdev    Max       </div><div class="line">Latency (ms) 45.97     139.58   620       </div><div class="line">Req/Sec      2059.4    122.93   2167      </div><div class="line">Bytes/Sec    829.03 kB 52.43 kB 884.74 kB </div><div class="line"></div><div class="line">10k requests in 5s, 4.2 MB read</div></pre></td></tr></table></figure>
<h2 id="模块分解"><a href="#模块分解" class="headerlink" title="模块分解"></a>模块分解</h2><p>创建项目之后，基本的代码框架已经建立起来了，其中默认的 home 和 common 肯定是无法满足要求的。我们需要给自己的项目建立起相关的层次结构。这里给大家列举一些常见的模块分类方式。仅供参考。</p>
<h3 id="简单网站"><a href="#简单网站" class="headerlink" title="简单网站"></a>简单网站</h3><p>官方网站、博客、社区等，这类系统结构较为简单，通常一个前端一个后端管理即可满足要求。通常需要包含以下模块：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">src/</div><div class="line">src/common/  # 通用模块，放置主配置参数、boostrap adapter middleware service 等相关组件</div><div class="line">src/home/  # 前端默认模块</div><div class="line">src/backend/  # 后端管理模块</div><div class="line">src/util/  # 系统工具类</div></pre></td></tr></table></figure>
<h3 id="电商平台"><a href="#电商平台" class="headerlink" title="电商平台"></a>电商平台</h3><p>电商平台系统主要考虑到入驻的商户、注册的客户、管理人员、运营人员等使用人群，还需要考虑到较大的功能模块切分（如果足够大到类似京东、天猫那种体量的系统，则需要进行数据、功能、服务、位置等角度的分割）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">src/</div><div class="line">src/common/</div><div class="line">src/home/</div><div class="line">src/sso/  # 单点登录、令牌管理等</div><div class="line">src/rest/  # 针对Wap、App等多客户端的 rest api</div><div class="line">src/goods/  # 商品管理及服务</div><div class="line">src/storage/  # 库存管理及服务</div><div class="line">src/cart/  # 购物车</div><div class="line">src/order/  # 订单</div><div class="line">src/delivery/  # 快递</div><div class="line">src/pay/  # 在线支付、空中支付</div><div class="line">src/member/  #</div><div class="line">src/coupon/  # 电子券</div><div class="line">src/promotion/  # 促销</div><div class="line">src/points/  # 积分</div><div class="line">src/merchant/  # 入驻商户</div><div class="line">src/shop/  # 商户门店</div><div class="line">src/finance/  # 财务核算及款项清算</div><div class="line">src/stat/</div><div class="line">src/log/</div><div class="line">src/monitor/</div><div class="line">src/util/</div><div class="line">src/task/</div><div class="line">src/message/  # 消息队列</div></pre></td></tr></table></figure>
<h3 id="即时消息平台"><a href="#即时消息平台" class="headerlink" title="即时消息平台"></a>即时消息平台</h3><p>实时推送平台不仅仅要处理 WebSocket 连接和消息囤积发送，还要处理多用户购买相应服务套餐、统计连接数、统计下行流量、进行连接鉴权等。通常包含的模块如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">src/</div><div class="line">src/common/</div><div class="line">src/home/</div><div class="line">src/rest/</div><div class="line">src/storage/</div><div class="line">src/websocket/  # ws 或者 wss 服务</div><div class="line">src/webhook/  # 钩子服务</div><div class="line">src/middleware/  # 搭载中间件运行</div><div class="line">src/pay/</div><div class="line">src/member/</div><div class="line">src/stat/</div><div class="line">src/log/</div><div class="line">src/monitor/</div><div class="line">src/util/</div><div class="line">src/message/  # 消息队列</div></pre></td></tr></table></figure>
<h3 id="在线教育、直播平台"><a href="#在线教育、直播平台" class="headerlink" title="在线教育、直播平台"></a>在线教育、直播平台</h3><p>在线教育或直播平台通常具备实时音视频上传、转码、存储、广播等硬性要求，因此系统除了管理相关课件、学生、教师、选课等，还要负责处理相关媒体文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">src/</div><div class="line">src/common/</div><div class="line">src/home/</div><div class="line">src/rest/</div><div class="line">src/sso/  # 单点登录、令牌管理等</div><div class="line">src/media/  # 课件、音视频等媒体文件</div><div class="line">src/bulk/  # 流媒体</div><div class="line">src/process/  # 编解码处理</div><div class="line">src/storage/</div><div class="line">src/live/  # 直播</div><div class="line">src/pay/</div><div class="line">src/student/</div><div class="line">src/teacher/</div><div class="line">src/schedule/</div><div class="line">src/stat/</div><div class="line">src/log/</div><div class="line">src/monitor/</div><div class="line">src/util/</div><div class="line">src/task/</div><div class="line">src/message/  # 消息队列</div></pre></td></tr></table></figure>
<h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><p>官网是这么描述配置文件加载顺序的：框架默认的配置 -&gt; 项目模式下框架配置 -&gt; 项目公共配置 -&gt; 项目模式下的公共配置 -&gt; 模块下的配置。</p>
<p>第三个和第四个则是在不同的项目创建模式下的默认 config 配置文件夹，位置在：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># normal mode</div><div class="line">thinkjs_normal/src/config/*</div><div class="line"># module mode</div><div class="line">thinkjs_module/src/common/config/*</div></pre></td></tr></table></figure>
<p>最后一个是指的在 module mode 下的项目，每个 module 自己的 config，位置在：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">thinkjs_module/src/home/config/*</div></pre></td></tr></table></figure>
<p>明白了多个地方多个配置文件的玩法之后，你可以创建多个 module，并给每个 module 配置自身独特的配置参数。</p>
<p>需要注意的是：thinkjs 加载配置文件是有顺序的！！！多个配置文件最终会在 thinkjs 运行时被全部加载，并合并在一起。所以当存在多个配置文件时，需要注意配置参数的 key（即属性名）尽量不要重复，因为按照加载顺序，后加载的 key 的值会覆盖先加载的 key 的值，导致出现不希望的结果。</p>
<p>举例来说，有两个配置文件 src/common/config/assets.js 和 src/home/config/assets.js，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// src/common/config/assets.js</div><div class="line">export default &#123;</div><div class="line">  &quot;site_title&quot;: &quot;my site&quot;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// src/home/config/assets.js</div><div class="line">export default &#123;</div><div class="line">  &quot;site_title&quot;: &quot;my test&quot;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// src/home/controller/index.js</div><div class="line">let assets = this.config(&apos;assets&apos;);</div><div class="line">let siteTitle = assets[&apos;site_title&apos;];</div><div class="line">console.log(&apos;siteTitle is: &apos;, siteTitle); // my test</div></pre></td></tr></table></figure>
<h2 id="Babel-编译时删除注释"><a href="#Babel-编译时删除注释" class="headerlink" title="Babel 编译时删除注释"></a>Babel 编译时删除注释</h2><p>开发时的工作代码都在 src 下面，运行时才会编译到 app 下面成为运行脚本（经过 Babel 编译），如果不想自己写的各种注释也出现在 app 下面的代码中，可以修改项目目录下的一个隐藏文件 .babelrc 增加相应 comments 参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;presets&quot;: [</div><div class="line">    [&quot;es2015&quot;, &#123;&quot;loose&quot;: true&#125;],</div><div class="line">    &quot;stage-1&quot;</div><div class="line">  ],</div><div class="line">  &quot;plugins&quot;: [&quot;transform-runtime&quot;],</div><div class="line">  &quot;sourceMaps&quot;: true,</div><div class="line">  &quot;comments&quot;: false  # &lt;-- 就是这个参数</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><p>目前，thinkJs支持两种控制器：普通的控制器和多级控制器。<br>支持<strong>before和</strong>after这样的回调钩子，对于app和controller控制来说是非常实用的。使用co来实现也是可圈可点，此处如果使用koa可以更加优雅。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">class PathController extends BaseController &#123;</div><div class="line">  constructor(app, ctx, next) &#123;</div><div class="line">    super(app, ctx, next)</div><div class="line">    </div><div class="line">    this.path = &apos;/c&apos;</div><div class="line">    // this.global_filter.push(&apos;custom_filter&apos;)</div><div class="line">    this.post_filter = [this.log]</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  before() &#123;</div><div class="line">  </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  log(ctx, next) &#123;</div><div class="line">    ctx.someText = &apos;some&apos;</div><div class="line">    // console.log(&apos;before&apos;)</div><div class="line">    return next().then(function()&#123;</div><div class="line">      // console.log(&apos;after&apos;)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  post(req, res) &#123;</div><div class="line">    console.log(this.ctx.someText)</div><div class="line">    var a = this.reqbody.a</div><div class="line">    </div><div class="line">    return res.body = this.ctx.someText</div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  after() &#123;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="修改-pm2-日志位置"><a href="#修改-pm2-日志位置" class="headerlink" title="修改 pm2 日志位置"></a>修改 pm2 日志位置</h2><p>pm2 （官网 <a href="http://pm2.keymetrics.io）是一个优秀的" target="_blank" rel="external">http://pm2.keymetrics.io）是一个优秀的</a> Node.js 进程管理器。thinkjs 推荐使用 pm2 来管理项目运行，并自动生成了 pm2 的配置文件 pm2.json 。</p>
<p>它的强大之处在于不仅可以作为 Node.js 项目的守护进程，还具备可配置化启动、分布式支持、内存监控、热重载（优雅重载）、支持数据统计、运行日志记录、实时运行监控、API 和脚本支持等强大的特性。</p>
<p>默认生成的 pm2 配置文件不含日志记录部分，如果不单独配置，pm2 的日志将会保存在安装目录中，查找起来很不方便。普遍的做法是：在项目目录下建立 logs 文件夹，用来放置 pm2 以及其他（诸如 log4js 等等）日志，打开 pm2.json ，给 apps[0] 增加如下几行配置参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;apps&quot;: [&#123;</div><div class="line">    &quot;error_file&quot;      : &quot;/data/www/thinkjs_module/logs/pm2-err.log&quot;,</div><div class="line">    &quot;out_file&quot;        : &quot;/data/www/thinkjs_module/logs/pm2-out.log&quot;,</div><div class="line">    &quot;log_date_format&quot; : &quot;YYYY-MM-DD HH:mm:ss Z&quot;,</div><div class="line">    &quot;merge_logs&quot;      : false</div><div class="line">  &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>error_file pm2 捕捉到的致命错误记录在这里</li>
<li>out_file pm2 接收到的 console 输出记录在这里</li>
<li>log_date_format 日期和时间格式</li>
<li>merge_logs 是否给日志文件增加进程id的后缀</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>主要优势：</p>
<ul>
<li>完全自己实现，对已有框架很少借鉴</li>
<li>内置各种adapter，db，中间件，hook，插件，非常丰富，all in one 比组装更适合新手</li>
<li>遵循mvc和coc</li>
<li>使用最潮的es6/es7/ts特性，对aysnc函数，exports等都非常好的支持</li>
<li>支持i18n等实用功能</li>
<li>内置pm2和nginx集成，部署方便</li>
<li>有自己的脚手架，稍弱</li>
<li>性能不错，虽然比express稍弱，但功能强大许多</li>
<li>测试丰富，代码质量有保障</li>
<li>文档健全，是经过设计的，支持多语言</li>
<li>背后有75团和李成银支持，最近一周内有更新，代码提交2600+，35人贡献，整体来说算健康</li>
</ul>
<p>附：<a href="https://thinkjs.org/doc/index.html" target="_blank" rel="external">ThinkJS官网文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://thinkjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Thinkjs&lt;/a&gt; 是一个快速、简单的基于MVC和面向对象的轻量级Node.js开发框架，遵循MIT协议发布。秉承简洁易用的设计原则，在保持出色的
    
    </summary>
    
      <category term="前端" scheme="http://www.xiangzhihong.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://www.xiangzhihong.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Android 进程回收之LowMemoryKiller原理篇</title>
    <link href="http://www.xiangzhihong.com/2017/07/13/Android%20%E8%BF%9B%E7%A8%8B%E5%9B%9E%E6%94%B6%E4%B9%8BLowMemoryKiller%E5%8E%9F%E7%90%86%E7%AF%87/"/>
    <id>http://www.xiangzhihong.com/2017/07/13/Android 进程回收之LowMemoryKiller原理篇/</id>
    <published>2017-07-12T16:00:00.000Z</published>
    <updated>2017-11-20T02:04:30.948Z</updated>
    
    <content type="html"><![CDATA[<p>在前面的文章<a href="http://blog.csdn.net/xiangzhihong8/article/details/77919053" target="_blank" rel="external">Android进程保活</a>一文中，对于LowMemoryKiller的概念做了简单的提及。LowMemoryKiller简称低内存杀死机制。简单来说，LowMemoryKiller(低内存杀手)是Andorid基于oomKiller原理所扩展的一个多层次oomKiller，OOMkiller(Out Of Memory Killer)是在Linux系统无法分配新内存的时候，选择性杀掉进程，到oom的时候，系统可能已经不太稳定，而LowMemoryKiller是一种根据内存阈值级别触发的内存回收的机制，在系统可用内存较低时，就会选择性杀死进程的策略，相对OOMKiller，更加灵活。</p>
<p>在讲解LowMemoryKiller之前，先看另一个概念：OOMKiller。</p>
<p>Linux下有一种OOM KILLER 的机制，它会在系统内存耗尽的情况下，启用自己算法有选择性的kill 掉一些进程。</p>
<h1 id="OOMKiller"><a href="#OOMKiller" class="headerlink" title="OOMKiller"></a>OOMKiller</h1><p> 当我们启动应用时，需要向系统申请内存，即进行malloc的操作，进行malloc操作如果返回一个非NULL的操作表示申请到了可用的内部你。事实上，这个地方是可能存在bug的。Linux有一种内存优化机制，即：允许程序申请比系统可用内存更多的内存（术语：overcommit），但是Linux并不保证这些内存马上可用，如果凑巧你申请到的内存中在你需要使用的时候还没有完全释放出来，这个时候就会触发OOM killer了。内核代码为：mm/oom_kill.c，其调用顺序为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">malloc -&gt; _alloc_pages -&gt; out_of_memory() -&gt; select_bad_process() -&gt; badness()</div></pre></td></tr></table></figure>
<p>然而，系统的物理内存往往是有限的，这就需要在使用过程中杀掉一些无用的进程以腾出新的内存。在Android系统中，AmS需要和Linux操作系统有个约定，即将要谈到的Linux内核的内存管理控制系统是如何通知AMS内存不足的。</p>
<p>Java虚拟机运行时都有各自独立的内存空间，应用程序A发生Out Of Memory并不意味着应用程序B也会发生Out Of Memory，很有可能仅仅是A程序用光了自己内存的上限，而系统内存却还是有的。所以说，单纯的AmS是无法获知系统内存是否低的。</p>
<p>那么，Android系统是如何知道”系统内存低”或者”系统内存不够用”呢？从Android底层的Linux来讲，由于其并未采用磁盘虚拟内存机制，所以应用程序能够使用的内存大小完全取决于实际物理内存的大小，所以，”内存低”的含义就是实际物理内存已经被用得所剩无几了。看下面一幅图：<br><img src="http://img.blog.csdn.net/20170911093523283?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>在Android中运行了一个OOM 进程，即Out Of Memory。该进程启动时会首先向Linux内核中把自己注册为一个OOM Killer，即当Linux内核的内存管理模块检测到系统内存低的时候就会通知已经注册的OOM进程，然后这些OOM Killer就可以根据各种规则进行内存释放了，当然也可以什么都不做。</p>
<p>Android中的OOM Killer进程是仅仅适用于Android应用程序的，该进程在运行时，AmS需要把每一个应用程序的oom_adj值告知给Killer。这个值的范围在－16到15，值越低，说明越重要，这个值类似于Linux系统中的进程nice值，只是在标准的Linux中，有其自己的一套Killer机制。</p>
<p>重要：<strong>当发生低内存的条件时，Linux内核管理模块通知OOM Killer，Killer则根据AmS所告知的优先级，强制退出优先级低的应用进程。</strong></p>
<h1 id="LowMemoryKiller"><a href="#LowMemoryKiller" class="headerlink" title="LowMemoryKiller"></a>LowMemoryKiller</h1><p>前面，我们谈到了OOMKiller的一些知识，在理解OOMKiller的时候注意两点：</p>
<ol>
<li>LowMemoryKiller是被动杀死进程；</li>
<li>Android应用通过AMS，利用proc文件系统更新进程信息。</li>
</ol>
<h2 id="进程优先级及oomAdj"><a href="#进程优先级及oomAdj" class="headerlink" title="进程优先级及oomAdj"></a>进程优先级及oomAdj</h2><p>关于这方面的知识，前文有过介绍<a href="http://blog.csdn.net/xiangzhihong8/article/details/77919053" target="_blank" rel="external">Android进程保活</a>。这里在简单的介绍下。<br>Android会尽可能长时间地保持应用存活，但为了新建或运行更重要的进程，可能需要移除旧进程来回收内存，在选择要Kill的进程的时候，系统会根据进程的运行状态作出评估，权衡进程的“重要性“，其权衡的依据主要是四大组件。如果需要缩减内存，系统会首先消除重要性最低的进程，然后是重要性略逊的进程，依此类推，以回收系统资源。在Android中，应用进程划分5级：</p>
<ul>
<li>前台进程(Foreground process)</li>
<li>可见进程(Visible process)</li>
<li>服务进程(Service process)</li>
<li>后台进程(Background process)</li>
<li>空进程(Empty process)</li>
</ul>
<h3 id="前台进程-Foreground-process"><a href="#前台进程-Foreground-process" class="headerlink" title="前台进程(Foreground process)"></a>前台进程(Foreground process)</h3><p>用户当前操作所必需的进程。如果一个进程满足以下任一条件，即视为前台进程：</p>
<ul>
<li>包含正在交互的Activity（如resumed)</li>
<li>包含绑定到正在交互的Activity的Service</li>
<li>包含正在“前台”运行的Service（服务已调用startForeground()）</li>
<li>包含正执行一个生命周期回调的Service（onCreate()、onStart() 或 onDestroy()）</li>
<li>包含一个正执行其onReceive()方法的BroadcastReceiver</li>
</ul>
<h3 id="可见进程-Visible-process"><a href="#可见进程-Visible-process" class="headerlink" title="可见进程(Visible process)"></a>可见进程(Visible process)</h3><p>没有任何前台组件、但仍会影响用户在屏幕上所见内容的进程。 如果一个进程满足以下任一条件，即视为可见进程：<br>包含不在前台、但仍对用户可见的 Activity（已调用其 onPause() 方法）。例如，如果前台 Activity 启动了一个对话框，允许在其后显示上一Activity，则有可能会发生这种情况。<br>包含绑定到可见（或前台）Activity 的 Service。</p>
<h3 id="服务进程-Service-process"><a href="#服务进程-Service-process" class="headerlink" title="服务进程(Service process)"></a>服务进程(Service process)</h3><p>正在运行已使用 startService() 方法启动的服务且不属于上述两个更高类别进程的进程。尽管服务进程与用户所见内容没有直接关联，但是它们通常在执行一些用户关心的操作（例如，在后台播放音乐或从网络下载数据）。因此，除非内存不足以维持所有前台进程和可见进程同时运行，否则系统会让服务进程保持运行状态。</p>
<h3 id="后台进程-Background-process"><a href="#后台进程-Background-process" class="headerlink" title="后台进程(Background process)"></a>后台进程(Background process)</h3><p>包含目前对用户不可见的 Activity 的进程（已调用 Activity 的 onStop() 方法）。这些进程对用户体验没有直接影响，系统可能随时终止它们，以回收内存供前台进程、可见进程或服务进程使用。 通常会有很多后台进程在运行，因此它们会保存在 LRU （最近最少使用）列表中，以确保包含用户最近查看的 Activity 的进程最后一个被终止。如果某个 Activity 正确实现了生命周期方法，并保存了其当前状态，则终止其进程不会对用户体验产生明显影响，因为当用户导航回该 Activity 时，Activity会恢复其所有可见状态。</p>
<h3 id="空进程-Empty-process"><a href="#空进程-Empty-process" class="headerlink" title="空进程(Empty process)"></a>空进程(Empty process)</h3><p>不含任何活动应用组件的进程。保留这种进程的的唯一目的是用作缓存，以缩短下次在其中运行组件所需的启动时间，这就是所谓热启动 。为了使系统资源在进程缓存和底层内核缓存之间保持平衡，系统往往会终止这些进程。</p>
<p>根据进程中当前活动组件的重要程度，Android会对进程的优先级进行评定。下表是进程优先级的表(主要针对4.03-5.x)。</p>
<table><br>        <tr><br>            <th>adj级别</th><br>            <th>值</th><br>            <th>解释</th><br>        </tr><br>         <tr><br>            <th>UNKNOWN_ADJ</th><br>            <th>16</th><br>              <th>预留的最低级别，一般对于缓存的进程才有可能设置成这个级别</th><br>        </tr><br>         <tr><br>            <th>CACHED_APP_MAX_ADJ</th><br>            <th>15</th><br>              <th>缓存进程，空进程，在内存不足的情况下就会优先被kill</th><br>        </tr><br>       <tr><br>            <th>CACHED_APP_MIN_ADJ</th><br>            <th>9</th><br>              <th>缓存进程，也就是空进程</th><br>        </tr><br>         <tr><br>            <th>SERVICE_B_ADJ</th><br>            <th>8</th><br>              <th>不活跃的进程</th><br>        </tr><br>         <tr><br>            <th>PREVIOUS_APP_ADJ</th><br>            <th>7</th><br>              <th>切换进程</th><br>        </tr><br>         <tr><br>            <th>HOME_APP_ADJ</th><br>            <th>6</th><br>              <th>与Home交互的进程</th><br>        </tr><br>         <tr><br>            <th>SERVICE_ADJ</th><br>            <th>5</th><br>              <th>有Service的进程</th><br>        </tr><br>         <tr><br>            <th>HEAVY_WEIGHT_APP_ADJ</th><br>            <th>4</th><br>              <th>高权重进程</th><br>        </tr><br>         <tr><br>            <th>BACKUP_APP_ADJ</th><br>            <th>3</th><br>              <th>正在备份的进程</th><br>        </tr><br>          <tr><br>            <th>PERCEPTIBLE_APP_ADJ</th><br>            <th>2</th><br>              <th>可感知的进程，比如那种播放音乐</th><br>        </tr><br>        <tr><br>            <th>VISIBLE_APP_ADJ</th><br>            <th>1</th><br>              <th>可见进程，如当前的Activity</th><br>        </tr><br>        <tr><br>            <th>FOREGROUND_APP_ADJ</th><br>            <th>0</th><br>              <th>前台进程</th><br>        </tr><br>         <tr><br>            <th>PERSISTENT_SERVICE_ADJ</th><br>            <th>-11</th><br>              <th>重要进程</th><br>        </tr><br>         <tr><br>            <th>PERSISTENT_PROC_ADJ</th><br>            <th>-12</th><br>              <th>核心进程</th><br>        </tr><br>         <tr><br>            <th>SYSTEM_ADJ</th><br>            <th>-16</th><br>              <th>    系统进程</th><br>        </tr><br>        <tr><br>            <th>NATIVE_ADJ</th><br>            <th>-17</th><br>              <th>系统起的Native进程</th><br>        </tr><br></table>

<h2 id="android-优先级更新"><a href="#android-优先级更新" class="headerlink" title="android 优先级更新"></a>android 优先级更新</h2><p>APP中很多操作都可能会影响进程列表的优先级，比如退到后台、移到前台等，都会潜在的影响进程的优先级，我们知道Lowmemorykiller是通过遍历内核的进程结构体队列，选择优先级低的杀死，那么APP操作是如何写入到内核空间的呢？Linxu有用户间跟内核空间的区分，无论是APP还是系统服务，都是运行在用户空间，严格说用户控件的操作是无法直接影响内核空间的，更不用说更改进程的优先级。其实这里是通过了Linux中的一个proc文件体统，proc文件系统可以简单的看多是内核空间映射成用户可以操作的文件系统，当然不是所有进程都有权利操作，通过proc文件系统，用户空间的进程就能够修改内核空间的数据，比如修改进程的优先级，在Android家族，5.0之前的系统是AMS进程直接修改的，5.0之后，是修改优先级的操作被封装成了一个独立的服务-lmkd，lmkd服务位于用户空间，其作用层次同AMS、WMS类似，就是一个普通的系统服务。我们先看一下5.0之前的代码，这里仍然用4.3的源码看一下，模拟一个场景，APP只有一个Activity，我们主动finish掉这个Activity，APP就回到了后台，这里要记住，虽然没有可用的Activity，但是APP本身是没哟死掉的，这就是所谓的热启动，先看下大体的流程：<br><img src="http://img.blog.csdn.net/20170911105554171?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>以上面描述的push Activity为例，来查看AMS源码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public final boolean finishActivity(IBinder token, int resultCode, Intent resultData) &#123;</div><div class="line">     ...</div><div class="line">    synchronized(this) &#123;</div><div class="line"></div><div class="line">        final long origId = Binder.clearCallingIdentity();</div><div class="line">        boolean res = mMainStack.requestFinishActivityLocked(token, resultCode,</div><div class="line">                resultData, &quot;app-request&quot;, true);</div><div class="line">     ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一开始的流程跟startActivity类似，首先是先暂停当前resume的Activity。相关代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">final boolean finishActivityLocked(ActivityRecord r, int index, int resultCode,</div><div class="line">            Intent resultData, String reason, boolean immediate, boolean oomAdj) &#123;</div><div class="line">         ...</div><div class="line">            if (mPausingActivity == null) &#123;</div><div class="line">                if (DEBUG_PAUSE) Slog.v(TAG, &quot;Finish needs to pause: &quot; + r);</div><div class="line">                if (DEBUG_USER_LEAVING) Slog.v(TAG, &quot;finish() =&gt; pause with userLeaving=false&quot;);</div><div class="line">                startPausingLocked(false, false);</div><div class="line">            &#125;</div><div class="line">            ...</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>pause掉当前Activity之后，还需要唤醒上一个Activity，如果当前APP的Activity栈里应经空了，就回退到上一个应用或者桌面程序。对于返回到桌面的情况这里不做深究。其实源码有一段代码是判断，当前的ActivityStack上面是否还有其他的Activity的代码。当Activity回退到后台状态后，系统做了什么事情呢？来看下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">private final void completePauseLocked() &#123;</div><div class="line">   ActivityRecord prev = mPausingActivity;</div><div class="line"></div><div class="line">   if (prev != null) &#123;</div><div class="line">       if (prev.finishing) &#123;</div><div class="line">       1、 不同点</div><div class="line">      &lt;!--主动finish的时候，走的是这个分支，状态变换的细节请自己查询代码--&gt;</div><div class="line">           prev = finishCurrentActivityLocked(prev, FINISH_AFTER_VISIBLE, false);</div><div class="line">       &#125; </div><div class="line">       ...</div><div class="line">       2、相同点       </div><div class="line">    if (!mService.isSleeping()) &#123;</div><div class="line">       resumeTopActivityLocked(prev);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>看一下上面的两个关键点1跟2，1是同startActivity的completePauseLocked不同的地方，主动finish的prev.finishing是为true的，因此会执行finishCurrentActivityLocked分支，将当前pause的Activity加到mStoppingActivities队列中去，并且唤醒下一个需要走到到前台的Activity，唤醒后，会继续执行stop：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">private final ActivityRecord finishCurrentActivityLocked(ActivityRecord r,</div><div class="line">           int index, int mode, boolean oomAdj) &#123;</div><div class="line">       if (mode == FINISH_AFTER_VISIBLE &amp;&amp; r.nowVisible) &#123;</div><div class="line">           if (!mStoppingActivities.contains(r)) &#123;</div><div class="line">               mStoppingActivities.add(r);</div><div class="line">               ...</div><div class="line">           &#125;</div><div class="line">              ....</div><div class="line">           return r;</div><div class="line">       &#125;</div><div class="line">       ...</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>再回到resumeTopActivityLocked继续看，resume之后会回调completeResumeLocked函数，继续执行stop，这个函数通过向Handler发送IDLE_TIMEOUT_MSG消息来回调activityIdleInternal函数，最终执行destroyActivityLocked销毁ActivityRecord。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">final boolean resumeTopActivityLocked(ActivityRecord prev, Bundle options) &#123;</div><div class="line">        ...</div><div class="line">   if (next.app != null &amp;&amp; next.app.thread != null) &#123;                   ...</div><div class="line">            try &#123;</div><div class="line">                。。。</div><div class="line">                next.app.thread.scheduleResumeActivity(next.appToken,</div><div class="line">                        mService.isNextTransitionForward());</div><div class="line">                ..。</div><div class="line">            try &#123;</div><div class="line">                next.visible = true;</div><div class="line">                completeResumeLocked(next);</div><div class="line">            &#125;  </div><div class="line">            ....</div><div class="line">         &#125;</div></pre></td></tr></table></figure>
<p>在销毁Activity的时候，如果当前APP的Activity堆栈为空了，就说明当前Activity没有可见界面了，这个时候就需要动态更新这个APP的优先级，详细代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">final boolean destroyActivityLocked(ActivityRecord r,</div><div class="line">           boolean removeFromApp, boolean oomAdj, String reason) &#123;</div><div class="line">           ...</div><div class="line">      if (hadApp) &#123;</div><div class="line">           if (removeFromApp) &#123;</div><div class="line">               // 这里动ProcessRecord里面删除，但是没从history删除</div><div class="line">               int idx = r.app.activities.indexOf(r);</div><div class="line">               if (idx &gt;= 0) &#123;</div><div class="line">                   r.app.activities.remove(idx);</div><div class="line">               &#125;</div><div class="line">               ...</div><div class="line">               if (r.app.activities.size() == 0) &#123;</div><div class="line">                   // No longer have activities, so update oom adj.</div><div class="line">                   mService.updateOomAdjLocked();</div><div class="line">               ...</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<p>最终会调用AMS的updateOomAdjLocked函数去更新进程优先级，在4.3的源码里面，主要是通过Process类的setOomAdj函数来设置优先级。ActivityManagerService更新优先级的代码在updateOomAdjLocked里面。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">private final boolean updateOomAdjLocked(ProcessRecord app, int hiddenAdj,</div><div class="line">        int clientHiddenAdj, int emptyAdj, ProcessRecord TOP_APP, boolean doingAll) &#123;</div><div class="line">    ...</div><div class="line">    计算优先级</div><div class="line">    computeOomAdjLocked(app, hiddenAdj, clientHiddenAdj, emptyAdj, TOP_APP, false, doingAll);</div><div class="line">     。。。</div><div class="line">     &lt;!--如果不相同，设置新的OomAdj--&gt;</div><div class="line"></div><div class="line">    if (app.curAdj != app.setAdj) &#123;</div><div class="line">        if (Process.setOomAdj(app.pid, app.curAdj)) &#123;</div><div class="line">        ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后调用android_util_Process.cpp，通过proc文件系统修改内核信息来动态更新进程的优先级oomAdj，以上是针对Android4.3系统的分析。<br><img src="http://img.blog.csdn.net/20170911110910100?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h3 id="Android-5-0的进程优先级更新-LMKD服务"><a href="#Android-5-0的进程优先级更新-LMKD服务" class="headerlink" title="Android 5.0的进程优先级更新-LMKD服务"></a>Android 5.0的进程优先级更新-LMKD服务</h3><p>Android5.0将设置进程优先级的入口封装成了一个独立的服务lmkd服务，AMS不再直接访问proc文件系统，而是通过lmkd服务来进行设置，从init.rc文件中看到服务的配置。相关配置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">service lmkd /system/bin/lmkd</div><div class="line">    class core</div><div class="line">    critical</div><div class="line">    socket lmkd seqpacket 0660 system system</div></pre></td></tr></table></figure>
<p>从配置中可以看出，该服务是通过socket与其他进行进程进行通信，其实就是AMS通过socket向lmkd服务发送请求，让lmkd去更新进程的优先级，lmkd收到请求后，会通过/proc文件系统去更新内核中的进程优先级。首先看一下5.0中这一块AMS有什么改变。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">private final boolean updateOomAdjLocked(ProcessRecord app, int cachedAdj,</div><div class="line">        ProcessRecord TOP_APP, boolean doingAll, long now) &#123;</div><div class="line">    ...</div><div class="line">    computeOomAdjLocked(app, cachedAdj, TOP_APP, doingAll, now);</div><div class="line">    ...</div><div class="line">    applyOomAdjLocked(app, doingAll, now, SystemClock.elapsedRealtime());</div><div class="line">&#125;</div><div class="line"></div><div class="line">private final boolean applyOomAdjLocked(ProcessRecord app, boolean doingAll, long now,</div><div class="line">        long nowElapsed) &#123;</div><div class="line">    boolean success = true;</div><div class="line"></div><div class="line">    if (app.curRawAdj != app.setRawAdj) &#123;</div><div class="line">        app.setRawAdj = app.curRawAdj;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    int changes = 0;</div><div class="line">      不同点1</div><div class="line">    if (app.curAdj != app.setAdj) &#123;</div><div class="line">        ProcessList.setOomAdj(app.pid, app.info.uid, app.curAdj);</div><div class="line">        if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,</div><div class="line">                &quot;Set &quot; + app.pid + &quot; &quot; + app.processName + &quot; adj &quot; + app.curAdj + &quot;: &quot;</div><div class="line">                + app.adjType);</div><div class="line">        app.setAdj = app.curAdj;</div><div class="line">        app.verifiedAdj = ProcessList.INVALID_ADJ;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>从上面的不同点1可以看出，5.0之后是通过ProcessList类去设置oomAdj，其实这里就是通过socket与LMKD服务进行通信，向lmkd服务传递给LMK_PROCPRIO命令去更新进程优先级：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public static final void setOomAdj(int pid, int uid, int amt) &#123;</div><div class="line">    if (amt == UNKNOWN_ADJ)</div><div class="line">        return;</div><div class="line">   long start = SystemClock.elapsedRealtime();</div><div class="line">    ByteBuffer buf = ByteBuffer.allocate(4 * 4);</div><div class="line">    buf.putInt(LMK_PROCPRIO);</div><div class="line">    buf.putInt(pid);</div><div class="line">    buf.putInt(uid);</div><div class="line">    buf.putInt(amt);</div><div class="line">    writeLmkd(buf);</div><div class="line">    long now = SystemClock.elapsedRealtime();</div><div class="line">      &#125;    </div><div class="line"></div><div class="line">private static void writeLmkd(ByteBuffer buf) &#123;</div><div class="line">        for (int i = 0; i &lt; 3; i++) &#123;</div><div class="line">        if (sLmkdSocket == null) &#123;</div><div class="line">          if (openLmkdSocket() == false) &#123;</div><div class="line">            ...</div><div class="line">        try &#123;</div><div class="line">            sLmkdOutputStream.write(buf.array(), 0, buf.position());</div><div class="line">            return;</div><div class="line">            ...</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>其实就是openLmkdSocket打开本地socket端口，并将优先级信息发送过去，那么lmkd服务端如何处理的呢，来看看lmkd服务的入口main函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">int main(int argc __unused, char **argv __unused) &#123;</div><div class="line">    struct sched_param param = &#123;</div><div class="line">            .sched_priority = 1,</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    mlockall(MCL_FUTURE);</div><div class="line">    sched_setscheduler(0, SCHED_FIFO, &amp;param);</div><div class="line">    if (!init())</div><div class="line">        mainloop();</div><div class="line"></div><div class="line">    ALOGI(&quot;exiting&quot;);</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很简单，打开一个端口，并通过mainloop监听socket，如果有请求到来，就解析命令并执行，刚才传入的LMK_PROCPRIO命令对应的操作就是cmd_procprio，用来更新oomAdj，其更新新机制还是通过proc文件系统。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">static void cmd_procprio(int pid, int uid, int oomadj) &#123;</div><div class="line">    struct proc *procp;</div><div class="line">    。。。</div><div class="line">    还是利用/proc文件系统进行更新</div><div class="line">    snprintf(path, sizeof(path), &quot;/proc/%d/oom_score_adj&quot;, pid);</div><div class="line">    snprintf(val, sizeof(val), &quot;%d&quot;, lowmem_oom_adj_to_oom_score_adj(oomadj));</div><div class="line">    writefilestring(path, val);</div><div class="line">   。。。</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>与4.3版本相比，5.0的LMKD简化了很多AMS的东西。<br><img src="http://img.blog.csdn.net/20170911111518785?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="LomemoryKiller内核区块"><a href="#LomemoryKiller内核区块" class="headerlink" title="LomemoryKiller内核区块"></a>LomemoryKiller内核区块</h2><p>LomemoryKiller属于一个内核驱动模块，主要功能是：在系统内存不足的时候扫描进程队列，找到低优先级（也许说性价比低更合适）的进程并杀死，以达到释放内存的目的。对于驱动程序，入口是__init函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">static int __init lowmem_init(void)</div><div class="line">&#123;</div><div class="line">    register_shrinker(&amp;lowmem_shrinker);</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>LomemoryKiller将自己的lowmem_shrinker入口注册到系统的内存检测模块去，作用就是在内存不足的时候可以被回调，register_shrinker函数是一属于另一个内存管理模块的函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">void register_shrinker(struct shrinker *shrinker)</div><div class="line">&#123;</div><div class="line">    shrinker-&gt;nr = 0;</div><div class="line">    down_write(&amp;shrinker_rwsem);</div><div class="line">    list_add_tail(&amp;shrinker-&gt;list, &amp;shrinker_list);</div><div class="line">    up_write(&amp;shrinker_rwsem);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，看一下，当内存不足触发回调的时候，LomemoryKiller是如何找到低优先级进程，并杀死的。管家代码就在lowmem_shrink函数里面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">static int lowmem_shrink(int nr_to_scan, gfp_t gfp_mask)</div><div class="line">&#123;</div><div class="line">    struct task_struct *p;</div><div class="line">    。。。</div><div class="line">    关键点1 找到当前的内存对应的阈值</div><div class="line">    for(i = 0; i &lt; array_size; i++) &#123;</div><div class="line">        if (other_free &lt; lowmem_minfree[i] &amp;&amp;</div><div class="line">            other_file &lt; lowmem_minfree[i]) &#123;</div><div class="line">            min_adj = lowmem_adj[i];</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    。。。</div><div class="line">    关键点2 找到优先级低于这个阈值的进程，并杀死</div><div class="line"></div><div class="line">    read_lock(&amp;tasklist_lock);</div><div class="line">    for_each_process(p) &#123;</div><div class="line">        if (p-&gt;oomkilladj &lt; min_adj || !p-&gt;mm)</div><div class="line">            continue;</div><div class="line">        tasksize = get_mm_rss(p-&gt;mm);</div><div class="line">        if (tasksize &lt;= 0)</div><div class="line">            continue;</div><div class="line">        if (selected) &#123;</div><div class="line">            if (p-&gt;oomkilladj &lt; selected-&gt;oomkilladj)</div><div class="line">                continue;</div><div class="line">            if (p-&gt;oomkilladj == selected-&gt;oomkilladj &amp;&amp;</div><div class="line">                tasksize &lt;= selected_tasksize)</div><div class="line">                continue;</div><div class="line">        &#125;</div><div class="line">        selected = p;</div><div class="line">        selected_tasksize = tasksize;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    if(selected != NULL) &#123;</div><div class="line">        force_sig(SIGKILL, selected);</div><div class="line">        rem -= selected_tasksize;</div><div class="line">    &#125;</div><div class="line">    lowmem_print(4, &quot;lowmem_shrink %d, %x, return %d\n&quot;, nr_to_scan, gfp_mask, rem);</div><div class="line">    read_unlock(&amp;tasklist_lock);</div><div class="line">    return rem;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的逻辑很清楚，通过给应用设置内存对应的阈值，通过Linux的中的信号量，发送SIGKILL信号直接将进程杀死。关于LomemoryKiller和Linux底层通信的原理，请大家自行学习相关的文章介绍。</p>
<p>附：<a href="http://blog.csdn.net/gaugamela/article/details/54176460" target="_blank" rel="external"> Android 7.0 ActivityManagerService分析</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在前面的文章&lt;a href=&quot;http://blog.csdn.net/xiangzhihong8/article/details/77919053&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android进程保活&lt;/a&gt;一文中，对于LowMemory
    
    </summary>
    
      <category term="Android" scheme="http://www.xiangzhihong.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.xiangzhihong.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>使用GitBook写电子书</title>
    <link href="http://www.xiangzhihong.com/2017/07/13/%E4%BD%BF%E7%94%A8Gitbook%E5%86%99%E7%94%B5%E5%AD%90%E4%B9%A6/"/>
    <id>http://www.xiangzhihong.com/2017/07/13/使用Gitbook写电子书/</id>
    <published>2017-07-12T16:00:00.000Z</published>
    <updated>2017-11-20T01:58:25.480Z</updated>
    
    <content type="html"><![CDATA[<p>工作以来一直有些博客的习惯，除了在各大站长写博客外，还可以使用 gitbook 将博客整理成电子书出版，如果受到好评还可以将图书弄成电子版出版。<br>经过近半年的整理，我的新书《React Native移动开发实战》就要发售了，提前打个广告，书名和封面样式还在确认中，也欢迎大家给出好的点子。<br><img src="http://img.blog.csdn.net/20170928093820186?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>今天要给大家说的是如何利用GitBook编写一本属于自己的点子书。</p>
<h2 id="1，GitBook-Editor"><a href="#1，GitBook-Editor" class="headerlink" title="1，GitBook Editor"></a>1，GitBook Editor</h2><p>首先到<a href="https://www.gitbook.com/editor" target="_blank" rel="external">官网下载GitBook Editor</a>，目前支持Mac、Linux、Windows主流平台。<br><img src="http://img.blog.csdn.net/20170928094337169?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>安装完成之后，使用github账号直接登录（GitBook提供了四种方式登录，这里直接使用gitHub登录，后面会用到）。登录后，可以直接在gitbook上创建书籍，建议在gitbook网站上创建书籍，然后通过GitBook Editor clone 下来；<br><img src="http://img.blog.csdn.net/20170928094633548?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20170928095114650?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>创建完成时候，就可以写书了，不过建议先clone到本地后在写，主要是有时候网络等问题造成不必要的损失。<br><img src="http://img.blog.csdn.net/20170928095317630?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20170928095417621?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>注意：此时的GitBook的book页面默认没有download按钮的，需要做如下的设置。点击Settting设置打开E-Books选项<br><img src="http://img.blog.csdn.net/20170928095706329?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20170928095811891?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="2，同步GitHub"><a href="#2，同步GitHub" class="headerlink" title="2，同步GitHub"></a>2，同步GitHub</h2><p>如果没有github账号，先注册，之后绑定github账号。然后依次点击Setting-&gt;github,进行相关的设置即可。<br><img src="http://img.blog.csdn.net/20170928100341201?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>安装完成之后，就可以关联github了，先在github上创建一个项目，然后再关联，第一次关联可能会有如下的错误：<br><img src="http://img.blog.csdn.net/20170928101436450?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>点击GitBook或者GitHub下面的链接按钮即可关联上了。<br><img src="http://img.blog.csdn.net/20170928101644066?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>然后我们添加一篇文章，在gitBook上点击Updates按钮。<br><img src="http://img.blog.csdn.net/20170928102123195?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>注意：如果碰到，更新失败，无法转换成pdf/mobi/epub格式。<br><img src="http://img.blog.csdn.net/20170928103102982?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20170928103125189?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>PS:如果涉及到多人协作还可能会涉及其他问题，这里不多介绍。</p>
<h2 id="3，安装Node环境"><a href="#3，安装Node环境" class="headerlink" title="3，安装Node环境"></a>3，安装Node环境</h2><p>首先我们需要安装的是Nodejs，关于Node 环境的搭建这里不再详述，做过前端开发的通信应该不糊陌生。node安装完成之后，就可以现在GitBook全局环境了。</p>
<h2 id="4，全局安装-gitbook"><a href="#4，全局安装-gitbook" class="headerlink" title="4，全局安装 gitbook"></a>4，全局安装 gitbook</h2><p>现在我们可以开始安装全局的 gitbook 了。执行 命令，进行安装。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gitbook-cli -g</div></pre></td></tr></table></figure>
<p>安装完成之后，可以使用命令来查看是否安装成功。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gitbook -V</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20170928113134611?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>关于GitBook相关的教程，读者可以参考：<a href="http://www.chengweiyang.cn/gitbook/installation/README.html" target="_blank" rel="external">GitBook教程</a></p>
<p>PS:gitbook 常用的命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">gitbook init //初始化目录文件</div><div class="line">gitbook help //列出gitbook所有的命令</div><div class="line">gitbook --help //输出gitbook-cli的帮助信息</div><div class="line">gitbook build //生成静态网页</div><div class="line">gitbook serve //生成静态网页并运行服务器</div><div class="line">gitbook build --gitbook=2.0.1 //生成时指定gitbook的版本, 本地没有会先下载</div><div class="line">gitbook ls //列出本地所有的gitbook版本</div><div class="line">gitbook ls-remote //列出远程可用的gitbook版本</div><div class="line">gitbook fetch 标签/版本号 //安装对应的gitbook版本</div><div class="line">gitbook update //更新到gitbook的最新版本</div><div class="line">gitbook uninstall 2.0.1 //卸载对应的gitbook版本</div><div class="line">gitbook build --log=debug //指定log的级别</div><div class="line">gitbook builid --debug //输出错误信息</div></pre></td></tr></table></figure>
<h2 id="5，GitBook使用"><a href="#5，GitBook使用" class="headerlink" title="5，GitBook使用"></a>5，GitBook使用</h2><p>此部分没有试验，来自网络：</p>
<h3 id="gitbook-serve"><a href="#gitbook-serve" class="headerlink" title="gitbook serve"></a>gitbook serve</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">C:\Users\AllenIverson\Desktop\gitbook-test&gt;gitbook serve</div><div class="line">Live reload server started on port: 35729</div><div class="line">Press CTRL+C to quit ...</div><div class="line"></div><div class="line">info: 7 plugins are installed</div><div class="line">info: loading plugin &quot;livereload&quot;... OK</div><div class="line">info: loading plugin &quot;highlight&quot;... OK</div><div class="line">info: loading plugin &quot;search&quot;... OK</div><div class="line">info: loading plugin &quot;lunr&quot;... OK</div><div class="line">info: loading plugin &quot;sharing&quot;... OK</div><div class="line">info: loading plugin &quot;fontsettings&quot;... OK</div><div class="line">info: loading plugin &quot;theme-default&quot;... OK</div><div class="line">info: found 3 pages</div><div class="line">info: found 0 asset files</div><div class="line">info: &gt;&gt; generation finished with success in 1.9s !</div><div class="line"></div><div class="line">Starting server ...</div><div class="line">Serving book on http://localhost:4000</div></pre></td></tr></table></figure>
<h3 id="gitbook-ls"><a href="#gitbook-ls" class="headerlink" title="gitbook ls"></a>gitbook ls</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">C:\Users\AllenIverson\Desktop\gitcourse&gt;gitbook ls</div><div class="line">GitBook Versions Installed:</div><div class="line"></div><div class="line">    * 3.2.2</div><div class="line"></div><div class="line">Run &quot;gitbook update&quot; to update to the latest version.</div></pre></td></tr></table></figure>
<h3 id="gitbook-ls-remote"><a href="#gitbook-ls-remote" class="headerlink" title="gitbook ls-remote"></a>gitbook ls-remote</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">C:\Users\AllenIverson\Desktop\gitcourse&gt;gitbook ls-remote</div><div class="line">Available GitBook Versions:</div><div class="line"></div><div class="line">     4.0.0-alpha.5, 4.0.0-alpha.4, 4.0.0-alpha.3, 4.0.0-alpha.2, 4.0.0-alpha.1, 3.2.2, 3.2.1, 3.2.0, 3.2.0-pre.1, 3.2.0-</div><div class="line">pre.0, 3.1.1, 3.1.0, 3.0.3, 3.0.2, 3.0.1, 3.0.0, 3.0.0-pre.15, 3.0.0-pre.14, 3.0.0-pre.13, 3.0.0-pre.12, 3.0.0-pre.11, 3</div><div class="line">.0.0-pre.10, 3.0.0-pre.9, 3.0.0-pre.8, 3.0.0-pre.7, 3.0.0-pre.6, 3.0.0-pre.5, 3.0.0-pre.4, 3.0.0-pre.3, 3.0.0-pre.2, 3.0</div><div class="line">.0-pre.1, 2.6.7, 2.6.6, 2.6.5, 2.6.4, 2.6.3, 2.6.2, 2.6.1, 2.6.0, 2.5.2, 2.5.1, 2.5.0, 2.5.0-beta.7, 2.5.0-beta.6, 2.5.0</div><div class="line">-beta.5, 2.5.0-beta.4, 2.5.0-beta.3, 2.5.0-beta.2, 2.5.0-beta.1, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.3.3, 2.3.2, 2.3.1, 2.3.0,</div><div class="line"> 2.2.0, 2.1.0, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, 2.0.0-beta.5, 2.0.0-beta.4, 2.0.0-beta.3, 2.0.0-beta.2, 2.0.0-beta.1,</div><div class="line">2.0.0-alpha.9, 2.0.0-alpha.8, 2.0.0-alpha.7, 2.0.0-alpha.6, 2.0.0-alpha.5, 2.0.0-alpha.4, 2.0.0-alpha.3, 2.0.0-alpha.2,</div><div class="line">2.0.0-alpha.1</div><div class="line"></div><div class="line">Tags:</div><div class="line"></div><div class="line">     latest : 3.2.2</div><div class="line">     pre : 4.0.0-alpha.5</div></pre></td></tr></table></figure>
<h3 id="gitbook-V"><a href="#gitbook-V" class="headerlink" title="gitbook -V"></a>gitbook -V</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">C:\Users\AllenIverson\Desktop\gitcourse&gt;gitbook -V</div><div class="line">CLI version: 2.3.0</div><div class="line">GitBook version: 3.2.2</div></pre></td></tr></table></figure>
<p>新建一个GitBook项目后，系统会默认新建几个文件：README.md、SUMMARY.md和chapter1.md。README.md相当于简介，SUMMARY.md：相当于这本书的目录，</p>
<h2 id="6，calibre"><a href="#6，calibre" class="headerlink" title="6，calibre"></a>6，calibre</h2><p>首先到calibre<a href="https://calibre-ebook.com/download" target="_blank" rel="external">官网下载</a>对应的版本并安装，打开后界面如下：<br><img src="http://img.blog.csdn.net/20170928134559573?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20170928134943734?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h3 id="gitbook-convert"><a href="#gitbook-convert" class="headerlink" title="gitbook-convert"></a>gitbook-convert</h3><p>把docx、xml、html、odt文档转成GitBook，首先需要安装gitbook-convert插件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gitbook-convert -g</div></pre></td></tr></table></figure>
<p>如果需要转换，可以使用下面的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gitbook-convert [options] &lt;file&gt; [export-directory]</div></pre></td></tr></table></figure>
<h2 id="7，常用插件"><a href="#7，常用插件" class="headerlink" title="7，常用插件"></a>7，常用插件</h2><p>Gitbook 插件 里已经有100多个插件，可以在 book.json 文件的 plugins 和 pluginsConfig 字段添加插件及相关配置，添加后别忘了进行安装。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">// book.json</div><div class="line">&#123;</div><div class="line">  &quot;title&quot;: &quot;Webpack 中文指南&quot;,</div><div class="line">  &quot;description&quot;: &quot;Webpack 是当下最热门的前端资源模块化管理和打包工具，本书大部分内容翻译自 Webpack 官网。&quot;,</div><div class="line">  &quot;language&quot;: &quot;zh&quot;,</div><div class="line">  &quot;plugins&quot;: [</div><div class="line">    &quot;disqus&quot;,</div><div class="line">    &quot;github&quot;,</div><div class="line">    &quot;editlink&quot;,</div><div class="line">    &quot;prism&quot;,</div><div class="line">    &quot;-highlight&quot;,</div><div class="line">    &quot;baidu&quot;,</div><div class="line">    &quot;splitter&quot;,</div><div class="line">    &quot;sitemap&quot;</div><div class="line">  ],</div><div class="line">  &quot;pluginsConfig&quot;: &#123;</div><div class="line">    &quot;disqus&quot;: &#123;</div><div class="line">      &quot;shortName&quot;: &quot;webpack-handbook&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;github&quot;: &#123;</div><div class="line">      &quot;url&quot;: &quot;https://github.com/zhaoda/webpack-handbook&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;editlink&quot;: &#123;</div><div class="line">      &quot;base&quot;: &quot;https://github.com/zhaoda/webpack-handbook/blob/master/content&quot;,</div><div class="line">      &quot;label&quot;: &quot;编辑本页&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;baidu&quot;: &#123;</div><div class="line">        &quot;token&quot;: &quot;a9787f0ab45d5e237bab522431d0a7ec&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;sitemap&quot;: &#123;</div><div class="line">        &quot;hostname&quot;: &quot;http://zhaoda.net/&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后使用gitbook install安装插件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 安装插件</div><div class="line">$ gitbook install ./</div></pre></td></tr></table></figure>
<p>更多插件的使用请参考：<a href="http://blog.csdn.net/axi295309066/article/details/61420694" target="_blank" rel="external">GitBook使用教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作以来一直有些博客的习惯，除了在各大站长写博客外，还可以使用 gitbook 将博客整理成电子书出版，如果受到好评还可以将图书弄成电子版出版。&lt;br&gt;经过近半年的整理，我的新书《React Native移动开发实战》就要发售了，提前打个广告，书名和封面样式还在确认中，也欢
    
    </summary>
    
      <category term="杂谈" scheme="http://www.xiangzhihong.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://www.xiangzhihong.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Vuejs和其他前端框架的对比</title>
    <link href="http://www.xiangzhihong.com/2017/07/11/Vuejs%E5%92%8C%E5%85%B6%E4%BB%96%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E7%9A%84%E5%AF%B9%E6%AF%94/"/>
    <id>http://www.xiangzhihong.com/2017/07/11/Vuejs和其他前端框架的对比/</id>
    <published>2017-07-10T16:00:00.000Z</published>
    <updated>2017-09-27T02:44:31.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><p>React 和 Vue 有许多相似之处，它们都有：</p>
<ul>
<li>使用 Virtual DOM</li>
<li>提供了响应式 (Reactive) 和组件化 (Composable) 的视图组件。</li>
<li>将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库。</li>
</ul>
<p>由于有着众多的相似处，我们会用更多的时间在这一块进行比较。这里我们不只保证技术内容的准确性，同时也兼顾了平衡的考量。我们需要承认 React 比 Vue 更好的地方，比如更丰富的生态系统。</p>
<h2 id="相似之处"><a href="#相似之处" class="headerlink" title="相似之处"></a>相似之处</h2><p>React与Vue存在很多相似之处，例如他们都是JavaScript的UI框架，专注于创造前端的富应用。不同于早期的JavaScript框架“功能齐全”，Reat与Vue只有框架的骨架，其他的功能如路由、状态管理等是框架分离的组件。</p>
<h3 id="Virtual-DOM"><a href="#Virtual-DOM" class="headerlink" title="Virtual DOM"></a>Virtual DOM</h3><p>Vue.js(2.0版本)与React的其中最大一个相似之处，就是他们都使用了一种叫’Virtual DOM’的东西。所谓的Virtual DOM基本上说就是它名字的意思：虚拟DOM，DOM树的虚拟表现。它的诞生是基于这么一个概念：改变真实的DOM状态远比改变一个JavaScript对象的花销要大得多。</p>
<p>简单来说，Virtual DOM是一个映射真实DOM的JavaScript对象，如果需要改变任何元素的状态，那么是先在Virtual DOM上进行改变，而不是直接改变真实的DOM。当有变化产生时，一个新的Virtual DOM对象会被创建并计算新旧Virtual DOM之间的差别。之后这些差别会应用在真实的DOM上。</p>
<p>例子如下，我们可以看看下面这个列表在HTML中的代码是如何写的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ul class=&quot;list&quot;&gt;</div><div class="line">  &lt;li&gt;item 1&lt;/li&gt;</div><div class="line">  &lt;li&gt;item 2&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>而在JavaScript中，我们可以用对象简单地创造一个针对上面例子的映射：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    type: &apos;ul&apos;, </div><div class="line">    props: &#123;&apos;class&apos;: &apos;list&apos;&#125;, </div><div class="line">    children: [</div><div class="line">        &#123; type: &apos;li&apos;, props: &#123;&#125;, children: [&apos;item 1&apos;] &#125;,</div><div class="line">        &#123; type: &apos;li&apos;, props: &#123;&#125;, children: [&apos;item 2&apos;] &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>真实的Virtual DOM会比上面的例子更复杂，但它本质上是一个嵌套着数组的原生对象。当新一项被加进去这个JavaScript对象时，一个函数会计算新旧Virtual DOM之间的差异并反应在真实的DOM上。计算差异的算法是高性能框架的秘密所在，React和Vue在实现上有点不同。</p>
<p>Vue宣称可以<a href="https://cn.vuejs.org/v2/guide/comparison.html#React" target="_blank" rel="external">更快地计算出Virtual DOM</a>的差异，这是由于它在渲染过程中，会跟踪每一个组件的依赖关系，不需要重新渲染整个组件树。</p>
<p>而对于React而言，<a href="https://facebook.github.io/react/docs/react-component.html?utm_source=caibaojian.com#shouldcomponentupdate" target="_blank" rel="external">每当应用的状态被改变时</a>，全部子组件都会重新渲染。当然，这可以通过shouldComponentUpdate这个生命周期方法来进行控制，但Vue将此视为默认的优化。</p>
<h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p>React与Vue都鼓励组件化应用。这本质上说，是建议你将你的应用分拆成一个个功能明确的模块，每个模块之间可以通过合适的方式互相联系。在Vue中，如果你遵守一定的规则，你可以使用<a href="https://vuejs.org/v2/guide/single-file-components.html?utm_source=caibaojian.com" target="_blank" rel="external">单文件组件</a>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">//PastaItem.vue</div><div class="line"></div><div class="line">&lt;template&gt;</div><div class="line">&lt;li class=&quot;pasta-dish list-unstyled&quot;&gt;</div><div class="line">    &lt;div class=&quot;row&quot;&gt;</div><div class="line">        &lt;div class=&quot;col-md-3&quot;&gt;</div><div class="line">            &lt;img :src=&quot;this.item.image&quot; :alt=&quot;this.item.name&quot; /&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div class=&quot;col-md-9 text-left&quot;&gt;</div><div class="line">            &lt;h3&gt;&#123;&#123;this.item.name&#125;&#125;&lt;/h3&gt;</div><div class="line">            &lt;p&gt;</div><div class="line">                &#123;&#123;this.item.desc&#125;&#125;</div><div class="line">            &lt;/p&gt;</div><div class="line">            &lt;button v-on:click=&quot;addToOrderNew&quot; class=&quot;btn btn-primary&quot;&gt;Add to order&lt;/button&gt; &lt;mark&gt;&#123;&#123;this.orders&#125;&#125;&lt;/mark&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/li&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">    name: &apos;pasta-item&apos;,</div><div class="line">    props: [&apos;item&apos;],</div><div class="line">    data:  function()&#123;</div><div class="line">        return&#123;</div><div class="line">            orders: 0</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">        addToOrderNew: function(y)&#123;</div><div class="line">            this.orders += 1;</div><div class="line">            this.$emit(&apos;order&apos;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;style src=&quot;./Pasta.css&quot;&gt;&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>正如上面你看到的例子中，HTML, JavaScript和CSS都写在一个文件之中，你不再需要在.vue组件文件中引入CSS。<br>而在React语法中，JavaScript与JSX被写入同一个组件文件中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line"></div><div class="line">class PastaItem extends React.Component &#123;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        const &#123; details, index &#125; = this.props;</div><div class="line"></div><div class="line">        return (</div><div class="line">            &lt;li className=&quot;pasta-dish list-unstyled&quot;&gt;</div><div class="line">                &lt;div className=&quot;row&quot;&gt;</div><div class="line">                    &lt;div className=&quot;col-md-3&quot;&gt;</div><div class="line">                        &lt;img src=&#123;details.image&#125; alt=&#123;details.name&#125; /&gt;</div><div class="line">                    &lt;/div&gt;</div><div class="line">                    &lt;div className=&quot;col-md-9 text-left&quot;&gt;</div><div class="line">                        &lt;h3&gt;&#123;details.name&#125;&lt;/h3&gt;</div><div class="line">                        &lt;p&gt;</div><div class="line">                            &#123;details.desc&#125;</div><div class="line">                        &lt;/p&gt;</div><div class="line">                        &lt;button onClick=&#123;() =&gt; this.props.addToOrder(index)&#125; className=&quot;btn btn-primary&quot;&gt;Add to order&lt;/button&gt; &lt;mark&gt;&#123;this.props.orders || 0&#125;&lt;/mark&gt;</div><div class="line">                    &lt;/div&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default PastaItem;</div></pre></td></tr></table></figure>
<h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><p>在上面两个例子中，我们可以看到React和Vue都有’props’的概念，这是properties的简写。props在组件中是一个特殊的属性，允许父组件往子组件传送数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Object.keys(this.state.pastadishes).map(key =&gt;</div><div class="line">    &lt;PastaItem index=&#123;key&#125; key=&#123;key&#125; details=&#123;this.state.pastadishes[key]&#125; addToOrder=&#123;this.addToOrder&#125; orders=&#123;this.state.orders[key]&#125; /&gt;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>上面的JSX库组中，index, key, details, orders 与 addToOrder都是props，数据会被下传到子组件PastaItem中去。</p>
<p>在React中，这是必须的，它依赖一个“单一数据源”作为它的“状态”。而在Vue中，props略有不同。它们一样是在组件中被定义，但Vue依赖于模板语法，你可以通过模板的循环函数更高效地展示传入的数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;pasta-item v-for=&quot;(item, key) in samplePasta&quot; :item=&quot;item&quot; :key=&quot;key&quot; @order=&quot;handleOrder(key)&quot;&gt;&lt;/pasta-item&gt;</div></pre></td></tr></table></figure>
<h3 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h3><p>React和Vue都有自己的构建工具，你可以使用它快速搭建开发环境。React可以使用<a href="https://github.com/facebookincubator/create-react-app?utm_source=caibaojian.com" target="_blank" rel="external">Create React App (CRA)</a>，而Vue对应的则是<a href="https://github.com/vuejs/vue-cli?utm_source=caibaojian.com" target="_blank" rel="external">vue-cli</a>。两个工具都能让你得到一个根据最佳实践设置的项目模板。</p>
<p>由于CRA有很多选项，使用起来会稍微麻烦一点。这个工具会逼迫你使用<a href="https://webpack.js.org/?utm_source=caibaojian.com" target="_blank" rel="external">Webpack</a>和<a href="https://babeljs.io/?utm_source=caibaojian.com" target="_blank" rel="external">Babel</a>。而vue-cli则有<a href="https://github.com/vuejs-templates?utm_source=caibaojian.com" target="_blank" rel="external">模板列表</a>可选，能按需创造不同模板，使用起来更灵活一点。</p>
<p>事实上说，两个工具都非常好用，都能为你建立一个好环境。而且如果可以不配置Webpack的话，我和Jeff认为这是天大的好事。</p>
<h3 id="Chrome-开发工具"><a href="#Chrome-开发工具" class="headerlink" title="Chrome 开发工具"></a>Chrome 开发工具</h3><p>React和Vue都有很好的Chrome扩展工具去帮助你找出bug。它们会检查你的应用，让你看到Vue或者React中的变化。你也可以看到应用中的状态，并实时看到更新。</p>
<p>React的开发工具:<br><a href="https://cdn.deliciousbrains.com/content/uploads/2017/06/15151112/react-devtools.mp4" target="_blank" rel="external">https://cdn.deliciousbrains.com/content/uploads/2017/06/15151112/react-devtools.mp4</a></p>
<p>Vue的开发工具:<br><a href="https://cdn.deliciousbrains.com/content/uploads/2017/06/15151111/vue-devtools.mp4" target="_blank" rel="external">https://cdn.deliciousbrains.com/content/uploads/2017/06/15151111/vue-devtools.mp4</a></p>
<h2 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a>主要区别</h2><p>Vue与React最后一个相似但略有不同之处是它们配套框架的处理方法。相同之处在于，两个框架都专注于UI层，其他的功能如路由、状态管理等都交由同伴框架进行处理。</p>
<p>而不同之处是在于它们如何关联它们各自的配套框架。Vue的核心团队维护着<a href="https://github.com/vuejs/vue-router?utm_source=caibaojian.com" target="_blank" rel="external">vue-router</a>和<a href="https://github.com/vuejs/vuex?utm_source=caibaojian.com" target="_blank" rel="external">vuex</a>，它们都是作为官方推荐的存在。而React的<a href="https://github.com/ReactTraining/react-router?utm_source=caibaojian.com" target="_blank" rel="external">react-router</a>和<a href="http://redux.js.org/?utm_source=caibaojian.com" target="_blank" rel="external">react-redux</a>则是由社区成员维护，它们都不是官方维护的。</p>
<h3 id="模板-vs-JSX"><a href="#模板-vs-JSX" class="headerlink" title="模板 vs JSX"></a>模板 vs JSX</h3><p>React与Vue最大的不同是模板的编写。Vue鼓励你去写近似常规HTML的模板。写起来很接近标准HTML元素，只是多了一些属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">    &lt;template v-for=&quot;item in items&quot;&gt;</div><div class="line">        &lt;li&gt;&#123;&#123; item.msg &#125;&#125;&lt;/li&gt;</div><div class="line">        &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;</div><div class="line">    &lt;/template&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>这些属性也可以被使用在单文件组件中，尽管它需要在在<a href="https://vuejs.org/v2/guide/single-file-components.html?utm_source=caibaojian.com" target="_blank" rel="external">构建时</a>将组件转换为合法的JavaScript和HTML。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">  &lt;pasta-item v-for=&quot;(item, key) in samplePasta&quot; :item=&quot;item&quot; :key=&quot;key&quot; @order=&quot;handleOrder(key)&quot;&gt;&lt;/pasta-item&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>Vue鼓励你去使用HTML模板去进行渲染，使用相似于Angular风格的方法去输出动态的内容。因此，通过把原有的模板整合成新的Vue模板，Vue很容易提供旧的应用的升级。这也让新来者很容易适应它的语法。</p>
<p>React推荐你所有的模板通用JavaScript的语法扩展——<a href="https://facebook.github.io/react/docs/introducing-jsx.html?utm_source=caibaojian.com" target="_blank" rel="external">JSX</a>书写，不过这对于传统的前端开发人员需要相应的学习。同样的代码，用JSX书写的例子如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;ul className=&quot;pasta-list&quot;&gt;</div><div class="line">    &#123;</div><div class="line">        Object.keys(this.state.pastadishes).map(key =&gt;</div><div class="line">            &lt;PastaItem index=&#123;key&#125; key=&#123;key&#125; details=&#123;this.state.pastadishes[key]&#125; addToOrder=&#123;this.addToOrder&#125; orders=&#123;this.state.orders[key]&#125; /&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>React/JSX乍看之下，觉得非常啰嗦，但使用JavaScript而不是模板来开发，赋予了开发者许多编程能力。</p>
<h3 id="状态管理-vs-对象属性"><a href="#状态管理-vs-对象属性" class="headerlink" title="状态管理 vs 对象属性"></a>状态管理 vs 对象属性</h3><p>如果你对React熟悉，你就会知道应用中的状态是（React）关键的概念。也有一些配套框架被设计为管理一个大的state对象，如Redux。此外，state对象在React应用中是不可变的，意味着它不能被直接改变，在React中你需要使用setState()方法去更新状态。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">addToOrder(key) &#123;</div><div class="line">       //Make a copy of this.state</div><div class="line">       const orders = &#123; ...this.state.orders &#125;;</div><div class="line"></div><div class="line">       //update or add</div><div class="line">       orders[ key ] = orders[ key ] + 1 || 1;</div><div class="line">       this.setState( &#123; orders &#125; );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Vue中，state对象并不是必须的，数据由data属性在Vue对象中进行管理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">export default &#123;</div><div class="line">  name: &apos;app&apos;,</div><div class="line">  data() &#123;</div><div class="line">    return &#123;</div><div class="line">      samplePasta: samplePasta,</div><div class="line">      orders: &#123;&#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">...</div><div class="line">  methods: &#123;</div><div class="line">    handleOrder: function (key) &#123;</div><div class="line"></div><div class="line">      if (!this.orders.hasOwnProperty(key)) &#123;</div><div class="line">        this.$set(this.orders, key, &#123; count: 0 &#125;);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      this.orders[key].count += 1;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而在Vue中，则不需要使用如setState()之类的方法去改变它的状态，在Vue对象中，data参数就是应用中数据的保存者。</p>
<p>不过恶心的是React出了一个霸王条款：<a href="https://yq.aliyun.com/roundtable/59146?spm=5176.8217306.rtmain.26.ZEwc2t" target="_blank" rel="external">Facebook拒修改React开源许可</a></p>
<h1 id="Angularjs"><a href="#Angularjs" class="headerlink" title="Angularjs"></a>Angularjs</h1><p>Vue 的一些语法和 AngularJS 的很相似 (例如 v-if vs ng-if)。因为 AngularJS 是 Vue 早期开发的灵感来源。然而，AngularJS 中存在的许多问题，在 Vue 中已经得到解决。</p>
<h3 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h3><p>1，MVVM（Model）(View)(View-model)<br>2，模块化（Module）控制器（Contoller）依赖注入：<br>3，双向数据绑定：界面的操作能实时反映到数据，数据的变更能实时展现到界面。<br>4，指令(ng-click ng-model ng-href ng-src ng-if…)<br>5，服务Service($compile $filter $interval $timeout $http…)<br>其中双向数据绑定的实现使用了$scope变量的脏值检测，使用$scope.$watch（视图到模型），$scope.$apply(模型到视图)检测，内部调用的都是digest，当然也可以直接调用$scope.$digest进行脏检查。值得注意的是当数据变化十分频繁时，脏检测对浏览器性能的消耗将会很大，官方注明的最大检测脏值为2000个数据。</p>
<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>vue.js官网：是一套构建用户界面的 渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue 完全有能力驱动采用单文件组件和 Vue 生态系统支持的库开发的复杂单页应用。</p>
<p>Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p>
<p>（1）模块化，目前最热的方式是在项目中直接使用ES6的模块化，结合Webpack进行项目打包<br>（2）组件化，创造单个component后缀为.vue的文件，包含template(html代码)，script(es6代码),style(css样式)<br>（3）路由，<br>vue非常小巧，压缩后min源码为72.9kb，gzip压缩后只有25.11kb，想比Angular为144kb，可以自驾搭配使用需要的库插件，类似路由插件(Vue-router)，Ajax插件(vue-resource)等</p>
<p>下面从几个方面来比较一下Vue.js和Angular.js的区别</p>
<h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><p>Angular 事实上必须用 TypeScript 来开发，因为它的文档和学习资源几乎全部是面向 TS 的。TS 有很多显而易见的好处 —— 静态类型检查在大规模的应用中非常有用，同时对于 Java 和 C# 背景的开发者也是非常提升开发效率的。<br>然而，并不是所有人都想用 TS —— 在中小型规模的项目中，引入 TS 可能并不会带来太多明显的优势。在这些情况下，用 Vue 会是更好的选择，因为在不用 TS 的情况下使用 Angular 会很有挑战性。<br>最后，虽然 Vue 和 TS 的整合可能不如 Angular 那么深入，我们也提供了官方的 类型声明 和 组件装饰器，并且知道有大量用户在生产环境中使用 Vue + TS 的组合。我们也和微软的 TS / VSCode 团队进行着积极的合作，目标是为 Vue + TS 用户提供更好的类型检查和 IDE 开发体验。</p>
<p>##大小和性能</p>
<p>在性能方面，这两个框架都非常的快，我们也没有足够的实际应用数据来下一个结论。如果你一定想看些数据的话，你可以参考这个<a href="http://stefankrause.net/js-frameworks-benchmark4/webdriver-ts/table.html" target="_blank" rel="external">第三方跑分</a>。单就这个跑分来看，Vue 似乎比 Angular 要更快一些。<br>在大小方面，最近的 Angular 版本中在使用了 AOT 和 tree-shaking 技术后使得最终的代码体积减小了许多。但即使如此，一个包含了 Vuex + Vue Router 的 Vue 项目 (30kb gzipped) 相比使用了这些优化的 angular-cli 生成的默认项目尺寸 (~130kb) 还是要小的多。<br>灵活性</p>
<p>Vue 相比于 Angular 更加灵活，Vue 官方提供了构建工具来协助你构建项目，但它并不限制你去如何组织你的应用代码。有人可能喜欢有严格的代码组织规范，但也有开发者喜欢更灵活自由的方式。<br>学习曲线</p>
<p>要学习 Vue，你只需要有良好的 HTML 和 JavaScript 基础。有了这些基本的技能，你就可以非常快速地通过阅读 指南 投入开发。<br>Angular 的学习曲线是非常陡峭的 —— 作为一个框架，它的 API 面积比起 Vue 要大得多，你也因此需要理解更多的概念才能开始有效率地工作。当然，Angular 本身的复杂度是因为它的设计目标就是只针对大型的复杂应用；但不可否认的是，这也使得它对于经验不甚丰富的开发者相当的不友好。</p>
<p>不过就算有这么多好处，但是相比Angular2，Vue还是有很多的不足：</p>
<ol>
<li>Angular2原生Form支持： Angular2原生的Form模块功能相当强大。除了双向绑定之类的基本功能，还能通过programatic API 控制dom元素的表单行为。也有成型API提供自定义validator。这一点Vue只有v-model和第三方库。对于后台之类的重表单应用，还是Ng2有优势。</li>
<li>依赖注入无论你喜不喜欢DI，这就是Angular2的强大功能之一。有DI可以在不改变代码结构的情况下完成功能替换。（如，在desktop和mobile有不同功能，可以通过注入不同service实现，而共用相同的template和directive）。Vue则需要程序员自己规划代码组织，用来支持共享组件。DI也可以用于类似module local state的功能。比如，一个视频播放控件有几个子组件完成，子组件需要分享一个状态。这一点Angular2有原生的service injection pattern。而Vue则没有官方推荐。</li>
<li>对标准向后兼容Angular2在一些细节上对标准有更好的支持。比如 list differ 算法中 Angular2 可以支持实现了Symbol.iterator的对象，而Vue只能支持Array。对Observable和Promise，Angular2在应用的各个地方，甚至模板级别都有支持(async pipe)。而Vue需要vue-rx等第三方库支持。Angular2的组件有shadow dom的实现可以选择，而Vue目前还没有。</li>
<li>测试Angular2一开始就设计好了如何对组件进行测试，而Vue组件虽然也很好写测试，但是没有官方推荐的唯一标准（当然，对视图是否需要测试还有待探讨）。除此以外，Angular2还有一些小功能比如检验模板的类型安全（即，模板里能在编译器保证没有引用model未定义的变量），不过AoT本身似乎还没有稳定，所以不能算优势。对TS的支持也是Angular好，当然前提是你喜欢TS。</li>
</ol>
<h1 id="Ember"><a href="#Ember" class="headerlink" title="Ember"></a>Ember</h1><p>Ember 是一个全能框架。它提供了大量的约定，一旦你熟悉了它们，开发会变得很高效。不过，这也意味着学习曲线较高，而且并不灵活。这意味着在框架和库 (加上一系列松散耦合的工具) 之间做权衡选择。后者会更自由，但是也要求你做更多架构上的决定。<br>也就是说，我们最好比较的是 Vue 内核和 Ember 的模板与数据模型层：</p>
<ul>
<li>Vue 在普通 JavaScript 对象上建立响应，提供自动化的计算属性。在 Ember 中需要将所有东西放在 Ember<br>对象内，并且手工为计算属性声明依赖。</li>
<li>Vue 的模板语法可以用全功能的 JavaScript 表达式，而 Handlebars 的语法和帮助函数相比来说非常受限。</li>
<li>在性能上，Vue 比 Ember 好很多，即使是 Ember 2.x 的最新 Glimmer 引擎。Vue 能够自动批量更新，而Ember 在关键性能场景时需要手动管理。</li>
</ul>
<h1 id="Knockout"><a href="#Knockout" class="headerlink" title="Knockout"></a>Knockout</h1><p>Knockout 是 MVVM 领域内的先驱，并且追踪依赖。它的响应系统和 Vue 也很相似。它在<a href="http://knockoutjs.com/documentation/browser-support.html" target="_blank" rel="external">浏览器支持</a>以及其他方面的表现也是让人印象深刻的。它最低能支持到 IE6，而 Vue 最低只能支持到 IE9。<br>随着时间的推移，Knockout 的发展已有所放缓，并且略显有点老旧了。比如，它的组件系统缺少完备的生命周期事件方法，尽管这些在现在是非常常见的。以及相比于 Vue 调用子组件的接口它的方法显得有点笨重。<br>如果你有兴趣研究，你还会发现二者在接口设计的理念上是不同的。这可以通过各自创建的 simple Todo List 体现出来。或许有点主观，但是很多人认为 Vue 的 API 接口更简单结构更优雅。</p>
<h1 id="Polymer"><a href="#Polymer" class="headerlink" title="Polymer"></a>Polymer</h1><p>Polymer 是另一个由谷歌赞助的项目，事实上也是 Vue 的一个灵感来源。Vue 的组件可以粗略的类比于 Polymer 的自定义元素，并且两者具有相似的开发风格。最大的不同之处在于，Polymer 是基于最新版的 Web Components 标准之上，并且需要重量级的 polyfills 来帮助工作 (性能下降)，浏览器本身并不支持这些功能。相比而言，Vue 在支持到 IE9 的情况下并不需要依赖 polyfills 来工作。<br>在 Polymer 1.0 版本中，为了弥补性能，团队非常有限的使用数据绑定系统。例如，在 Polymer 中唯一支持的表达式只有布尔值否定和单一的方法调用，它的 computed 方法的实现也并不是很灵活。<br>Polymer 自定义的元素是用 HTML 文件来创建的，这会限制使用 JavaScript/CSS (和被现代浏览器普遍支持的语言特性)。相比之下，Vue 的单文件组件允许你非常容易的使用 ES2015 和你想用的 CSS 预编译处理器。<br>在部署生产环境时，Polymer 建议使用 HTML Imports 加载所有资源。而这要求服务器和客户端都支持 Http 2.0 协议，并且浏览器实现了此标准。这是否可行就取决于你的目标用户和部署环境了。如果状况不佳，你必须用 Vulcanizer 工具来打包 Polymer 元素。而在这方面，Vue 可以结合异步组件的特性和 Webpack 的代码分割特性来实现懒加载 (lazy-loaded)。这同时确保了对旧浏览器的兼容且又能更快加载。<br>而 Vue 和 Web Component 标准进行深层次的整合也是完全可行的，比如使用 Custom Elements、Shadow DOM 的样式封装。然而在我们做出严肃的实现承诺之前，我们目前仍在等待相关标准成熟，进而再广泛应用于主流的浏览器中。</p>
<h1 id="Riot"><a href="#Riot" class="headerlink" title="Riot"></a>Riot</h1><p>Riot 2.0 提供了一个类似于基于组件的开发模型 (在 Riot 中称之为 Tag)，它提供了小巧精美的 API。Riot 和 Vue 在设计理念上可能有许多相似处。尽管相比 Riot ，Vue 要显得重一点，Vue 还是有很多显著优势的：</p>
<ul>
<li>过渡效果系统。Riot 现在还没有提供。</li>
<li>功能更加强大的路由机制，Riot 的路由功能的 API 是极少的。</li>
<li>更好的性能。Riot 使用了 遍历 DOM 树 而不是虚拟 DOM，但实际上用的还是脏检查机制，因此和 AngularJS患有相同的性能问题。</li>
<li>更多成熟工具的支持。Vue 提供官方支持 webpack 和 Browserify，而 Riot 是依靠社区来建立集成系统。</li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink&quot; title=&quot;React&quot;&gt;&lt;/a&gt;React&lt;/h1&gt;&lt;p&gt;React 和 Vue 有许多相似之处，它们都有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 Virtual DOM&lt;/li&gt;
    
    </summary>
    
      <category term="前端" scheme="http://www.xiangzhihong.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://www.xiangzhihong.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="知识库" scheme="http://www.xiangzhihong.com/tags/%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>mac环境下mongodb的安装和使用</title>
    <link href="http://www.xiangzhihong.com/2017/06/26/mac%E7%8E%AF%E5%A2%83%E4%B8%8Bmongodb%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.xiangzhihong.com/2017/06/26/mac环境下mongodb的安装和使用/</id>
    <published>2017-06-25T16:00:00.000Z</published>
    <updated>2017-11-20T02:23:43.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>MongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p>
<p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p>
<p>首先熟悉两个相关的基本概念：<br>mongod 是用来连接到mongodb数据库服务器的，即服务器端。<br>mongo 是用来启动MongoDB shell的，是mongodb的命令行客户端。</p>
<h1 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h1><p>mongodb的官方地址为：<a href="https://www.mongodb.com/download-center。" target="_blank" rel="external">https://www.mongodb.com/download-center。</a></p>
<h2 id="图形化界面安装"><a href="#图形化界面安装" class="headerlink" title="图形化界面安装"></a>图形化界面安装</h2><p>在mongodb官网打开下载页面：<a href="https://www.mongodb.com/download-center" target="_blank" rel="external">https://www.mongodb.com/download-center</a></p>
<p><img src="http://img.blog.csdn.net/20171102110017761?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>解压后文件夹内容如下：<br><img src="http://img.blog.csdn.net/20171102110254860?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>在你的mongoDB文件夹下中创建一个../data/db，打开cmd命令行，进入到//mongoDB/bin文件中在cmd中输入以下命令，启动monggoDb.<br><img src="http://img.blog.csdn.net/20171102111104487?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>启动的命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Users/xiangzhihong/python/mongodb-osx-x86_64-3.4.10/bin/mongod --dbpath /Users/xiangzhihong/python/mongodb-osx-x86_64-3.4.10/data/db</div></pre></td></tr></table></figure>
<p>如果是windows系统可以参考如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D:/mongoDB\bin&gt;mongod --dbpath D:/mongoDB\data\db</div></pre></td></tr></table></figure>
<p>然后启动，<br><img src="http://img.blog.csdn.net/20171102111239235?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>启动完成后，db目录会新增一些内容:<br><img src="http://img.blog.csdn.net/20171102111341962?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>mongodb默认，链接端口是27017，如果能正确打开localhost:27017的话，就说明是对的</p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>如果是windows环境，我们可以设置mongodb为windows服务，这个操作是实现每次开机的时候mongodb可以自动启动</p>
<p>在mongoDB中data下新建一个文件夹log，然后再log中添加一个文件mongodb.log的文件</p>
<p>在d:/mongoDB文件夹中添加一个mongo.config,把mongo.config文件用记事本打开在里面填写。然后再cmd中用管理员身份打开，进入D:/mongoDB/bin目录中</p>
<p>输入以下命令mongod –config D:\mongoDB\mongo.config –install –serviceName “MongoDB”。<br>打开cmd输入services.msc可以查看mongoDB服务，点击启动就可以了<br>关于mongodb的使用例子可以参考下面的例子：<br><a href="https://github.com/GainLoss/vue-node-mongodb" target="_blank" rel="external">https://github.com/GainLoss/vue-node-mongodb</a></p>
<h2 id="homebrew命令方式安装"><a href="#homebrew命令方式安装" class="headerlink" title="homebrew命令方式安装"></a>homebrew命令方式安装</h2><h3 id="1，使用home-brew安装mongoldb"><a href="#1，使用home-brew安装mongoldb" class="headerlink" title="1，使用home-brew安装mongoldb"></a>1，使用home-brew安装mongoldb</h3><p>安装命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ brew update</div><div class="line">$ brew install mongodb</div></pre></td></tr></table></figure></p>
<h3 id="2，修改环境变量"><a href="#2，修改环境变量" class="headerlink" title="2，修改环境变量"></a>2，修改环境变量</h3><p>把mongodb/bin加入$PATH ，以免我们每次输入sudo monogd ，变成直接monogd。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ touch .base_profile</div><div class="line">$ vim .base_profile</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export MONGO_PATH=/usr/local/mongodb</div><div class="line">export PATH=$PATH:$MONGO_PATH/bin</div></pre></td></tr></table></figure>
<h3 id="3，启动mongodb服务端"><a href="#3，启动mongodb服务端" class="headerlink" title="3，启动mongodb服务端"></a>3，启动mongodb服务端</h3><p>使用如下命令启动mogodb：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --config /usr/local/etc/mongod.conf</div></pre></td></tr></table></figure></p>
<p>说明：注：mongod.conf文件中bindIp: 127.0.0.1意思是本机访问，如果是外网访问需要重新设置。具体使用上，在终端输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --dbpath 路径</div></pre></td></tr></table></figure>
<p>如果连接成功，会打印相关的链接信息。</p>
<p><img src="http://img.blog.csdn.net/20171102112439964?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>此时，可以通过http访问该数据库，mongodb使用了27017端口，因此在浏览器中打开<a href="http://localhost:27017/。出现下面的情况则说明启动成功。" target="_blank" rel="external">http://localhost:27017/。出现下面的情况则说明启动成功。</a><br><img src="http://img.blog.csdn.net/20171102112617362?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="启动mongodb服务端错误汇总"><a href="#启动mongodb服务端错误汇总" class="headerlink" title="启动mongodb服务端错误汇总"></a>启动mongodb服务端错误汇总</h2><p>1，问题： Failed to unlink socket file /tmp/mongodb-27017.sock</p>
<p>解决方案：在终端中输入 sudo rm /tmp/mongodb-27017.sock移除该文件。</p>
<p>2，Unable to create/open lock file<br>解决方案：应该是没有读写权限，加权限sudo chown XiaoL /data/db</p>
<h1 id="mongodb可视化工具"><a href="#mongodb可视化工具" class="headerlink" title="mongodb可视化工具"></a>mongodb可视化工具</h1><p>mongodb可视化工具很多，这里介绍一款比较常用的：RoboMongo。其他的例如在IDE中集成plugin的方式，大家可以自行查询相关资料。</p>
<p>打开：<a href="https://robomongo.org/download点击下载。" target="_blank" rel="external">https://robomongo.org/download点击下载。</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;MongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。&lt;/p&gt;
&lt;p&gt;Mon
    
    </summary>
    
      <category term="后端" scheme="http://www.xiangzhihong.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://www.xiangzhihong.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin和anko融合进行Android开发</title>
    <link href="http://www.xiangzhihong.com/2017/06/16/Kotlin%E5%92%8Canko%E8%9E%8D%E5%90%88%E8%BF%9B%E8%A1%8CAndroid%E5%BC%80%E5%8F%91/"/>
    <id>http://www.xiangzhihong.com/2017/06/16/Kotlin和anko融合进行Android开发/</id>
    <published>2017-06-15T16:00:00.000Z</published>
    <updated>2017-11-20T02:20:14.369Z</updated>
    
    <content type="html"><![CDATA[<p>kotlin是一门基于jvm的编程语言，最近进行了关于kotlin和 anko的研究。并且结合现在的APP设计模式，设想了初步的开发方式。并且准备应用在新的项目中。</p>
<h1 id="Kotlin和anko"><a href="#Kotlin和anko" class="headerlink" title="Kotlin和anko"></a>Kotlin和anko</h1><p>Kotlin是大名鼎鼎的JB公司开发的jvm语言，官网地址为；<a href="http://kotlinlang.org/" target="_blank" rel="external">http://kotlinlang.org/</a><br>官网的介绍为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Statically typed programming language for the JVM, Android and the browser</div></pre></td></tr></table></figure>
<p>Kotlin的设计思想非常的轻量，尽可能的去复用java代码，不到万不得已的时候，一般不会自己去实现一套大而全的库。这使得Kotlin非常的轻量，集成到Android的project并不会很明显的影响最终的打包大小。<br>关于Kotlin的优点，自己总结了几点：<br>1，和Java的无缝调用，这在初期不需要投入非常大的精力，即使遇到搞不定的坑，也不必担心影响业务开发的进度，直接换成java就好了。<br>2，大量的语法糖，使得代码非常的简洁，熟悉之后的开发效率也要高于Java。例如扩展函数，简单的封装再也不需要写一大堆Utils工具类，直接灵活的给某些类添加扩展方法就可以了。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">inline fun Activity.toast(message : Int) &#123;</div><div class="line">     Toast.makeText(this, message, Toast.LENGTH_SHORT).show()</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>这样在Activity类中就多出了一个toast方法，实际上在anko中，也有大量已经写好的扩展方法，可以直接使用DSL语法去写UI。再例如when语句的写法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">when(x) &#123;</div><div class="line">1-&gt; &#123;&#125;</div><div class="line">2-&gt; &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很明显，相比传统的Java写法，使用anko后，语言更加简洁。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">switch(x) &#123;</div><div class="line">case 1:</div><div class="line"> break;</div><div class="line">case 2:</div><div class="line"> break;</div><div class="line">default:</div><div class="line"> break;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3，更加安全，Kotlin似乎比较想消灭空引用，在Java中，调用一个null对象会抛出NullPointException，在Kotlin中，不能为空的对象，例如String对象，会写成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var a: String? = &quot;abc&quot;</div></pre></td></tr></table></figure>
<p>4，良好的生态环境和开发社区。Kotlin目前还是属于比较新的技术，很多人也都在尝试它的有点。包括Rx系列也出了RxKotlin，既RxJava的Kotlin版</p>
<p>#Kotlin和Anko使用<br>Anko的github地址为<a href="https://github.com/Kotlin/anko。集成anko的步骤如下：" target="_blank" rel="external">https://github.com/Kotlin/anko。集成anko的步骤如下：</a><br>首先在project的build文件加入如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">        classpath &apos;com.android.tools.build:gradle:2.2.3&apos;</div><div class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;  //这是需要你加入的</div><div class="line">    &#125;</div><div class="line"></div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        maven &#123;url &apos;https://dl.bintray.com/jetbrains/anko&apos;&#125; //这是你需要加入的</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，在你app moudle的build文件里面添加依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">compile &quot;org.jetbrains.anko:anko-sdk15:0.9.1&quot; // So here it&apos;s 15 too</div><div class="line">    compile &quot;org.jetbrains.anko:anko-appcompat-v7:0.9.1&quot;</div><div class="line">    compile &quot;org.jetbrains.anko:anko-design:0.9.1&quot;</div><div class="line">    compile &quot;org.jetbrains.anko:anko-recyclerview-v7:0.9.1&quot;</div></pre></td></tr></table></figure>
<p>根据kotlin的优势，选择使用anko进行编写，不使用xml进行编写。<br>这样的好处在anko的github README文件中是这样描述的：</p>
<ol>
<li>不安全</li>
<li>没有空安全</li>
<li>迫使你为了每一个布局去写很多相似甚至重复的代码</li>
<li>XML在设备上浪费CPU时间和电量（应该是需要进行解析的原因） 不允许代码重用（没有完全理解，可能说的不是include标签而是自定义的layout）</li>
<li>至于Contract接口以及实体对象，可以直接使用Kotlin编写，第一为了语法简洁，第二不用写一大堆setter/getter方法。</li>
</ol>
<p>具体的，首先编写MainActivity类，进行UI展示和事件等逻辑。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class MainActivity : AppCompatActivity(), MainContract.View &#123;</div><div class="line">    override fun onCreate(savedInstanceState: Bundle?) &#123;</div><div class="line">        super.onCreate(savedInstanceState)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来在onCreate中编写ui布局，登录布局比较简单，就是2个输入框和一个按钮，当然为了试用多点的常见控件，我在最上方添加了Toolbar。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">relativeLayout &#123;</div><div class="line"></div><div class="line">            var mToolbar =</div><div class="line">            toolbar(R.style.Base_ThemeOverlay_AppCompat_Dark_ActionBar) &#123;</div><div class="line">                id = ID_TOOLBAR</div><div class="line">                title = &quot;登录&quot;</div><div class="line">                backgroundColor = ContextCompat.getColor(this@MainActivity, R.color.colorPrimary)</div><div class="line"></div><div class="line">                popupTheme = R.style.Base_ThemeOverlay_AppCompat_Light</div><div class="line">                inflateMenu(R.menu.main)</div><div class="line"></div><div class="line">                setNavigationIcon(R.mipmap.img_back_white)</div><div class="line"></div><div class="line">                onMenuItemClick &#123;</div><div class="line">                    menuItem -&gt;</div><div class="line">                    val itemId = menuItem!!.itemId</div><div class="line">                    when (itemId) &#123;</div><div class="line">                        R.id.menu_main -&gt; &#123;</div><div class="line">                            toast(R.string.main_toast)</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    false</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                lparams &#123;</div><div class="line">                    width = matchParent</div><div class="line">                    height = wrapContent</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                setNavigationOnClickListener &#123;</div><div class="line">                    finish()</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            var mUserEdit = editText &#123;</div><div class="line">                id = ID_USER_EDIT</div><div class="line">                hint = &quot;请输入同户名&quot;</div><div class="line">                maxLines=1</div><div class="line"></div><div class="line">                lparams &#123;</div><div class="line">                    width = matchParent</div><div class="line">                    height = wrapContent</div><div class="line">                    margin=dip(8)</div><div class="line">                    centerInParent()</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            var mPsdEdit = editText &#123;</div><div class="line">                id= ID_PSD_EDIT</div><div class="line">                hint=&quot;请输入密码&quot;</div><div class="line">                maxLines=1</div><div class="line">                maxWidth = 16</div><div class="line"></div><div class="line">                lparams &#123;</div><div class="line">                    width = matchParent</div><div class="line">                    height = wrapContent</div><div class="line">                    margin = dip(8)</div><div class="line">                    below(ID_USER_EDIT)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">            var mButton = button(&quot;登录&quot;) &#123;</div><div class="line">                id= ID_BTN_LOGIN</div><div class="line"></div><div class="line">                onClick &#123;</div><div class="line">                    var username = mUserEdit.text.toString()</div><div class="line">                    var password = mPsdEdit.text.toString()</div><div class="line"></div><div class="line">                    mPresenter!!.login(username,password)</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                lparams &#123;</div><div class="line">                    width= matchParent</div><div class="line">                    height = wrapContent</div><div class="line">                    margin = dip(8)</div><div class="line">                    below(ID_PSD_EDIT)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>代码中的id使用了常量，在Kotlin中没有static的概念，但是有一个companion object(伴随对象)可以模拟实现类似static的功能。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">companion object static &#123;</div><div class="line">        val ID_TOOLBAR: Int = 1</div><div class="line">        val ID_USER_EDIT: Int = 2</div><div class="line">        val ID_PSD_EDIT: Int = 3</div><div class="line">        val ID_BTN_LOGIN: Int = 4</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>可以看到，这样编写UI的代码非常的简洁。而且可读性非常的高。相信对XML写布局比较熟悉的同学都能看懂这里面代码的含义。同时官方还出了一个Android Stduio插件，叫做anko SDL preview。可以很方便的让开发者预览编写的效果。接下来按照MVP的思想，<br>编写BaseView和BasePresenter接口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">interface BaseView&lt;T&gt; &#123;</div><div class="line">    fun setPresenter(presenter: T)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">interface BasePresenter</div></pre></td></tr></table></figure>
<p>使用Kotlin编写MainContract接口，这个接口建立起了V层和P层的通信。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">interface MainContract &#123;</div><div class="line">    interface View : BaseView&lt;Presenter&gt; &#123;</div><div class="line">        fun login()</div><div class="line">        fun loginNUll()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    interface Presenter : BasePresenter &#123;</div><div class="line">        fun login(username: String, password: String)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用Java编写P层代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class MainPresenter implements MainContract.Presenter &#123;</div><div class="line"></div><div class="line">    private MainContract.View mView;</div><div class="line"></div><div class="line">    public MainPresenter(MainContract.View view) &#123;</div><div class="line">        mView = view;</div><div class="line">        mView.setPresenter(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void login(String username, String password) &#123;</div><div class="line">        if (TextUtils.isEmpty(username) || TextUtils.isEmpty(password)) &#123;</div><div class="line">            mView.loginNUll();</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        mView.login();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里只是模拟了下登录的逻辑，并没有去真的实现一个登录<br>回到MainActivity，在这里加入我们的代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var mPresenter : MainContract.Presenter? = null</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">override fun setPresenter(presenter: MainContract.Presenter) &#123;</div><div class="line">    mPresenter = presenter!!</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现V层应该实现的回调方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">override fun loginNUll() &#123;</div><div class="line">    toast(&quot;用户名密码不得为空&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">override fun login() &#123;</div><div class="line">    toast(&quot;执行登录逻辑...&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到这里，我们就完成了Kotlin和anko开发Android的实例，如果想要更加熟练的使用，还需要多加练习。</p>
<p>附：Anko的github地址为<a href="https://github.com/Kotlin/anko" target="_blank" rel="external">https://github.com/Kotlin/anko</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;kotlin是一门基于jvm的编程语言，最近进行了关于kotlin和 anko的研究。并且结合现在的APP设计模式，设想了初步的开发方式。并且准备应用在新的项目中。&lt;/p&gt;
&lt;h1 id=&quot;Kotlin和anko&quot;&gt;&lt;a href=&quot;#Kotlin和anko&quot; class=
    
    </summary>
    
      <category term="Android" scheme="http://www.xiangzhihong.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.xiangzhihong.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序之picker组件</title>
    <link href="http://www.xiangzhihong.com/2017/06/14/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8Bpicker%E7%BB%84%E4%BB%B6/"/>
    <id>http://www.xiangzhihong.com/2017/06/14/微信小程序之picker组件/</id>
    <published>2017-06-13T16:00:00.000Z</published>
    <updated>2017-09-30T02:34:01.665Z</updated>
    
    <content type="html"><![CDATA[<p>作为移动端的分发入口，微信小程序虽然没有当初期望的那么火，但是却是一个不能忽视的入口。撇开微信小程序对于腾讯生态的原因不说，微信小程序对于开发还是很方便的，特别是对于白痴选手来说，基本不需要多少过多的学习，就能写一个不错的小程序。</p>
<p>下面就微信小程序常见的组件分别做详细的介绍，本篇主要介绍picker组件。运行效果如下：<br><img src="http://img.blog.csdn.net/20170926170228873?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>picker选择器分为5种：分别是普通选择器，多列选择器，时间选择器，日期选择器，省市区选择器，默认是普通选择器，可以用mode属性区分。</p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="普通选择器"><a href="#普通选择器" class="headerlink" title="普通选择器"></a>普通选择器</h3><p>设置mode = selector。</p>
<table><br>        <tr><br>            <th>属性名</th><br>            <th>类型</th><br>            <th>默认值</th><br>            <th>说明</th><br>        </tr><br>         <tr><br>            <th>range</th><br>            <th>Array / Object Array</th><br>            <th>[]</th><br>            <th>mode为 selector 或 multiSelector 时，range 有效</th><br>        </tr><br>        <tr><br>            <th>range-key</th><br>            <th>String</th><br>            <th></th><br>            <th>当 range 是一个 Object Array 时，通过 range-key 来指定 Object 中 key 的值作为选择器显示内容</th><br>        </tr><br>         <tr><br>            <th>value</th><br>            <th>Number</th><br>            <th>0</th><br>            <th>value 的值表示选择了 range 中的第几个（下标从 0 开始）</th><br>        </tr><br>        <tr><br>            <th>bindchange</th><br>            <th>EventHandle</th><br>            <th> </th><br>            <th>value 改变时触发 change 事件，event.detail = {value: value}</th><br>        </tr><br>        <tr><br>            <th>disabled</th><br>            <th>Boolean</th><br>            <th> false</th><br>            <th>是否禁用</th><br>        </tr><br></table>

<h3 id="多列选择器"><a href="#多列选择器" class="headerlink" title="多列选择器"></a>多列选择器</h3><p>mode = multiSelector（最低版本：1.4.0）。</p>
<table><br>        <tr><br>            <th>属性名</th><br>            <th>类型</th><br>            <th>默认值</th><br>            <th>说明</th><br>        </tr><br>        <tr><br>            <th>range</th><br>            <th>二维Array / 二维Object Array</th><br>            <th>[]</th><br>            <th>mode为 selector 或 multiSelector 时，range 有效。二维数组，长度表示多少列，数组的每项表示每列的数据，如[[“a”,”b”], [“c”,”d”]]</th><br>        </tr><br>         <tr><br>            <th>range-key</th><br>            <th>String</th><br>            <th></th><br>            <th>当 range 是一个 二维Object Array 时，通过 range-key 来指定 Object 中 key 的值作为选择器显示内容</th><br>        </tr><br>         <tr><br>            <th>value</th><br>            <th>Array</th><br>            <th>[]</th><br>            <th>value 每一项的值表示选择了 range 对应项中的第几个（下标从 0 开始）</th><br>        </tr><br>        <tr><br>            <th>bindchange</th><br>            <th>EventHandle</th><br>            <th></th><br>            <th>value 改变时触发 change 事件，event.detail = {value: value}</th><br>        </tr><br>        <tr><br>            <th>bindcolumnchange</th><br>            <th>EventHandle</th><br>            <th></th><br>            <th>某一列的值改变时触发 columnchange 事件，event.detail = {column: column, value: value}，column 的值表示改变了第几列（下标从0开始），value 的值表示变更值的下标</th><br>        </tr><br>        <tr><br>            <th>disabled</th><br>            <th>Boolean</th><br>            <th>false</th><br>            <th>是否禁用</th><br>        </tr><br> </table>       

<h3 id="时间选择器"><a href="#时间选择器" class="headerlink" title="时间选择器"></a>时间选择器</h3><p>时间选择器：mode = time。</p>
<p><img src="http://img.blog.csdn.net/20170926195025866?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h3 id="日期选择器"><a href="#日期选择器" class="headerlink" title="日期选择器"></a>日期选择器</h3><p>日期选择器：mode = date。<br><img src="http://img.blog.csdn.net/20170926195218972?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>fields 自动对应的有效值：<br><img src="http://img.blog.csdn.net/20170926195316306?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h3 id="省市区选择器"><a href="#省市区选择器" class="headerlink" title="省市区选择器"></a>省市区选择器</h3><p>mode = region（最低版本：1.4.0）。<br><img src="http://img.blog.csdn.net/20170926195408230?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="官方示例"><a href="#官方示例" class="headerlink" title="官方示例"></a>官方示例</h2><p><img src="http://img.blog.csdn.net/20170926195852338?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><p>picker.wxml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;view class=&quot;section&quot;&gt;</div><div class="line">  &lt;view class=&quot;section__title&quot;&gt;普通选择器&lt;/view&gt;</div><div class="line">  &lt;picker bindchange=&quot;bindPickerChange&quot; value=&quot;&#123;&#123;index&#125;&#125;&quot; range=&quot;&#123;&#123;array&#125;&#125;&quot;&gt;</div><div class="line">    &lt;view class=&quot;picker&quot;&gt;</div><div class="line">      当前选择：&#123;&#123;array[index]&#125;&#125;</div><div class="line">    &lt;/view&gt;</div><div class="line">  &lt;/picker&gt;</div><div class="line">&lt;/view&gt;</div><div class="line">&lt;view class=&quot;section&quot;&gt;</div><div class="line">  &lt;view class=&quot;section__title&quot;&gt;多列选择器&lt;/view&gt;</div><div class="line">  &lt;picker mode=&quot;multiSelector&quot; bindchange=&quot;bindMultiPickerChange&quot; bindcolumnchange=&quot;bindMultiPickerColumnChange&quot; value=&quot;&#123;&#123;multiIndex&#125;&#125;&quot; range=&quot;&#123;&#123;multiArray&#125;&#125;&quot;&gt;</div><div class="line">    &lt;view class=&quot;picker&quot;&gt;</div><div class="line">      当前选择：&#123;&#123;multiArray[0][multiIndex[0]]&#125;&#125;，&#123;&#123;multiArray[1][multiIndex[1]]&#125;&#125;，&#123;&#123;multiArray[2][multiIndex[2]]&#125;&#125;</div><div class="line">    &lt;/view&gt;</div><div class="line">  &lt;/picker&gt;</div><div class="line">&lt;/view&gt;</div><div class="line">&lt;view class=&quot;section&quot;&gt;</div><div class="line">  &lt;view class=&quot;section__title&quot;&gt;时间选择器&lt;/view&gt;</div><div class="line">  &lt;picker mode=&quot;time&quot; value=&quot;&#123;&#123;time&#125;&#125;&quot; start=&quot;09:01&quot; end=&quot;21:01&quot; bindchange=&quot;bindTimeChange&quot;&gt;</div><div class="line">    &lt;view class=&quot;picker&quot;&gt;</div><div class="line">      当前选择: &#123;&#123;time&#125;&#125;</div><div class="line">    &lt;/view&gt;</div><div class="line">  &lt;/picker&gt;</div><div class="line">&lt;/view&gt;</div><div class="line"></div><div class="line">&lt;view class=&quot;section&quot;&gt;</div><div class="line">  &lt;view class=&quot;section__title&quot;&gt;日期选择器&lt;/view&gt;</div><div class="line">  &lt;picker mode=&quot;date&quot; value=&quot;&#123;&#123;date&#125;&#125;&quot; start=&quot;2015-09-01&quot; end=&quot;2017-09-01&quot; bindchange=&quot;bindDateChange&quot;&gt;</div><div class="line">    &lt;view class=&quot;picker&quot;&gt;</div><div class="line">      当前选择: &#123;&#123;date&#125;&#125;</div><div class="line">    &lt;/view&gt;</div><div class="line">  &lt;/picker&gt;</div><div class="line">&lt;/view&gt;</div><div class="line">&lt;view class=&quot;section&quot;&gt;</div><div class="line">  &lt;view class=&quot;section__title&quot;&gt;省市区选择器&lt;/view&gt;</div><div class="line">  &lt;picker mode=&quot;region&quot; bindchange=&quot;bindRegionChange&quot; value=&quot;&#123;&#123;region&#125;&#125;&quot; custom-item=&quot;&#123;&#123;customItem&#125;&#125;&quot;&gt;</div><div class="line">    &lt;view class=&quot;picker&quot;&gt;</div><div class="line">      当前选择：&#123;&#123;region[0]&#125;&#125;，&#123;&#123;region[1]&#125;&#125;，&#123;&#123;region[2]&#125;&#125;</div><div class="line">    &lt;/view&gt;</div><div class="line">  &lt;/picker&gt;</div><div class="line">&lt;/view&gt;</div></pre></td></tr></table></figure></p>
<p>对应的packer.js文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div></pre></td><td class="code"><pre><div class="line">Page(&#123;</div><div class="line">  data: &#123;</div><div class="line">    array: [&apos;美国&apos;, &apos;中国&apos;, &apos;巴西&apos;, &apos;日本&apos;],</div><div class="line">    objectArray: [</div><div class="line">      &#123;</div><div class="line">        id: 0,</div><div class="line">        name: &apos;美国&apos;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        id: 1,</div><div class="line">        name: &apos;中国&apos;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        id: 2,</div><div class="line">        name: &apos;巴西&apos;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        id: 3,</div><div class="line">        name: &apos;日本&apos;</div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    index: 0,</div><div class="line">    multiArray: [[&apos;无脊柱动物&apos;, &apos;脊柱动物&apos;], [&apos;扁性动物&apos;, &apos;线形动物&apos;, &apos;环节动物&apos;, &apos;软体动物&apos;, &apos;节肢动物&apos;], [&apos;猪肉绦虫&apos;, &apos;吸血虫&apos;]],</div><div class="line">    objectMultiArray: [</div><div class="line">      [</div><div class="line">        &#123;</div><div class="line">          id: 0,</div><div class="line">          name: &apos;无脊柱动物&apos;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          id: 1,</div><div class="line">          name: &apos;脊柱动物&apos;</div><div class="line">        &#125;</div><div class="line">      ], [</div><div class="line">        &#123;</div><div class="line">          id: 0,</div><div class="line">          name: &apos;扁性动物&apos;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          id: 1,</div><div class="line">          name: &apos;线形动物&apos;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          id: 2,</div><div class="line">          name: &apos;环节动物&apos;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          id: 3,</div><div class="line">          name: &apos;软体动物&apos;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          id: 3,</div><div class="line">          name: &apos;节肢动物&apos;</div><div class="line">        &#125;</div><div class="line">      ], [</div><div class="line">        &#123;</div><div class="line">          id: 0,</div><div class="line">          name: &apos;猪肉绦虫&apos;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          id: 1,</div><div class="line">          name: &apos;吸血虫&apos;</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    ],</div><div class="line">    multiIndex: [0, 0, 0],</div><div class="line">    date: &apos;2016-09-01&apos;,</div><div class="line">    time: &apos;12:01&apos;,</div><div class="line">    region: [&apos;广东省&apos;, &apos;广州市&apos;, &apos;海珠区&apos;],</div><div class="line">    customItem: &apos;全部&apos;</div><div class="line">  &#125;,</div><div class="line">  bindPickerChange: function(e) &#123;</div><div class="line">    console.log(&apos;picker发送选择改变，携带值为&apos;, e.detail.value)</div><div class="line">    this.setData(&#123;</div><div class="line">      index: e.detail.value</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  bindMultiPickerChange: function (e) &#123;</div><div class="line">    console.log(&apos;picker发送选择改变，携带值为&apos;, e.detail.value)</div><div class="line">    this.setData(&#123;</div><div class="line">      multiIndex: e.detail.value</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  bindMultiPickerColumnChange: function (e) &#123;</div><div class="line">    console.log(&apos;修改的列为&apos;, e.detail.column, &apos;，值为&apos;, e.detail.value);</div><div class="line">    var data = &#123;</div><div class="line">      multiArray: this.data.multiArray,</div><div class="line">      multiIndex: this.data.multiIndex</div><div class="line">    &#125;;</div><div class="line">    data.multiIndex[e.detail.column] = e.detail.value;</div><div class="line">    switch (e.detail.column) &#123;</div><div class="line">      case 0:</div><div class="line">        switch (data.multiIndex[0]) &#123;</div><div class="line">          case 0:</div><div class="line">            data.multiArray[1] = [&apos;扁性动物&apos;, &apos;线形动物&apos;, &apos;环节动物&apos;, &apos;软体动物&apos;, &apos;节肢动物&apos;];</div><div class="line">            data.multiArray[2] = [&apos;猪肉绦虫&apos;, &apos;吸血虫&apos;];</div><div class="line">            break;</div><div class="line">          case 1:</div><div class="line">            data.multiArray[1] = [&apos;鱼&apos;, &apos;两栖动物&apos;, &apos;爬行动物&apos;];</div><div class="line">            data.multiArray[2] = [&apos;鲫鱼&apos;, &apos;带鱼&apos;];</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        data.multiIndex[1] = 0;</div><div class="line">        data.multiIndex[2] = 0;</div><div class="line">        break;</div><div class="line">      case 1:</div><div class="line">        switch (data.multiIndex[0]) &#123;</div><div class="line">          case 0:</div><div class="line">            switch (data.multiIndex[1]) &#123;</div><div class="line">              case 0:</div><div class="line">                data.multiArray[2] = [&apos;猪肉绦虫&apos;, &apos;吸血虫&apos;];</div><div class="line">                break;</div><div class="line">              case 1:</div><div class="line">                data.multiArray[2] = [&apos;蛔虫&apos;];</div><div class="line">                break;</div><div class="line">              case 2:</div><div class="line">                data.multiArray[2] = [&apos;蚂蚁&apos;, &apos;蚂蟥&apos;];</div><div class="line">                break;</div><div class="line">              case 3:</div><div class="line">                data.multiArray[2] = [&apos;河蚌&apos;, &apos;蜗牛&apos;, &apos;蛞蝓&apos;];</div><div class="line">                break;</div><div class="line">              case 4:</div><div class="line">                data.multiArray[2] = [&apos;昆虫&apos;, &apos;甲壳动物&apos;, &apos;蛛形动物&apos;, &apos;多足动物&apos;];</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            break;</div><div class="line">          case 1:</div><div class="line">            switch (data.multiIndex[1]) &#123;</div><div class="line">              case 0:</div><div class="line">                data.multiArray[2] = [&apos;鲫鱼&apos;, &apos;带鱼&apos;];</div><div class="line">                break;</div><div class="line">              case 1:</div><div class="line">                data.multiArray[2] = [&apos;青蛙&apos;, &apos;娃娃鱼&apos;];</div><div class="line">                break;</div><div class="line">              case 2:</div><div class="line">                data.multiArray[2] = [&apos;蜥蜴&apos;, &apos;龟&apos;, &apos;壁虎&apos;];</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        data.multiIndex[2] = 0;</div><div class="line">        console.log(data.multiIndex);</div><div class="line">        break;</div><div class="line">    &#125;</div><div class="line">    this.setData(data);</div><div class="line">  &#125;,</div><div class="line">  bindDateChange: function(e) &#123;</div><div class="line">    console.log(&apos;picker发送选择改变，携带值为&apos;, e.detail.value)</div><div class="line">    this.setData(&#123;</div><div class="line">      date: e.detail.value</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  bindTimeChange: function(e) &#123;</div><div class="line">    console.log(&apos;picker发送选择改变，携带值为&apos;, e.detail.value)</div><div class="line">    this.setData(&#123;</div><div class="line">      time: e.detail.value</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  bindRegionChange: function (e) &#123;</div><div class="line">    console.log(&apos;picker发送选择改变，携带值为&apos;, e.detail.value)</div><div class="line">    this.setData(&#123;</div><div class="line">      region: e.detail.value</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>注：关于wxss样式文件这里不再罗列</p>
<h2 id="省市县示例"><a href="#省市县示例" class="headerlink" title="省市县示例"></a>省市县示例</h2><p>我们再来看一下本文开始的时候的例子：<br><img src="http://img.blog.csdn.net/20170926170228873?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>相关代码如下：<br>feedback.wxml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;view class=&quot;container&quot;&gt;</div><div class="line">  &lt;picker bindchange=&quot;bindPickerChange&quot; value=&quot;&#123;&#123;index&#125;&#125;&quot; range=&quot;&#123;&#123;array&#125;&#125;&quot;&gt;</div><div class="line">    &lt;view class=&quot;picker&quot;&gt;</div><div class="line">      &lt;view class=&quot;fb-type&quot;&gt;</div><div class="line">        &lt;view class=&quot;type-label&quot;&gt;&#123;&#123;array[index]&#125;&#125;&lt;/view&gt;</div><div class="line">        &lt;image class=&quot;type-icon&quot; src=&quot;http://yanxuan.nosdn.127.net/hxm/yanxuan-wap/p/20161201/style/img/icon-normal/pickerArrow-a8b918f05f.png&quot;&gt;&lt;/image&gt;</div><div class="line"></div><div class="line">      &lt;/view&gt;</div><div class="line">    &lt;/view&gt;</div><div class="line">  &lt;/picker&gt;</div><div class="line">  &lt;view class=&quot;fb-body&quot;&gt;</div><div class="line">    &lt;textarea class=&quot;content&quot; placeholder=&quot;对我们网站、商品、服务，你还有什么建议吗？你还希望在严选上买到什么？请告诉我们...&quot; /&gt;</div><div class="line">    &lt;view class=&quot;text-count&quot;&gt;0/500&lt;/view&gt;</div><div class="line">  &lt;/view&gt;</div><div class="line">  &lt;view class=&quot;fb-mobile&quot;&gt;</div><div class="line">    &lt;view class=&quot;label&quot;&gt;手机号码&lt;/view&gt;</div><div class="line">    &lt;view class=&quot;mobile-box&quot;&gt;</div><div class="line">      &lt;input class=&quot;mobile&quot; placeholder=&quot;方便我们与你联系&quot; /&gt;</div><div class="line">      &lt;image class=&quot;clear-icon&quot; src=&quot;http://yanxuan.nosdn.127.net/hxm/yanxuan-wap/p/20161201/style/img/icon-normal/clear-fb-dd9d604f86.png&quot;&gt;&lt;/image&gt;</div><div class="line">    &lt;/view&gt;</div><div class="line">  &lt;/view&gt;</div><div class="line"></div><div class="line">  &lt;button class=&quot;fb-btn&quot;&gt;提交&lt;/button&gt;</div><div class="line">&lt;/view&gt;</div></pre></td></tr></table></figure>
<p>样式文件feedback.wxss</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line">page&#123;</div><div class="line">    background: #f4f4f4;</div><div class="line">    min-height: 100%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.container&#123;</div><div class="line">    background: #f4f4f4;</div><div class="line">    min-height: 100%;</div><div class="line">    padding-top: 30rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fb-type&#123;</div><div class="line">  height: 104rpx;</div><div class="line">  width: 100%;</div><div class="line">  background: #fff;</div><div class="line">  margin-bottom: 20rpx;</div><div class="line">  display: flex;</div><div class="line">  flex-direction: row;</div><div class="line">  align-items: center;</div><div class="line">  padding-left: 30rpx;</div><div class="line">  padding-right: 30rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fb-type .type-label&#123;</div><div class="line">  height: 36rpx;</div><div class="line">  flex: 1;</div><div class="line">  color: #333;</div><div class="line">  font-size: 28rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fb-type .type-icon&#123;</div><div class="line">  height: 36rpx;</div><div class="line">  width: 36rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fb-body&#123;</div><div class="line">  width: 100%;</div><div class="line">  background: #fff;</div><div class="line">  height: 374rpx;</div><div class="line">  padding: 18rpx 30rpx 64rpx 30rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fb-body .content&#123;</div><div class="line">  width: 100%;</div><div class="line">  height: 100%;</div><div class="line">  color: #333;</div><div class="line">  line-height: 40rpx;</div><div class="line">  font-size: 28rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fb-body .text-count&#123;</div><div class="line">  padding-top: 17rpx;</div><div class="line">  line-height: 30rpx;</div><div class="line">  float: right;</div><div class="line">  color: #666;</div><div class="line">  font-size: 24rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fb-mobile&#123;</div><div class="line">  height: 162rpx;</div><div class="line">  width: 100%;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fb-mobile .label&#123;</div><div class="line">  height: 58rpx;</div><div class="line">  width: 100%;</div><div class="line">  padding-top: 14rpx;</div><div class="line">  padding-bottom: 11rpx;</div><div class="line">  color: #7f7f7f;</div><div class="line">  font-size: 24rpx;</div><div class="line">  padding-left: 30rpx;</div><div class="line">  padding-right: 30rpx;</div><div class="line">  line-height: 33rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fb-mobile .mobile-box&#123;</div><div class="line">  height: 104rpx;</div><div class="line">  width: 100%;</div><div class="line">  color: #333;</div><div class="line">  padding-left: 30rpx;</div><div class="line">  padding-right: 30rpx;</div><div class="line">  font-size: 24rpx;</div><div class="line">  background: #fff;</div><div class="line">  position: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fb-mobile .mobile&#123;</div><div class="line">  position: absolute;</div><div class="line">  top: 27rpx;</div><div class="line">  left: 30rpx;</div><div class="line">  height: 50rpx;</div><div class="line">  width: 100%;</div><div class="line">  color: #333;</div><div class="line">  line-height: 50rpx;</div><div class="line">  font-size: 24rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.clear-icon&#123;</div><div class="line">  position: absolute;</div><div class="line">  top: 43rpx;</div><div class="line">  right: 30rpx;</div><div class="line">  width: 28rpx;</div><div class="line">  height: 28rpx;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fb-btn&#123;</div><div class="line">  width: 100%;</div><div class="line">  height: 98rpx;</div><div class="line">  line-height: 98rpx;</div><div class="line">  background: #b4282d;</div><div class="line">  position: fixed;</div><div class="line">  bottom: 0;</div><div class="line">  left: 0;</div><div class="line">  border-radius: 0;</div><div class="line">  color: #fff;</div><div class="line">  font-size: 28rpx;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>逻辑js：feedback.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">var app = getApp();</div><div class="line"></div><div class="line">Page(&#123;</div><div class="line">  data: &#123;</div><div class="line">    array: [&apos;请选择反馈类型&apos;, &apos;商品相关&apos;, &apos;物流状况&apos;, &apos;客户服务&apos;, &apos;优惠活动&apos;, &apos;功能异常&apos;, &apos;产品建议&apos;, &apos;其他&apos;],</div><div class="line">    index: 0,</div><div class="line">  &#125;,</div><div class="line">  bindPickerChange: function (e) &#123;</div><div class="line">    console.log(&apos;picker发送选择改变，携带值为&apos;, e.detail.value)</div><div class="line">    this.setData(&#123;</div><div class="line">      index: e.detail.value</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  onLoad: function (options) &#123;</div><div class="line">  &#125;,</div><div class="line">  onReady: function () &#123;</div><div class="line"></div><div class="line">  &#125;,</div><div class="line">  onShow: function () &#123;</div><div class="line"></div><div class="line">  &#125;,</div><div class="line">  onHide: function () &#123;</div><div class="line">    // 页面隐藏</div><div class="line"></div><div class="line">  &#125;,</div><div class="line">  onUnload: function () &#123;</div><div class="line">    // 页面关闭</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为移动端的分发入口，微信小程序虽然没有当初期望的那么火，但是却是一个不能忽视的入口。撇开微信小程序对于腾讯生态的原因不说，微信小程序对于开发还是很方便的，特别是对于白痴选手来说，基本不需要多少过多的学习，就能写一个不错的小程序。&lt;/p&gt;
&lt;p&gt;下面就微信小程序常见的组件分
    
    </summary>
    
      <category term="小程序" scheme="http://www.xiangzhihong.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://www.xiangzhihong.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="微信" scheme="http://www.xiangzhihong.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
</feed>
