<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>向志洪</title>
  <subtitle>个人技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xiangzhihong.com/"/>
  <updated>2017-07-10T01:35:08.000Z</updated>
  <id>http://www.xiangzhihong.com/</id>
  
  <author>
    <name>xiangzhihong</name>
    <email>1044817967@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack+react环境搭建</title>
    <link href="http://www.xiangzhihong.com/2017/06/03/webpack+react%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.xiangzhihong.com/2017/06/03/webpack+react环境搭建/</id>
    <published>2017-06-02T16:00:00.000Z</published>
    <updated>2017-07-10T01:35:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们知道前端的框架纷繁复杂，各有各的优点。而我们选择使用React作为开发框架的时候，往往会选择Webpack+Babel+React来开始我们的项目。之前也讲过其他的前端框架，如<a href="http://blog.csdn.net/xiangzhihong8/article/details/53993980" target="_blank" rel="external"> gulp+webpack</a>，准确的说这不是一个框架，只是项目组织的形式而已。</p>
<h1 id="Webpack-Babel-React环境搭建"><a href="#Webpack-Babel-React环境搭建" class="headerlink" title="Webpack+Babel+React环境搭建"></a>Webpack+Babel+React环境搭建</h1><h2 id="安装Webpack"><a href="#安装Webpack" class="headerlink" title="安装Webpack"></a>安装Webpack</h2><p>关于Webpack的介绍这里不讲解，大家可以看之前的讲解<a href="http://blog.csdn.net/xiangzhihong8/article/details/53993980" target="_blank" rel="external">webpack介绍</a>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install webpack -g</div></pre></td></tr></table></figure>
<h2 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h2><p>创建一个名叫learn-webpack项目，并进去项目目录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir learn-webpack </div><div class="line">cd learn-webpack</div></pre></td></tr></table></figure></p>
<p><img src="http://img.blog.csdn.net/20170104224231893?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>接下来我们来创建2个文件:app.js和index.html，我们在也没上输出一个”Hello World”，<br>app.js：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.querySelector(&apos;#app&apos;).innerHTML = &apos;Hello World!&apos;;</div></pre></td></tr></table></figure></p>
<p>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">  &lt;title&gt;Learn-webpack&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;script src=&quot;dist/bundle.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>然后在终端执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack ./app.js ./dist/bundle.js</div></pre></td></tr></table></figure>
<p>最后执行启动本地的http服务，我们这里用python：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -m SimpleHTTPServer</div></pre></td></tr></table></figure>
<p>然后我们访问：<a href="http://localhost:8000就可以看到效果了。" target="_blank" rel="external">http://localhost:8000就可以看到效果了。</a></p>
<h2 id="webpack文件配置"><a href="#webpack文件配置" class="headerlink" title="webpack文件配置"></a>webpack文件配置</h2><p>实际上每个项目下都应该包含一个webpack.config.js，用来告诉Webpack需要做些什么，这个我们之前文章也说过。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  entry: &quot;app.js&quot;,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname+&quot;/dist&quot;,</div><div class="line">    filename: &quot;bundle.js&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来我们在终端运行命令，看看是不是和之前输入 webpack ./app.js ./dist/bundle.js 的打包编译结果一样呢，答案是肯定的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure>
<p>注：<br><strong>entry：指定打包的入口文件</strong></p>
<ul>
<li>单个文件打包为单个输出文件，直接写该文件的名字，例如：entry:”main.js”</li>
<li>多个文件打包为单个输出文件，将文件名放进一个数组，例如：entry:[‘main.js’,’xx.js’]</li>
<li>多个文件打包为多个输出文件，将文件名放入一个键字对，例如：entry: {a:’main.js’,b:’xx.js’}<br><strong>output：配置打包结果</strong><br>path为定义输出文件夹，filename为打包结果文件的名称，如果指定打包入口文件为上面的1、2种情况，filename里面直接跟你想输出的文件名。若为第3种情况filename里面需写成[name].文件名.js，filename里面的[name]为entry中的键。<h3 id="监听变化自动打包"><a href="#监听变化自动打包" class="headerlink" title="监听变化自动打包"></a>监听变化自动打包</h3>当我们在不停的对代码进行变动的时候，为了不修改一次然后又手动去进行打包一次，可以使用webpack的watch功能。这也算是webpack的一个黑科技，以前做后端的时候必须重新部署，这个是很蛋疼的。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --watch 或者 webpack -w</div></pre></td></tr></table></figure>
<p>或者我们可以直接在配置代码里面把watch设置为true。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  entry: &quot;app.js&quot;,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname+&quot;/dist&quot;,</div><div class="line">    filename: &quot;bundle.js&quot;</div><div class="line">  &#125;,</div><div class="line">  watch: true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Babel配置"><a href="#Babel配置" class="headerlink" title="Babel配置"></a>Babel配置</h2><p>Babel 是一个 JavaScript 编译器。使用它可以将ES6的语法转换为ES5的语法，以便在现在有的环境执行之前的代码。<br>首先安装basel。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install webpack babel-loader babel-core babel-preset-es2015 --save-dev</div></pre></td></tr></table></figure>
<p>执行安装完成后需要将之前的webpack.config.js修改为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  entry: &quot;./app.js&quot;,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname+&quot;/dist&quot;,</div><div class="line">    filename: &quot;bundle.js&quot;</div><div class="line">  &#125;,</div><div class="line">  module: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123;</div><div class="line">        test: /\.jsx?$/,</div><div class="line">        loader: &apos;babel-loader&apos;,</div><div class="line">        exclude: /node_modules/,</div><div class="line">        query: &#123;</div><div class="line">          presets: [&apos;es2015&apos;]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  resolve: &#123;</div><div class="line">    extensions: [&apos;&apos;,&apos;.coffee&apos;,&apos;.js&apos;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在就能在文件里面以ES6的语法进行代码编写，如在app.js加入:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var func = str =&gt; &#123;</div><div class="line">  console.log(str);</div><div class="line">&#125;;</div><div class="line">func(&apos;Hello Babel!&apos;);</div></pre></td></tr></table></figure>
<p>我们再次运行，如果看到输出，就说明配置成功了。这里有关Loader的知识和配置就不讲究了，大家可以网上补补。</p>
<h2 id="与React结合"><a href="#与React结合" class="headerlink" title="与React结合"></a>与React结合</h2><p>终端输入以下代码对react和react-dom进行安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install react react-dom --save</div></pre></td></tr></table></figure>
<p>安装Babel针对React的预设插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install babel-preset-react --save-dev</div></pre></td></tr></table></figure>
<p>由于我们增加了react的预设插件，所以需要对webpack.config.js进行修改。将module -&gt; loaders下面的query修改如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">query: &#123;</div><div class="line">    presets: [&apos;es2015&apos;,&apos;react&apos;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来我们创建一个hello.js.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line"></div><div class="line">class Hello extends React.Component&#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;div&gt;</div><div class="line">          Hello, World!</div><div class="line">      &lt;/div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default Hello;</div></pre></td></tr></table></figure>
<p>在app.js做一下配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import React from &quot;react&quot;;</div><div class="line">import ReactDOM from &quot;react-dom&quot;;</div><div class="line">import Hello from &quot;./hello&quot;;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;Hello /&gt;,</div><div class="line">  document.querySelector(&apos;#app&apos;)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>哈哈哈，这里如果大家做过React Native的，这里是不是感觉很亲切，只不过React Native还是用的npm在做管理。我们同样启动服务在看看，如果看到Hello World!就说明环境配置成功。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我们知道前端的框架纷繁复杂，各有各的优点。而我们选择使用React作为开发框架的时候，往往会选择Webpack+Babel+React来开始
    
    </summary>
    
      <category term="前端" scheme="http://www.xiangzhihong.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端开发" scheme="http://www.xiangzhihong.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="react" scheme="http://www.xiangzhihong.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Google V8引擎</title>
    <link href="http://www.xiangzhihong.com/2017/06/03/Google%20V8%E5%BC%95%E6%93%8E/"/>
    <id>http://www.xiangzhihong.com/2017/06/03/Google V8引擎/</id>
    <published>2017-06-02T16:00:00.000Z</published>
    <updated>2017-07-17T06:32:19.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="V8的前世今生"><a href="#V8的前世今生" class="headerlink" title="V8的前世今生"></a>V8的前世今生</h1><p>V8是JavaScript渲染引擎，第一个版本随着Chrome的发布而发布(具体时间为2008年9月2日)。在运行JavaScript之前，相比其它的JavaScript的引擎转换成字节码或解释执行，V8将其编译成原生机器码（IA-32, x86-64, ARM, or MIPS CPUs），并且使用了如内联缓存（inline caching）等方法来提高性能。V8可以独立运行，也可以嵌入到C++应用程序中运行。</p>
<p>随着Web技术的快速发展，JavaScript所要承担的工作也越来越多，早就超越了“表单验证”的范畴，这就更需要快速的解析和执行JavaScript脚本。V8引擎就是为解决这一问题而生，在Node中也采用该引擎来解析JavaScript。</p>
<p>那么，V8是如何使得实现对JavaScript的解析，又是如何实现高性能的呢？下面从几个方面来分析下V8是如何渲染页面的。</p>
<h1 id="渲染引擎与网页渲染"><a href="#渲染引擎与网页渲染" class="headerlink" title="渲染引擎与网页渲染"></a>渲染引擎与网页渲染</h1><h3 id="编程分类"><a href="#编程分类" class="headerlink" title="编程分类"></a>编程分类</h3><p>编程语言分为编译型语言和解释型语言两类，编译型语言在执行之前要先进行完全编译，而解释型语言一边编译一边执行，很明显解释型语言的执行速度是慢于编译型语言的，而JavaScript就是一种解释型脚本语言，支持动态类型、弱类型、基于原型的语言，内置支持类型。</p>
<h2 id="网页渲染"><a href="#网页渲染" class="headerlink" title="网页渲染"></a>网页渲染</h2><p>浏览器自从上世纪80年代后期90年代初期诞生以来，已经得到了长足的发展，其功能也越来越丰富，包括网络、资源管理、网页浏览、多页面管理、插件和扩展、书签管理、历史记录管理、设置管理、下载管理、账户和同步、安全机制、隐私管理、外观主题、开发者工具等。而在这之中，最重要的莫过于网页渲染。</p>
<h3 id="渲染引擎"><a href="#渲染引擎" class="headerlink" title="渲染引擎"></a>渲染引擎</h3><p><strong>渲染引擎</strong>：所谓渲染引擎，就是将HTML/CSS/JavaScript等文本或图片等信息转换成图像结果的转换程序。在浏览器的发展过程中，不同的厂商开发了不同的渲染引擎，如Tridend(IE)、Gecko(FF)、WebKit(Safari,Chrome,Andriod浏览器)等。而在这里面不得不提下WebKit，一个由苹果发起的一个开源项目，如今它在移动端占据着垄断地位，更有基于WebKit的web操作系统不断涌现(如：Chrome OS、Web OS)。</p>
<p>WebKit内部结构大体如下(来自网络)：</p>
<p><img src="http://img.blog.csdn.net/20170711212539052?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>上图中实线框内模块是所有移植的共有部分，虚线框内不同的厂商可以自己实现。由上图可知，WebKit主要有操作系统、WebCore 、WebKit嵌入式接口和第三方库组成。</p>
<ul>
<li><strong>操作系统</strong>：是管理和控制计算机硬件与软件资源的计算机程序，是直接运行在“裸机”上的最基本的系统软件，任何其他软件都必须在操作系统的支持下才能运行。WebKit也是在操作系统上工作的。</li>
<li><strong>WebCore</strong>：本部分包含各个浏览器使用的共享部分，包括HTML解析器、CSS解析器、DOM和SVG等。JavaScriptCore是WebKit的默认引擎，在谷歌系列产品中被替换为V8引擎。WebKit Ports是WebKit中的非共享部分，由于平台差异、第三方库和需求的不同等原因，导致不同浏览器性能和功能差异的关键部分。</li>
<li><strong>WebKit嵌入式接口</strong>：该接口主要供浏览器调用，与移植密切相关，不同的移植有不同的接口规范。</li>
<li><strong>第三方库</strong>：主要是诸如图形库、网络库、视频库、数据存储库等第三方库。</li>
</ul>
<h2 id="网页渲染流程简析"><a href="#网页渲染流程简析" class="headerlink" title="网页渲染流程简析"></a>网页渲染流程简析</h2><p>对于一个网页，要经历怎样的过程，才能呈现在用户面前呢？或许下面的一张图可以给你提供答案。<br><img src="http://img.blog.csdn.net/20170711213832415?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>首先，系统将网页输入到HTML解析器，HTML解析器解析，然后构建DOM树，在这期间如果遇到JavaScript代码则交给JavaScript引擎处理；如果遇到CSS样式信息，则构建一个内部绘图模型。该模型由布局模块计算模型内部各个元素的位置和大小信息，最后由绘图模块完成从该模型到图像的绘制。<br>对于网页的绘制过程，大体可以分为3个阶段：</p>
<h4 id="1，从输入URL到生成DOM树"><a href="#1，从输入URL到生成DOM树" class="headerlink" title="1，从输入URL到生成DOM树"></a>1，从输入URL到生成DOM树</h4><p>在这个阶段中，主要会经历一下几个步骤：</p>
<ol>
<li>地址栏输入URL，WebKit调用资源加载器加载相应资源；</li>
<li>加载器依赖网络模块建立连接，发送请求并接收答复；</li>
<li>WebKit接收各种网页或者资源数据，其中某些资源可能同步或异步获取；</li>
<li>网页交给HTML解析器转变为词语；</li>
<li>解释器根据词语构建节点，形成DOM树；</li>
<li>如果节点是JavaScript代码，调用JavaScript引擎解释并执行；</li>
<li>JavaScript代码可能会修改DOM树结构；</li>
<li>如果节点依赖其他资源，如图片、视频等，调用资源加载器加载它们，但这些是异步加载的，不会阻碍当前DOM树继续创建；如果是JavaScript资源URL（没有标记异步方式），则需要停止当前DOM树创建，直到JavaScript加载并被JavaScript引擎执行后才继续DOM树的创建。</li>
</ol>
<h4 id="2，从DOM树到构建WebKit绘图上下文"><a href="#2，从DOM树到构建WebKit绘图上下文" class="headerlink" title="2，从DOM树到构建WebKit绘图上下文"></a>2，从DOM树到构建WebKit绘图上下文</h4><p>在这个阶段，主要完成一下几个操作：</p>
<ol>
<li>CSS文件被CSS解释器解释成内部表示；</li>
<li>CSS解释器完成工作后，在DOM树上附加样式信息，生成RenderObject树；</li>
<li>RenderObject节点在创建的同时，WebKit会根据网页层次结构构建RenderLayer树，同时构建一个虚拟绘图上下文。</li>
</ol>
<h4 id="3，绘图上下文内容并呈现图像内容"><a href="#3，绘图上下文内容并呈现图像内容" class="headerlink" title="3，绘图上下文内容并呈现图像内容"></a>3，绘图上下文内容并呈现图像内容</h4><p>在这个阶段，主要完成一下操作：</p>
<ol>
<li>绘图上下文是一个与平台无关的抽象类，它将每个绘图操作桥接到不同的具体实现类，也就是绘图具体实现类；</li>
<li>绘图实现类也可能有简单的实现，也可能有复杂的实现，软件渲染、硬件渲染、合成渲染等；</li>
<li>绘图实现类将2D图形库或者3D图形库绘制结果保存，交给浏览器界面进行展示。</li>
</ol>
<p>##JavaScript引擎<br>JavaScript本质上是一种解释型语言，与编译型语言不同的是它需要一遍执行一边解析，而编译型语言在执行时已经完成编译。<br>那么对于JavaScript这种解释性语言来讲，如何提高解析速度就是当务之急。JavaScript引擎和渲染引擎的关系如下图所示.<br><img src="http://img.blog.csdn.net/20170711214942371?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>为了提高性能，JavaScript引入了Java虚拟机和C++编译器中的众多技术。而一个完整JavaScript引擎的执行过程大致流程如下：源代码-→抽象语法树-→字节码-→JIT-→本地代码。一个典型的抽象语法树如下图所示：<br><img src="http://img.blog.csdn.net/20170711215256338?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>为了节约将抽象语法树通过JIT技术转换成本地代码的时间，V8放弃了生成字节码阶段的性能优化。而通过Profiler采集一些信息，来优化本地代码。</p>
<p>在2017年4月底，v8 发布了5.9 版本，在此版本中新增了一个 Ignition 字节码解释器，并默认开启。做出这一改变的原因为：（主要动机）减轻机器码占用的内存空间，即牺牲时间换空间；提高代码的启动速度；对 v8 的代码进行重构，降低 v8 的代码复杂度（详细介绍请查阅：<a href="https://cnodejs.org/topic/59084a9cbbaf2f3f569be482" target="_blank" rel="external">JS 引擎与字节码的不解之缘</a>）</p>
<h1 id="V8引擎"><a href="#V8引擎" class="headerlink" title="V8引擎"></a>V8引擎</h1><p>前面，我们介绍了V8引擎的一些历史，下面我们重点来看看V8项目一些知识。首先，V8项目的结构如下：<br><img src="http://img.blog.csdn.net/20170711220207609?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h2><p>JavaScript作为一种无类型的语言，在编译时并不能准确知道变量的类型，只可以在运行时确定。而java、C++等静态类型语言，在编译时候就可以确切知道变量的类型。因而JavaScript运行效率比C++或Java低。</p>
<p>在C++中，源代码需要经过编译才能执行，在生成本地代码的过程中，变量的地址和类型已经确定，运行本地代码时利用数组和位移就可以存取变量和方法的地址，不需要再进行额外的查找，几个机器指令即可完成，节省了确定类型和地址的时间。</p>
<p>而对于JavaScript 来说，并不能像C++那样在执行时已经知道变量的类型和地址，所以在代码解析过程中，会产生很多的临时变量，而变量的存取是非常普遍和频繁的。</p>
<p>对于传统的变量存取来说，使用少数的汇编指令就能完成变量存取。<br><img src="http://img.blog.csdn.net/20170711220958294?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>在JavaScript中，除boolean，number，string，null，undefined这个五个简单变量外，其他的数据都是对象，V8使用一种特殊的方式来表示它们，进而优化JavaScript的内部表示问题。</p>
<p>JavaScript对象在V8中的实现包含三个部分：隐藏类指针，这是v8为JavaScript对象创建的隐藏类；属性值表指针，指向该对象包含的属性值；元素表指针，指向该对象包含的属性。</p>
<p>在V8中，数据的内部表示由数据的实际内容和数据的句柄构成。数据的实际内容是变长的，类型也是不同的；句柄固定大小，包含指向数据的指针。这种设计可以方便V8进行垃圾回收和移动数据内容，如果直接使用指针的话就会出问题或者需要更大的开销，使用句柄的话，只需修改句柄中的指针即可，使用者使用的还是句柄，指针改动是对使用者透明的。</p>
<p>除少数数据(如整型数据)由handle本身存储外，其他内容限于句柄大小和变长等原因，都存储在堆中。整数直接从value中取值，然后使用一个指针指向它，可以减少内存的占用并提高访问速度。一个句柄对象的大小是4字节(32位设备)或者8字节(64位设备)，而在JavaScriptCore中，使用的8个字节表示句柄。在堆中存放的对象都是4字节对齐的，所以它们指针的后两位是不需要的，V8用这两位表示数据的类型，00为整数，01为其他。</p>
<h2 id="V8引擎渲染过程"><a href="#V8引擎渲染过程" class="headerlink" title="V8引擎渲染过程"></a>V8引擎渲染过程</h2><p>V8引擎在执行JavaScript的过程中，主要有两个阶段：编译和运行。</p>
<p>在V8引擎中，源代码先被解析器转变为抽象语法树(AST)，然后使用JIT编译器的全代码生成器从AST直接生成本地可执行代码。这个过程不同于JAVA先生成字节码或中间表示，减少了AST到字节码的转换时间，提高了代码的执行速度。但由于缺少了转换为字节码这一中间过程，也就减少了优化代码的机会。</p>
<p>V8引擎编译本地代码时使用的主要类如下所示：</p>
<ul>
<li><strong>Script</strong>：表示JavaScript代码，即包含源代码，又包含编译之后生成的本地代码，即是编译入口，又是运行入口；</li>
<li><strong>Compiler</strong>：编译器类，辅组Script类来编译生成代码，调用解释器(Parser)来生成AST和全代码生成器，将AST转变为本地代码；</li>
<li><strong>AstNode</strong>：抽象语法树节点类，是其他所有节点的基类，包含非常多的子类，后面会针对不同的子类生成不同的本地代码；</li>
<li><strong>FullCodeGenerator</strong>：AstVisitor类的子类，通过遍历AST来为JavaScript生成本地可执行代码。</li>
</ul>
<h3 id="JavaScript代码编译过程"><a href="#JavaScript代码编译过程" class="headerlink" title="JavaScript代码编译过程"></a>JavaScript代码编译过程</h3><p>JavaScript代码编译的过程大致为：</p>
<ol>
<li>Script类调用Compiler类的Compile函数为其生成本地代码；</li>
<li>Compile函数先使用Parser类生成AST，再使用FullCodeGenerator类来生成本地代码；</li>
<li>本地代码与具体的硬件平台密切相关，FullCodeGenerator使用多个后端来生成与平台相匹配的本地汇编代码。</li>
</ol>
<p>大体的流程图如下所示：<br><img src="http://img.blog.csdn.net/20170711221739459?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>在执行编译之前，V8会构建众多全局对象并加载一些内置的库（如math库），来构建一个运行环境。但是，在JavaScript源代码中，并非所有的函数都被编译生成本地代码，而是采用在调用时才会编译的逻辑来动态编译。</p>
<p>由于V8缺少了生成中间字节码这一环节，为了提升性能，V8会在生成本地代码后，使用数据分析器(profiler)采集一些信息，然后根据这些数据将本地代码进行优化，生成更高效的本地代码，这是一个逐步改进的过程。当发现优化后代码的性能还不如未优化的代码，V8将退回原来的代码，也就是优化回滚。</p>
<p>在这一阶段涉及的类主要有：</p>
<ul>
<li><strong>Script</strong>：表示JavaScript代码，即包含源代码，又包含编译之后生成的本地代码，即是编译入口，又是运行入口；</li>
<li><strong>Execution</strong>：运行代码的辅组类，包含一些重要函数，如Call函数，它辅组进入和执行Script代码；</li>
<li><strong>JSFunction</strong>：需要执行的JavaScript函数表示类；</li>
<li><strong>Runtime</strong>：运行这些本地代码的辅组类，主要提供运行时所需的辅组函数，如：属性访问、类型转换、编译、算术、位操作、比较、正则表达式等；</li>
<li><strong>Heap</strong>：运行本地代码需要使用的内存堆类；</li>
<li><strong>MarkCompactCollector</strong>：垃圾回收机制的主要实现类，用来标记、清除和整理等基本的垃圾回收过程；</li>
<li><strong>SweeperThread</strong>：负责垃圾回收的线程。<br>本阶段大体流程如下如所示：</li>
</ul>
<p>在V8中，函数是一个基本单位，当某个JavaScript函数被调用时，V8会查找该函数是否已经生成本地代码，如果已经生成，则直接调用该函数。否则，V8引擎会生成属于该函数的本地代码。这样，对于那些不用的代码就可以减少执行时间。再次借助Runtime类中的辅组函数，将不用的空间进行标记清除和垃圾回收。</p>
<h3 id="优化回滚"><a href="#优化回滚" class="headerlink" title="优化回滚"></a>优化回滚</h3><p>因为V8是基于AST直接生成本地代码，没有经过中间表示层的优化，所以本地代码尚未经过很好的优化。于是，在2010年，V8引入了新的编译器-Crankshaft，它主要针对热点函数进行优化，基于JavaScript源代码开始分析而非本地代码，同时构建Hydroger图并基于此来进行优化分析。</p>
<p>Crankshaft编译器为了性能考虑，通常会做出比较乐观和大胆的预测—代码稳定且变量类型不变，所以可以生成高效的本地代码。但是，鉴于JavaScript的一个弱类型的语言，变量类型也可能在执行的过程中进行改变，鉴于这种情况，V8会将该编译器做的想当然的优化进行回滚，称为优化回滚。<br>例如，下面的示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var counter = 0;</div><div class="line">function test(x, y) &#123;</div><div class="line">    counter++;</div><div class="line">    if (counter &lt; 1000000) &#123;</div><div class="line">        // do something</div><div class="line">        return &apos;jeri&apos;;</div><div class="line">    &#125;</div><div class="line">    var unknown = new Date();</div><div class="line">    console.log(unknown);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该函数被调用多次之后，V8引擎可能会触发Crankshaft编译器对其进行优化，而优化代码认为示例代码的类型信息都已经被确定。当程序执行到new Date()这个地方，并未获取unknown这个变量的类型，V8只得将该部分代码进行回滚。</p>
<p>优化回滚是一个很耗时的操作，在写代码过程中，尽量不要触发优化该操作。在最近发布的 V8 5.9 版本中，新增了一个 Ignition 字节码解释器，TurboFan 和 Ignition 结合起来共同完成JavaScript的编译。这个版本中消除 Cranshaft 这个旧的编译器，并让新的 Turbofan 直接从字节码来优化代码，并当需要进行反优化的时候直接反优化到字节码，而不需要再考虑 JS 源代码。</p>
<h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><p>Node中通过JavaScript使用内存时就会发现只能使用部分内存（64位系统下约为1.4 GB，32位系统下约为0.7 GB），其深层原因是 V8 垃圾回收机制的限制所致（如果可使用内存太大，V8在进行垃圾回收时需耗费更多的资源和时间，严重影响JS的执行效率）。下面对内存管理进行介绍。<br>内存的管理组要由分配和回收两个部分构成。V8的内存划分如下：</p>
<ul>
<li><strong>Zone</strong>：管理小块内存。其先自己申请一块内存，然后管理和分配一些小内存，当一块小内存被分配之后，不能被Zone回收，只能一次性回收Zone分配的所有小内存。当一个过程需要很多内存，Zone将需要分配大量的内存，却又不能及时回收，会导致内存不足情况。</li>
<li><strong>堆</strong>：管理JavaScript使用的数据、生成的代码、哈希表等。为方便实现垃圾回收，堆被分为三个部分(这和Java等的堆不一样)：</li>
<li><strong>年轻分代</strong>：为新创建的对象分配内存空间，经常需要进行垃圾回收。为方便年轻分代中的内容回收，可再将年轻分代分为两半，一半用来分配，另一半在回收时负责将之前还需要保留的对象复制过来。<br><strong>年老分代</strong>：根据需要将年老的对象、指针、代码等数据保存起来，较少地进行垃圾回收。<br><strong>大对象</strong>：为那些需要使用较多内存对象分配内存，当然同样可能包含数据和代码等分配的内存，一个页面只分配一个对象。</li>
</ul>
<p>用一张图可以表示如下：<br><img src="http://img.blog.csdn.net/20170711230619391?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p>V8 使用了分代和大数据的内存分配，在回收内存时使用精简整理的算法标记未引用的对象，然后消除没有标记的对象，最后整理和压缩那些还未保存的对象，即可完成垃圾回收。</p>
<p>在V8中，使用较多的是年轻分代和年老分代。年轻分代中的对象垃圾回收主要通过Scavenge算法进行垃圾回收。在Scavenge的具体实现中，主要采用了Cheney算法。</p>
<p>Cheney算法：通过复制的方式实现的垃圾回收算法。它将堆内存分为两个 semispace，一个处于使用中（From空间），另一个处于闲置状态（To空间）。当分配对象时，先是在From空间中进行分配。当开始进行垃圾回收时，会检查From空间中的存活对象，这些存活对象将被复制到To空间中，而非存活对象占用的空间将会被释放。完成复制后，From空间和To空间的角色发生对换。在垃圾回收的过程中，就是通过将存活对象在两个 semispace 空间之间进行复制。</p>
<p>年轻分代中的对象有机会晋升为年老分代，条件主要有两个：一个是对象是否经历过Scavenge回收，一个是To空间的内存占用比超过限制。</p>
<p>对于年老分代中的对象，由于存活对象占较大比重，再采用上面的方式会有两个问题：一个是存活对象较多，复制存活对象的效率将会很低；另一个问题依然是浪费一半空间的问题。为此，V8在年老分代中主要采用了Mark-Sweep（标记清除）标记清除和Mark-Compact（标记整理）相结合的方式进行垃圾回收。</p>
<h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p>在V8引擎启动时，需要构建JavaScript运行环境，需要加载很多内置对象，同时也需要建立内置的函数，如Array，String，Math等。为了使V8更加整洁，加载对象和建立函数等任务都是使用JavaScript文件来实现的，V8引擎负责提供机制来支持，就是在编译和执行JavaScript前先加载这些文件。</p>
<p>V8引擎需要编译和执行这些内置的JavaScript代码，同时使用堆等来保存执行过程中创建的对象、代码等，这些都需要时间。为此，V8引入了快照机制，将这些内置的对象和函数加载之后的内存保存并序列化。经过快照机制的启动时间可以缩减几毫秒。</p>
<h1 id="V8-VS-JavaScriptCore"><a href="#V8-VS-JavaScriptCore" class="headerlink" title="V8 VS JavaScriptCore"></a>V8 VS JavaScriptCore</h1><p>JavaScriptCore引擎是WebKit中默认的JavaScript引擎，也是苹果开源的一个项目，应用较为广泛。最初，性能不是很好，从2008年开始了一系列的优化，重新实现了编译器和字节码解释器，使得引擎的性能有较大的提升。随后内嵌缓存、基于正则表达式的JIT、简单的JIT及字节码解释器等技术引入进来，JavaScriptCore引擎也在不断的迭代和发展。</p>
<p>V8引擎自诞生之日起就以性能优化作为目标，引入了众多新技术，极大了带动了整个业界JavaScript引擎性能的快速发展。总的来说，V8引擎较为激进，青睐可以提高性能的新技术，而JavaScriptCore引擎较为稳健，渐进式的改变着自己的性能。总的来说JavaScript引擎工作流程（包含v8和JavaScriptCore）如下所示：</p>
<p><img src="http://img.blog.csdn.net/20170711231059978?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>JavaScriptCore 的大致流程为：源代码-→抽象语法树-→字节码-→JIT-→本地代码。</p>
<p>JavaScriptCore与V8有一些不同之处，其中最大的不同就是新增了字节码的中间表示，并加入了多层JIT编译器（如：简单JIT编译器、DFG JIT编译器、LLVM等）优化性能，不停的对本地代码进行优化(在V8 的 5.9 版本中，新增了一个 Ignition 字节码解释器)。</p>
<h2 id="功能扩展"><a href="#功能扩展" class="headerlink" title="功能扩展"></a>功能扩展</h2><p>JavaScript引擎的主要功能是解析和执行JavaScript代码，往往不能满足使用者多样化的需要，那么就可以增加扩展以提升它的能力。V8引擎有两种扩展机制：绑定和扩展。</p>
<h3 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h3><p>使用IDL文件或接口文件生成绑定文件，将这些文件同V8引擎一起编译。WebKit中使用IDL来定义JavaScript，但又与IDL有所不同，有一些改变。定义一个新的接口的步骤大致如下：<br>1.定义新的接口文件，可以在JavaScript代码进行调用，如mymodule.MyObj.myAttr：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">module mymodule &#123;</div><div class="line">    interface [</div><div class="line">            InterfaceName = MyObject</div><div class="line">    ] MyObj &#123; </div><div class="line">        readonly attribute long myAttr;</div><div class="line">        DOMString myMethod (DOMString myArg);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.按照引擎定义的标准接口为基础实现接口类，生成JavaScript引擎所需的绑定文件。WebKit提供了工具帮助生成所需的绑定类，根据引擎不同和引擎开发语言的不同而有所差异。V8引擎会为上述示例代码生成 v8MyObj.h (MyObj类具体的实现代码)和 V8MyObj.cpp (桥接代码，辅组注册桥接的函数到V8引擎)两个绑定文件。</p>
<p>JavaScript引擎绑定机制需要将扩展代码和JavaScript引擎一块编译和打包，不能根据需要在引擎启动后再动态注入这些本地代码。在实际WEB开发中，开发者都是基于现有浏览器的，根本不可能介入到JavaScript引擎的编译中，绑定机制有很大的局限性，但其非常高效，适用于对性能要求较高的场景。</p>
<h3 id="Extension"><a href="#Extension" class="headerlink" title="Extension"></a>Extension</h3><p>通过V8的基类Extension进行能力扩展，无需和V8引擎一起编译，可以动态为引擎增加功能特性，具有很强的灵活性。</p>
<p>Extension机制的大致思路就是，V8提供一个基类Extension和一个全局注册函数，要想扩展JavaScript能力，需要经过以下步骤：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class MYExtension : public v8::Extension &#123;</div><div class="line">    public:</div><div class="line">        MYExtension() : v8::Extension(&quot;v8/My&quot;, &quot;native function my();&quot;) &#123;&#125;</div><div class="line">        virtual v8::Handle&lt;v8::FunctionTemplate&gt; GetNativeFunction (</div><div class="line">        v8::Handle&lt;v8::String&gt; name) &#123;</div><div class="line">            // 可以根据name来返回不同的函数</div><div class="line">            return v8::FunctionTemplate::New(MYExtention::MY);</div><div class="line">        &#125;</div><div class="line">        static v8::Handle&lt;v8::Value&gt; MY(const v8::Arguments&amp; args) &#123;</div><div class="line">            // Do sth here</div><div class="line">            return v8::Undefined();</div><div class="line">        &#125;</div><div class="line">&#125;;</div><div class="line">MYExtension extension;</div><div class="line">RegisterExtension(&amp;extension);</div></pre></td></tr></table></figure>
<p>1.基于Extension基类构建一个它的子类，并实现它的虚函数—GetNativeFunction，根据参数name来决定返回实函数；<br>2.创建一个该子类的对象，并通过注册函数将该对象注册到V8引擎，当JavaScript调用’my’函数时就可被调用到。<br>Extension机制是调用V8的接口注入新函数，动态扩展非常方便，但没有绑定机制高效，适用于对性能要求不高的场景。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>作为一个提高JavaScript渲染的高效引擎，学习V8引擎应该重点掌握以下几个概念：</p>
<ol>
<li><strong>类型</strong>。对于函数，JavaScript是一种动态类型语言，JavaScriptCore和V8都使用隐藏类和内嵌缓存来提高性能，为了保证缓存命中率，一个函数应该使用较少的数据类型；对于数组，应尽量存放相同类型的数据，这样就可以通过偏移位置来访问。</li>
<li><strong>数据表示</strong>。简单类型数据（如整型）直接保存在句柄中，可以减少寻址时间和内存占用，如果可以使用整数表示的，尽量不要用浮点类型。</li>
<li><strong>内存</strong>。虽然JavaScript语言会自己进行垃圾回收，但我们也应尽量做到及时回收不用的内存，对不再使用的对象设置为null或使用delete方法来删除(使用delete方法删除会触发隐藏类新建，需要更多的额外操作)。</li>
<li><strong>优化回滚</strong>。在执行多次之后，不要出现修改对象类型的语句，尽量不要触发优化回滚，否则会大幅度降低代码的性能。<br>新机制。使用JavaScript引擎或者渲染引擎提供的新机制和新接口提高性能。</li>
</ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;V8的前世今生&quot;&gt;&lt;a href=&quot;#V8的前世今生&quot; class=&quot;headerlink&quot; title=&quot;V8的前世今生&quot;&gt;&lt;/a&gt;V8的前世今生&lt;/h1&gt;&lt;p&gt;V8是JavaScript渲染引擎，第一个版本随着Chrome的发布而发布(具体时间为2008年9月
    
    </summary>
    
      <category term="前端" scheme="http://www.xiangzhihong.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://www.xiangzhihong.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>React Native 自定义控件专题</title>
    <link href="http://www.xiangzhihong.com/2017/05/18/React%20Native%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E4%B9%8B%E9%AA%8C%E8%AF%81%E7%A0%81%E5%92%8CToast/"/>
    <id>http://www.xiangzhihong.com/2017/05/18/React Native 自定义控件之验证码和Toast/</id>
    <published>2017-05-17T16:00:00.000Z</published>
    <updated>2017-07-17T06:35:46.457Z</updated>
    
    <content type="html"><![CDATA[<p>React Native通过近两年的迭代和维护，最新版本已经到了0.45.1，关于最新版本的介绍请查看我之前的博客：<a href="http://blog.csdn.net/xiangzhihong8/article/details/72930431" target="_blank" rel="external">0.45新特性</a>。话说回来，尽管迭代的挺快，但还是有很多坑，很多基础的组件和API还是不完善。</p>
<p>今天给大家带来的自定义小专题，其实对于React Native来说，自定义组件的过程更像是Android、iOS的组合控件。大体步骤有如下几个步骤（不完全准确，但是方向大体准确）：<br>1，定义构造函数constructor；<br>2，定义组件属性propTypes；<br>3，绘制界面；<br>4，添加更新界面逻辑等</p>
<h2 id="自定义Toast"><a href="#自定义Toast" class="headerlink" title="自定义Toast"></a>自定义Toast</h2><p>在系统组件中，RN为我们提供了ToastAndroid组件，但是对于iOS好像并没有直接提供，这时候我们就想到了自定义控件了。如下图所示：<br><img src="http://img.blog.csdn.net/20170621213545477?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>我们之前讲过Animated组件，这个组件可以实现渐变，缩放，旋转等动画效果，在这里，我们可以用它来实现Toast的功能。比如，显示两秒后消失，为了对显示的位置进行设置，我们还可以设置显示的位置，所以绘制render的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">        let top;</div><div class="line">        switch (this.props.position)&#123;</div><div class="line">            case &apos;top&apos;:</div><div class="line">                top=160;</div><div class="line">                break;</div><div class="line">            case &apos;center&apos;:</div><div class="line">                top=height /2;</div><div class="line">                break;</div><div class="line">            case &apos;bottom&apos;:</div><div class="line">                top=height - 160;</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        let view = this.state.isShow ?</div><div class="line">            &lt;View</div><div class="line">                style=&#123;[styles.container,&#123;top:top&#125;]&#125;</div><div class="line">                pointerEvents=&quot;none&quot;</div><div class="line">            &gt;</div><div class="line">                &lt;Animated.View</div><div class="line">                    style=&#123;[styles.content,&#123;opacity:this.state.opacityValue&#125;]&#125;</div><div class="line">                &gt;</div><div class="line">                    &lt;Text style=&#123;styles.text&#125;&gt;&#123;this.state.text&#125;&lt;/Text&gt;</div><div class="line">                &lt;/Animated.View&gt;</div><div class="line">            &lt;/View&gt; : null;</div><div class="line">        return view;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>显示时长控制方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">show(text, duration) &#123;</div><div class="line">        if(duration&gt;=DURATION.LENGTH_LONG)&#123;</div><div class="line">            this.duration=DURATION.LENGTH_LONG;</div><div class="line">        &#125;else &#123;</div><div class="line">            this.duration=DURATION.LENGTH_SHORT;</div><div class="line">        &#125;</div><div class="line">        this.setState(&#123;</div><div class="line">            isShow: true,</div><div class="line">            text: text,</div><div class="line">        &#125;);</div><div class="line">        this.isShow=true;</div><div class="line">        this.state.opacityValue.setValue(OPACITY)</div><div class="line">        this.close();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>完整代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Sample React Native App</div><div class="line"> * https://github.com/facebook/react-native</div><div class="line"> * @flow</div><div class="line"> */</div><div class="line"></div><div class="line">import React, &#123;Component,PropTypes&#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">    StyleSheet,</div><div class="line">    View,</div><div class="line">    Animated,</div><div class="line">    Dimensions,</div><div class="line">    Text,</div><div class="line">&#125; from &apos;react-native&apos;</div><div class="line">export const DURATION = &#123;LENGTH_LONG: 2000, LENGTH_SHORT: 500&#125;;</div><div class="line">const &#123;height, width&#125; = Dimensions.get(&apos;window&apos;);</div><div class="line">const OPACITY=0.6;</div><div class="line"></div><div class="line">const dismissKeyboard = require(&apos;dismissKeyboard&apos;)</div><div class="line"></div><div class="line">export default class ToastUtil extends Component &#123;</div><div class="line">    static propTypes = &#123;</div><div class="line">        position: PropTypes.oneOf([</div><div class="line">            &apos;top&apos;,</div><div class="line">            &apos;center&apos;,</div><div class="line">            &apos;bottom&apos;,</div><div class="line">        ]),</div><div class="line">    &#125;</div><div class="line">    static defaultProps = &#123;</div><div class="line">        position:&apos;center&apos;,</div><div class="line">    &#125;</div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">        this.state = &#123;</div><div class="line">            isShow: false,</div><div class="line">            text: &apos;&apos;,</div><div class="line">            opacityValue:new Animated.Value(OPACITY),</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    show(text, duration) &#123;</div><div class="line">        if(duration&gt;=DURATION.LENGTH_LONG)&#123;</div><div class="line">            this.duration=DURATION.LENGTH_LONG;</div><div class="line">        &#125;else &#123;</div><div class="line">            this.duration=DURATION.LENGTH_SHORT;</div><div class="line">        &#125;</div><div class="line">        this.setState(&#123;</div><div class="line">            isShow: true,</div><div class="line">            text: text,</div><div class="line">        &#125;);</div><div class="line">        this.isShow=true;</div><div class="line">        this.state.opacityValue.setValue(OPACITY)</div><div class="line">        this.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    close() &#123;</div><div class="line">        if(!this.isShow)return;</div><div class="line">        this.timer &amp;&amp; clearTimeout(this.timer);</div><div class="line">        this.timer = setTimeout(() =&gt; &#123;</div><div class="line">            Animated.timing(</div><div class="line">                this.state.opacityValue,</div><div class="line">                &#123;</div><div class="line">                    toValue: 0.0,</div><div class="line">                    duration:1000,</div><div class="line">                &#125;</div><div class="line">            ).start(()=&gt;&#123;</div><div class="line">                this.setState(&#123;</div><div class="line">                    isShow: false,</div><div class="line">                &#125;);</div><div class="line">                this.isShow=false;</div><div class="line">            &#125;);</div><div class="line">        &#125;, this.duration);</div><div class="line">    &#125;</div><div class="line">    componentWillUnmount() &#123;</div><div class="line">        this.timer &amp;&amp; clearTimeout(this.timer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        let top;</div><div class="line">        switch (this.props.position)&#123;</div><div class="line">            case &apos;top&apos;:</div><div class="line">                top=160;</div><div class="line">                break;</div><div class="line">            case &apos;center&apos;:</div><div class="line">                top=height /2;</div><div class="line">                break;</div><div class="line">            case &apos;bottom&apos;:</div><div class="line">                top=height - 160;</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        let view = this.state.isShow ?</div><div class="line">            &lt;View</div><div class="line">                style=&#123;[styles.container,&#123;top:top&#125;]&#125;</div><div class="line">                pointerEvents=&quot;none&quot;</div><div class="line">            &gt;</div><div class="line">                &lt;Animated.View</div><div class="line">                    style=&#123;[styles.content,&#123;opacity:this.state.opacityValue&#125;]&#125;</div><div class="line">                &gt;</div><div class="line">                    &lt;Text style=&#123;styles.text&#125;&gt;&#123;this.state.text&#125;&lt;/Text&gt;</div><div class="line">                &lt;/Animated.View&gt;</div><div class="line">            &lt;/View&gt; : null;</div><div class="line">        return view;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        position: &apos;absolute&apos;,</div><div class="line">        left: 0,</div><div class="line">        right: 0,</div><div class="line">        alignItems: &apos;center&apos;,</div><div class="line">    &#125;,</div><div class="line">    content: &#123;</div><div class="line">        backgroundColor: &apos;black&apos;,</div><div class="line">        opacity: OPACITY,</div><div class="line">        borderRadius: 5,</div><div class="line">        padding: 10,</div><div class="line">    &#125;,</div><div class="line">    text:&#123;</div><div class="line">        color:&apos;white&apos;</div><div class="line">    &#125;,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>如何使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Toast ref=&quot;toast&quot;/&gt;</div><div class="line">//省略...</div><div class="line">&lt;Text style=&#123;styles.styleText&#125; onPress=&#123;()=&gt;&#123;</div><div class="line">                   this.refs.toast.show(&apos;你点击了忘记密码!&apos;,3000);&#125;&#125;&gt;</div><div class="line"> 忘记密码？</div><div class="line">&lt;/Text&gt;</div><div class="line">//省略...</div></pre></td></tr></table></figure>
<h2 id="获取验证码"><a href="#获取验证码" class="headerlink" title="获取验证码"></a>获取验证码</h2><p>在很多应用开发中都会涉及到获取手机验证码的场景，例如登录或者注册获取验证码。如下图：<br><img src="http://img.blog.csdn.net/20170621214808809?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><img src="http://img.blog.csdn.net/20170621214751957?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>那么按照自定义组件的流程，先添加构造函数，并定义必须的一些字段(相关属性)，并完成初始化：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">static propTypes = &#123;</div><div class="line">        style: PropTypes.object,//style属性</div><div class="line">        textStyle: Text.propTypes.style,//文本文字</div><div class="line">        onClick: PropTypes.func,//点击事件</div><div class="line">        disableColor: PropTypes.string,//倒计时过程中颜色</div><div class="line">        timerTitle: PropTypes.string,//倒计时文本</div><div class="line">        enable: React.PropTypes.oneOfType([React.PropTypes.bool,React.PropTypes.number])</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>2，构造函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">constructor(props) &#123;</div><div class="line">        super(props)</div><div class="line">        this.state = &#123;</div><div class="line">            timerCount: this.props.timerCount || 60,//默认倒计时时间</div><div class="line">            timerTitle: this.props.timerTitle || &apos;获取验证码&apos;,</div><div class="line">            counting: false,</div><div class="line">            selfEnable: true,</div><div class="line">        &#125;;</div><div class="line">        this.shouldStartCountting = this.shouldStartCountting.bind(this)</div><div class="line">        this.countDownAction = this.countDownAction.bind(this)</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>3，添加绘制界面代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">        const &#123;onClick, style, textStyle, disableColor&#125; = this.props;</div><div class="line">        const &#123;counting, timerTitle, selfEnable&#125; = this.state;</div><div class="line">        return (</div><div class="line">            &lt;TouchableOpacity activeOpacity=&#123;counting ? 1 : 0.8&#125; onPress=&#123;() =&gt; &#123;</div><div class="line">                if (!counting &amp;&amp;selfEnable) &#123;</div><div class="line">                    this.setState(&#123;selfEnable: false&#125;);</div><div class="line">                    this.shouldStartCountting(true);</div><div class="line">                &#125;;</div><div class="line">            &#125;&#125;&gt;</div><div class="line">                &lt;View</div><div class="line">                    style=&#123;styles.styleCodeView&#125;&gt;</div><div class="line">                    &lt;Text</div><div class="line">                        style=&#123;[&#123;fontSize: 12&#125;, textStyle, &#123;color: ((!counting &amp;&amp; selfEnable) ? textStyle.color : disableColor || &apos;gray&apos;)&#125;]&#125;&gt;&#123;timerTitle&#125;&lt;/Text&gt;</div><div class="line">                &lt;/View&gt;</div><div class="line">            &lt;/TouchableOpacity&gt;</div><div class="line">        )</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>4，添加逻辑代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">shouldStartCountting(shouldStart) &#123;</div><div class="line">        if (this.state.counting) &#123;</div><div class="line">            return</div><div class="line">        &#125;</div><div class="line">        if (shouldStart) &#123;</div><div class="line">            this.countDownAction()</div><div class="line">            this.setState(&#123;counting: true, selfEnable: false&#125;)</div><div class="line">        &#125; else &#123;</div><div class="line">            this.setState(&#123;selfEnable: true&#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">//倒计时逻辑</div><div class="line">countDownAction() &#123;</div><div class="line">        const codeTime = this.state.timerCount;</div><div class="line">        this.interval = setInterval(() =&gt; &#123;</div><div class="line">            const timer = this.state.timerCount - 1</div><div class="line">            if (timer === 0) &#123;</div><div class="line">                this.interval &amp;&amp; clearInterval(this.interval);</div><div class="line">                this.setState(&#123;</div><div class="line">                    timerCount: codeTime,</div><div class="line">                    timerTitle: this.props.timerTitle || &apos;获取验证码&apos;,</div><div class="line">                    counting: false,</div><div class="line">                    selfEnable: true</div><div class="line">                &#125;)</div><div class="line">            &#125; else &#123;</div><div class="line">                this.setState(&#123;</div><div class="line">                    timerCount: timer,</div><div class="line">                    timerTitle: `重新获取($&#123;timer&#125;s)`,</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;, 1000)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>说明：<br>shouldStartCountting：回调函数，接受一个Bool类型的参数<br>1，shouldStartCountting(true)，开始倒计时，倒计时结束时自动恢复初始状态<br>2，shouldStartCountting(false)， 按钮的selfEnable会立即被置为true<br>所以，获取验证码的完整代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Sample React Native App</div><div class="line"> * https://github.com/facebook/react-native</div><div class="line"> * @flow</div><div class="line"> */</div><div class="line"></div><div class="line">import React, &#123;Component,PropTypes&#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">    Text,</div><div class="line">    StyleSheet,</div><div class="line">    View,</div><div class="line">    TouchableOpacity,</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line"></div><div class="line">var Dimensions = require(&apos;Dimensions&apos;);</div><div class="line">var screenWidth = Dimensions.get(&apos;window&apos;).width;</div><div class="line"></div><div class="line">export default  class TimerButton extends Component &#123;</div><div class="line"></div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props)</div><div class="line">        this.state = &#123;</div><div class="line">            timerCount: this.props.timerCount || 60,</div><div class="line">            timerTitle: this.props.timerTitle || &apos;获取验证码&apos;,</div><div class="line">            counting: false,</div><div class="line">            selfEnable: true,</div><div class="line">        &#125;;</div><div class="line">        this.shouldStartCountting = this.shouldStartCountting.bind(this)</div><div class="line">        this.countDownAction = this.countDownAction.bind(this)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static propTypes = &#123;</div><div class="line">        style: PropTypes.object,</div><div class="line">        textStyle: Text.propTypes.style,</div><div class="line">        onClick: PropTypes.func,</div><div class="line">        disableColor: PropTypes.string,</div><div class="line">        timerTitle: PropTypes.string,</div><div class="line">        enable: React.PropTypes.oneOfType([React.PropTypes.bool,React.PropTypes.number])</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    countDownAction() &#123;</div><div class="line">        const codeTime = this.state.timerCount;</div><div class="line">        this.interval = setInterval(() =&gt; &#123;</div><div class="line">            const timer = this.state.timerCount - 1</div><div class="line">            if (timer === 0) &#123;</div><div class="line">                this.interval &amp;&amp; clearInterval(this.interval);</div><div class="line">                this.setState(&#123;</div><div class="line">                    timerCount: codeTime,</div><div class="line">                    timerTitle: this.props.timerTitle || &apos;获取验证码&apos;,</div><div class="line">                    counting: false,</div><div class="line">                    selfEnable: true</div><div class="line">                &#125;)</div><div class="line">            &#125; else &#123;</div><div class="line">                this.setState(&#123;</div><div class="line">                    timerCount: timer,</div><div class="line">                    timerTitle: `重新获取($&#123;timer&#125;s)`,</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;, 1000)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    shouldStartCountting(shouldStart) &#123;</div><div class="line">        if (this.state.counting) &#123;</div><div class="line">            return</div><div class="line">        &#125;</div><div class="line">        if (shouldStart) &#123;</div><div class="line">            this.countDownAction()</div><div class="line">            this.setState(&#123;counting: true, selfEnable: false&#125;)</div><div class="line">        &#125; else &#123;</div><div class="line">            this.setState(&#123;selfEnable: true&#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentWillUnmount() &#123;</div><div class="line">        clearInterval(this.interval)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        const &#123;onClick, style, textStyle, disableColor&#125; = this.props;</div><div class="line">        const &#123;counting, timerTitle, selfEnable&#125; = this.state;</div><div class="line">        return (</div><div class="line">            &lt;TouchableOpacity activeOpacity=&#123;counting ? 1 : 0.8&#125; onPress=&#123;() =&gt; &#123;</div><div class="line">                if (!counting &amp;&amp;selfEnable) &#123;</div><div class="line">                    this.setState(&#123;selfEnable: false&#125;);</div><div class="line">                    this.shouldStartCountting(true);</div><div class="line">                &#125;;</div><div class="line">            &#125;&#125;&gt;</div><div class="line">                &lt;View</div><div class="line">                    style=&#123;styles.styleCodeView&#125;&gt;</div><div class="line">                    &lt;Text</div><div class="line">                        style=&#123;[&#123;fontSize: 12&#125;, textStyle, &#123;color: ((!counting &amp;&amp; selfEnable) ? textStyle.color : disableColor || &apos;gray&apos;)&#125;]&#125;&gt;&#123;timerTitle&#125;&lt;/Text&gt;</div><div class="line">                &lt;/View&gt;</div><div class="line">            &lt;/TouchableOpacity&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        flex: 1,</div><div class="line">        marginTop: 20</div><div class="line">    &#125;,</div><div class="line">    styleCodeView: &#123;</div><div class="line">        height: 28,</div><div class="line">        width: screenWidth*0.22,</div><div class="line">        borderColor: &apos;#dc1466&apos;,</div><div class="line">        borderWidth: 1,</div><div class="line">        borderRadius: 5,</div><div class="line">        justifyContent: &apos;center&apos;,</div><div class="line">        alignItems: &apos;center&apos;,</div><div class="line">    &#125;,</div><div class="line">    styleTextCode: &#123;</div><div class="line">        fontSize: 12,</div><div class="line">        color: &apos;#dc1466&apos;,</div><div class="line">        textAlign: &apos;center&apos;,</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import TimerButton from &apos;./TimerButton&apos;</div><div class="line"></div><div class="line">var Dimensions = require(&apos;Dimensions&apos;);</div><div class="line">var screenWidth = Dimensions.get(&apos;window&apos;).width;</div><div class="line"></div><div class="line">//省略...</div><div class="line">&lt;TimerButton</div><div class="line"> style=&#123;&#123;width: screenWidth*0.2,marginRight: 10&#125;&#125;</div><div class="line"> timerCount=&#123;60&#125;</div><div class="line"> textStyle=&#123;&#123;color: &apos;#dc1466&apos;&#125;&#125;</div><div class="line"> onclick=&#123;(start)=&gt;&#123;</div><div class="line"> &#125;&#125;/&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React Native通过近两年的迭代和维护，最新版本已经到了0.45.1，关于最新版本的介绍请查看我之前的博客：&lt;a href=&quot;http://blog.csdn.net/xiangzhihong8/article/details/72930431&quot; target=&quot;_
    
    </summary>
    
      <category term="React Native" scheme="http://www.xiangzhihong.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://www.xiangzhihong.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native动画详解</title>
    <link href="http://www.xiangzhihong.com/2017/04/03/React%20Native%E5%8A%A8%E7%94%BBAnimated%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.xiangzhihong.com/2017/04/03/React Native动画Animated详解/</id>
    <published>2017-04-02T16:00:00.000Z</published>
    <updated>2017-07-17T06:07:35.784Z</updated>
    
    <content type="html"><![CDATA[<p>在移动开发中，动画是提高用户体验不可缺少的一个元素。在React Native中，动画API提供了一些现成的组件：Animated.View，Animated.Text和Animated.Image默认支持动画。动画API会调用iOS或者Android的本地代码来完成这些组件的位移、大小等动画。</p>
<p>在React Native中，Animated创建过程如下：</p>
<ol>
<li>创建Animated.Value，设置初始值，比如一个视图的opacity属性，最开始设置Animated.Value(0),来表示动画的开始时候，视图是全透明的。</li>
<li>AnimatedValue绑定到Style的可动画属性，比如透明度，{opacity: this.state.fadeAnim}</li>
<li>使用Animated.timing来创建自动的动画,或者使用Animated.event来根据手势，触摸，Scroll的动态更新动画的状态</li>
<li>调用Animated.timeing.start()开始动画</li>
</ol>
<h1 id="Animated简介"><a href="#Animated简介" class="headerlink" title="Animated简介"></a>Animated简介</h1><p>大多数情况下，在 React Native 中创建动画是推荐使用 Animated API 的，其提供了三个主要的方法用于创建动画：</p>
<ol>
<li>Animated.timing() – 推动一个值按照一个过渡曲线而随时间变化。Easing 模块定义了很多缓冲曲线函数。</li>
<li>Animated.decay() – 推动一个值以一个初始的速度和一个衰减系数逐渐变为0。</li>
<li>Animated.spring() – 产生一个基于 Rebound 和 Origami 实现的Spring动画。它会在<br>toValue 值更新的同时跟踪当前的速度状态，以确保动画连贯。</li>
</ol>
<p>除了这三个创建动画的方法，对于每个独立的方法都有三种调用该动画的方式：</p>
<ol>
<li>Animated.parallel() –同时开始一个动画数组里的全部动画。默认情况下，如果有任何一个动画停止了，其余的也会被停止。你可以通过stopTogether 选项来改变这个效果。</li>
<li>Animated.sequence() –按顺序执行一个动画数组里的动画，等待一个完成后再执行下一个。如果当前的动画被中止，后面的动画则不会继续执行。</li>
<li>Animated.stagger() – 一个动画数组，里面的动画有可能会同时执行（重叠），不过会以指定的延迟来开始。</li>
</ol>
<h2 id="Animated-timing"><a href="#Animated-timing" class="headerlink" title="Animated.timing()"></a>Animated.timing()</h2><p>使用 Animated.timing 创建的旋转动画。Animated.timing()的基本使用方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Animated.timing(</div><div class="line">  someValue,</div><div class="line">  &#123;</div><div class="line">    toValue: number,</div><div class="line">    duration: number,</div><div class="line">    easing: easingFunction,</div><div class="line">    delay: number</div><div class="line">  &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>Easing 也是用React Native创建动画的载体，它允许我们使用已经定义好的各种缓冲函数，例如：linear, ease, quad, cubic, sin, elastic, bounce, back, bezier, in, out, inout 。由于有直线运动，我们将使用 linear。<br>接下来，需要在构造函数中初始化一个带动画属性的值用于旋转动画的初始值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">constructor () &#123;</div><div class="line">  super()</div><div class="line">  this.spinValue = new Animated.Value(0)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们使用  Animated.Value声明了一个 spinValue 变量，并传了一个 0 作为初始值。然后创建了一个名为 spin 的方法，并在 componentDidMount 中调用它，目的是在 app 加载之后运行动画。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">componentDidMount () &#123;</div><div class="line">  this.spin()</div><div class="line">&#125;</div><div class="line">spin () &#123;</div><div class="line">  this.spinValue.setValue(0)</div><div class="line">  Animated.timing(</div><div class="line">    this.spinValue,</div><div class="line">    &#123;</div><div class="line">      toValue: 1,</div><div class="line">      duration: 4000,</div><div class="line">      easing: Easing.linear</div><div class="line">    &#125;</div><div class="line">  ).start(() =&gt; this.spin())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在方法已经创建好了，接下来就是在UI中渲染动画了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">render () &#123;</div><div class="line">  const spin = this.spinValue.interpolate(&#123;</div><div class="line">    inputRange: [0, 1],</div><div class="line">    outputRange: [&apos;0deg&apos;, &apos;360deg&apos;]</div><div class="line">  &#125;)</div><div class="line">  return (</div><div class="line">    &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">      &lt;Animated.Image</div><div class="line">        style=&#123;&#123;</div><div class="line">          width: 227,</div><div class="line">          height: 200,</div><div class="line">          transform: [&#123;rotate: spin&#125;] &#125;&#125;</div><div class="line">          source=&#123;&#123;uri: &apos;https://s3.amazonaws.com/media-p.slid.es/uploads/alexanderfarennikov/images/1198519/reactjs.png&apos;&#125;&#125;</div><div class="line">      /&gt;</div><div class="line">    &lt;/View&gt;</div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现效果：<br><img src="http://img.blog.csdn.net/20170527180103755?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>完整代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Sample React Native App</div><div class="line"> * https://github.com/facebook/react-native</div><div class="line"> * @flow</div><div class="line"> */</div><div class="line"></div><div class="line">import React, &#123;Component&#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">    AppRegistry,</div><div class="line">    StyleSheet,</div><div class="line">    Text,</div><div class="line">    Animated,</div><div class="line">    TouchableOpacity,</div><div class="line">    Easing,</div><div class="line">    View</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line"></div><div class="line"></div><div class="line">class AnimationRotateScene extends Component &#123;</div><div class="line"></div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">        this.spinValue = new Animated.Value(0)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentDidMount () &#123;</div><div class="line">        this.spin()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    spin () &#123;</div><div class="line">        this.spinValue.setValue(0)</div><div class="line">        Animated.timing(</div><div class="line">            this.spinValue,</div><div class="line">            &#123;</div><div class="line">                toValue: 1,</div><div class="line">                duration: 4000,</div><div class="line">                easing: Easing.linear</div><div class="line">            &#125;</div><div class="line">        ).start(() =&gt; this.spin())</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    render() &#123;</div><div class="line"></div><div class="line">        const</div><div class="line">            spin = this.spinValue.interpolate(&#123;</div><div class="line">                inputRange: [0, 1],</div><div class="line">                outputRange: [&apos;0deg&apos;, &apos;360deg&apos;]</div><div class="line">            &#125;)</div><div class="line"></div><div class="line"></div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line"></div><div class="line">                &lt;Animated.Image</div><div class="line">                    style=&#123;&#123;</div><div class="line">                        width: 227,</div><div class="line">                        height: 200,</div><div class="line">                        transform: [&#123;rotate: spin&#125;] &#125;&#125;</div><div class="line">                    source=&#123;&#123;uri: &apos;https://s3.amazonaws.com/media-p.slid.es/uploads/alexanderfarennikov/images/1198519/reactjs.png&apos;&#125;&#125;</div><div class="line">                /&gt;</div><div class="line">                &lt;TouchableOpacity onPress=&#123;() =&gt; this.spin()&#125; style=&#123;styles.button&#125;&gt;</div><div class="line">                    &lt;Text&gt;启动动画&lt;/Text&gt;</div><div class="line">                &lt;/TouchableOpacity&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        flex: 1,</div><div class="line">        marginTop: 20,</div><div class="line">        justifyContent: &apos;center&apos;,</div><div class="line">        alignItems: &apos;center&apos;,</div><div class="line">    &#125;,</div><div class="line">    button: &#123;</div><div class="line">        marginTop: 20,</div><div class="line">        backgroundColor:&apos;#808080&apos;,</div><div class="line">        height:35,</div><div class="line">        width:140,</div><div class="line">        borderRadius:5,</div><div class="line">        justifyContent: &apos;center&apos;,</div><div class="line">        alignItems: &apos;center&apos;,</div><div class="line">    &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">export default AnimationRotateScene;</div></pre></td></tr></table></figure>
<h2 id="Animated-spring"><a href="#Animated-spring" class="headerlink" title="Animated.spring()"></a>Animated.spring()</h2><p>使用 Animated.spring() 方法创建一个放大缩小的动画。<br><img src="https://camo.githubusercontent.com/f06503bee47f3f4aee6fb9b771da473cabf4bcdc/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f313630302f312a5642464b465564347a6b434a45554c46523071415f672e676966" alt="这里写图片描述"><br>Animated.spring() 方法使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Animated.spring(</div><div class="line">    someValue,</div><div class="line">    &#123;</div><div class="line">      toValue: number,</div><div class="line">      friction: number</div><div class="line">    &#125;</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>如上图所示，我们要使用Animated.spring()创建一个放大缩小的动画效果。<br>在构造函数中，创建一个 springValue 变量，初始化其值为0.3。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">constructor () &#123;</div><div class="line">  super()</div><div class="line">  this.springValue = new Animated.Value(0.3)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，删除 animated 方法和componentDidMount方法，创建一个新的 spring 方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">spring () &#123;</div><div class="line">  this.springValue.setValue(0.3)</div><div class="line">  Animated.spring(</div><div class="line">    this.springValue,</div><div class="line">    &#123;</div><div class="line">      toValue: 1,</div><div class="line">      friction: 1</div><div class="line">    &#125;</div><div class="line">  ).start()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们给View的button添加一个点击事件，出发上面的spring动画。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">  &lt;Text</div><div class="line">    style=&#123;&#123;marginBottom: 100&#125;&#125;</div><div class="line">    onPress=&#123;this.spring.bind(this)&#125;&gt;Spring&lt;/Text&gt;</div><div class="line">    &lt;Animated.Image</div><div class="line">      style=&#123;&#123; width: 227, height: 200, transform: [&#123;scale: this.springValue&#125;] &#125;&#125;</div><div class="line">      source=&#123;&#123;uri: &apos;https://s3.amazonaws.com/media-p.slid.es/uploads/alexanderfarennikov/images/1198519/reactjs.png&apos;&#125;&#125;/&gt;</div><div class="line">&lt;/View&gt;</div></pre></td></tr></table></figure>
<p>完整代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Sample React Native App</div><div class="line"> * https://github.com/facebook/react-native</div><div class="line"> * @flow</div><div class="line"> */</div><div class="line"></div><div class="line">import React, &#123;Component&#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">    AppRegistry,</div><div class="line">    StyleSheet,</div><div class="line">    Text,</div><div class="line">    Animated,</div><div class="line">    TouchableOpacity,</div><div class="line">    Easing,</div><div class="line">    View</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line"></div><div class="line"></div><div class="line">class AnimationRotateScene extends Component &#123;</div><div class="line"></div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">        this.spinValue = new Animated.Value(0)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentDidMount () &#123;</div><div class="line">        this.spin()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    spin () &#123;</div><div class="line">        this.spinValue.setValue(0)</div><div class="line">        Animated.timing(</div><div class="line">            this.spinValue,</div><div class="line">            &#123;</div><div class="line">                toValue: 1,</div><div class="line">                duration: 4000,</div><div class="line">                easing: Easing.linear</div><div class="line">            &#125;</div><div class="line">        ).start(() =&gt; this.spin())</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    render() &#123;</div><div class="line"></div><div class="line">        const</div><div class="line">            spin = this.spinValue.interpolate(&#123;</div><div class="line">                inputRange: [0, 1],</div><div class="line">                outputRange: [&apos;0deg&apos;, &apos;360deg&apos;]</div><div class="line">            &#125;)</div><div class="line"></div><div class="line"></div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line"></div><div class="line">                &lt;Animated.Image</div><div class="line">                    style=&#123;&#123;</div><div class="line">                        width: 227,</div><div class="line">                        height: 200,</div><div class="line">                        transform: [&#123;rotate: spin&#125;] &#125;&#125;</div><div class="line">                    source=&#123;&#123;uri: &apos;https://s3.amazonaws.com/media-p.slid.es/uploads/alexanderfarennikov/images/1198519/reactjs.png&apos;&#125;&#125;</div><div class="line">                /&gt;</div><div class="line">                &lt;TouchableOpacity onPress=&#123;() =&gt; this.spin()&#125; style=&#123;styles.button&#125;&gt;</div><div class="line">                    &lt;Text&gt;启动动画&lt;/Text&gt;</div><div class="line">                &lt;/TouchableOpacity&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        flex: 1,</div><div class="line">        marginTop: 20,</div><div class="line">        justifyContent: &apos;center&apos;,</div><div class="line">        alignItems: &apos;center&apos;,</div><div class="line">    &#125;,</div><div class="line">    button: &#123;</div><div class="line">        marginTop: 20,</div><div class="line">        backgroundColor:&apos;#808080&apos;,</div><div class="line">        height:35,</div><div class="line">        width:140,</div><div class="line">        borderRadius:5,</div><div class="line">        justifyContent: &apos;center&apos;,</div><div class="line">        alignItems: &apos;center&apos;,</div><div class="line">    &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">export default AnimationRotateScene;</div></pre></td></tr></table></figure>
<h2 id="Animated-parallel"><a href="#Animated-parallel" class="headerlink" title="Animated.parallel()"></a>Animated.parallel()</h2><p>Animated.parallel() 会同时开始一个动画数组里的全部动画。parallel()会接受一个动画数组，首先看一下api：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Animated.parallel(arrayOfAnimations)</div><div class="line">// In use:</div><div class="line">Animated.parallel([</div><div class="line">  Animated.spring(</div><div class="line">    animatedValue,</div><div class="line">    &#123;</div><div class="line">      //config options</div><div class="line">    &#125;</div><div class="line">  ),</div><div class="line">  Animated.timing(</div><div class="line">     animatedValue2,</div><div class="line">     &#123;</div><div class="line">       //config options</div><div class="line">     &#125;</div><div class="line">  )</div><div class="line">])</div></pre></td></tr></table></figure>
<p>所以，我们先创建一个动画数组，并初始化。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">constructor () &#123;</div><div class="line">  super()</div><div class="line">  this.animatedValue1 = new Animated.Value(0)</div><div class="line">  this.animatedValue2 = new Animated.Value(0)</div><div class="line">  this.animatedValue3 = new Animated.Value(0)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，创建一个 animate 方法并在 componendDidMount() 中调用它。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">componentDidMount () &#123;</div><div class="line">  this.animate()</div><div class="line">&#125;</div><div class="line">animate () &#123;</div><div class="line">  this.animatedValue1.setValue(0)</div><div class="line">  this.animatedValue2.setValue(0)</div><div class="line">  this.animatedValue3.setValue(0)</div><div class="line">  const createAnimation = function (value, duration, easing, delay = 0) &#123;</div><div class="line">    return Animated.timing(</div><div class="line">      value,</div><div class="line">      &#123;</div><div class="line">        toValue: 1,</div><div class="line">        duration,</div><div class="line">        easing,</div><div class="line">        delay</div><div class="line">      &#125;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">  Animated.parallel([</div><div class="line">    createAnimation(this.animatedValue1, 2000, Easing.ease),</div><div class="line">    createAnimation(this.animatedValue2, 1000, Easing.ease, 1000),</div><div class="line">    createAnimation(this.animatedValue3, 1000, Easing.ease, 2000)        </div><div class="line">  ]).start()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 animate 方法中，我们将三个动画属性值重置为0。此外，还创建了一个 createAnimation 方法，该方法接受四个参数：value, duration, easing, delay(默认值是0)，返回一个新的动画。</p>
<p>然后，调用 Animated.parallel()，并将三个使用 createAnimation 创建的动画作为参数传递给它。在 render 方法中，我们需要设置插值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">render () &#123;</div><div class="line">  const scaleText = this.animatedValue1.interpolate(&#123;</div><div class="line">    inputRange: [0, 1],</div><div class="line">    outputRange: [0.5, 2]</div><div class="line">  &#125;)</div><div class="line">  const spinText = this.animatedValue2.interpolate(&#123;</div><div class="line">    inputRange: [0, 1],</div><div class="line">    outputRange: [&apos;0deg&apos;, &apos;720deg&apos;]</div><div class="line">  &#125;)</div><div class="line">  const introButton = this.animatedValue3.interpolate(&#123;</div><div class="line">    inputRange: [0, 1],</div><div class="line">    outputRange: [-100, 400]</div><div class="line">  &#125;)</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，我们用一个主 View 包裹三个 Animated.Views：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123;[styles.container]&#125;&gt;</div><div class="line">  &lt;Animated.View </div><div class="line">    style=&#123;&#123; transform: [&#123;scale: scaleText&#125;] &#125;&#125;&gt;</div><div class="line">    &lt;Text&gt;Welcome&lt;/Text&gt;</div><div class="line">  &lt;/Animated.View&gt;</div><div class="line">  &lt;Animated.View</div><div class="line">    style=&#123;&#123; marginTop: 20, transform: [&#123;rotate: spinText&#125;] &#125;&#125;&gt;</div><div class="line">    &lt;Text</div><div class="line">      style=&#123;&#123;fontSize: 20&#125;&#125;&gt;</div><div class="line">      to the App!</div><div class="line">    &lt;/Text&gt;</div><div class="line">  &lt;/Animated.View&gt;</div><div class="line">  &lt;Animated.View</div><div class="line">    style=&#123;&#123;top: introButton, position: &apos;absolute&apos;&#125;&#125;&gt;</div><div class="line">    &lt;TouchableHighlight</div><div class="line">      onPress=&#123;this.animate.bind(this)&#125;</div><div class="line">      style=&#123;styles.button&#125;&gt;</div><div class="line">      &lt;Text</div><div class="line">        style=&#123;&#123;color: &apos;white&apos;, fontSize: 20&#125;&#125;&gt;</div><div class="line">        Click Here To Start</div><div class="line">      &lt;/Text&gt;</div><div class="line">   &lt;/TouchableHighlight&gt;</div><div class="line">  &lt;/Animated.View&gt;</div><div class="line">&lt;/View&gt;</div></pre></td></tr></table></figure>
<p>完整的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Sample React Native App</div><div class="line"> * https://github.com/facebook/react-native</div><div class="line"> * @flow 组动画</div><div class="line"> */</div><div class="line"></div><div class="line">import React, &#123;Component&#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">    AppRegistry,</div><div class="line">    StyleSheet,</div><div class="line">    Text,</div><div class="line">    Animated,</div><div class="line">    TouchableOpacity,</div><div class="line">    TouchableHighlight,</div><div class="line">    Easing,</div><div class="line">    View</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line"></div><div class="line"></div><div class="line">class AnimationGroupScene extends Component &#123;</div><div class="line"></div><div class="line">    constructor() &#123;</div><div class="line">        super()</div><div class="line">        this.animatedValue1 = new Animated.Value(0)</div><div class="line">        this.animatedValue2 = new Animated.Value(0)</div><div class="line">        this.animatedValue3 = new Animated.Value(0)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentDidMount() &#123;</div><div class="line">        this.animate()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    animate() &#123;</div><div class="line">        this.animatedValue1.setValue(0)</div><div class="line">        this.animatedValue2.setValue(0)</div><div class="line">        this.animatedValue3.setValue(0)</div><div class="line">        const createAnimation = function (value, duration, easing, delay = 0) &#123;</div><div class="line">            return Animated.timing(</div><div class="line">                value,</div><div class="line">                &#123;</div><div class="line">                    toValue: 1,</div><div class="line">                    duration,</div><div class="line">                    easing,</div><div class="line">                    delay</div><div class="line">                &#125;</div><div class="line">            )</div><div class="line">        &#125;</div><div class="line">        Animated.parallel([</div><div class="line">            createAnimation(this.animatedValue1, 2000, Easing.ease),</div><div class="line">            createAnimation(this.animatedValue2, 1000, Easing.ease, 1000),</div><div class="line">            createAnimation(this.animatedValue3, 1000, Easing.ease, 2000)</div><div class="line">        ]).start()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    startAnimation() &#123;</div><div class="line">        this.state.currentAlpha = this.state.currentAlpha == 1.0 ? 0.0 : 1.0;</div><div class="line">        Animated.timing(</div><div class="line">            this.state.fadeAnim,</div><div class="line">            &#123;toValue: this.state.currentAlpha&#125;</div><div class="line">        ).start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line"></div><div class="line">        const scaleText = this.animatedValue1.interpolate(&#123;</div><div class="line">            inputRange: [0, 1],</div><div class="line">            outputRange: [0.5, 2]</div><div class="line">        &#125;)</div><div class="line">        const spinText = this.animatedValue2.interpolate(&#123;</div><div class="line">            inputRange: [0, 1],</div><div class="line">            outputRange: [&apos;0deg&apos;, &apos;720deg&apos;]</div><div class="line">        &#125;)</div><div class="line">        const introButton = this.animatedValue3.interpolate(&#123;</div><div class="line">            inputRange: [0, 1],</div><div class="line">            outputRange: [-100, 400]</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        return (</div><div class="line">            &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line"></div><div class="line">                &lt;Animated.View</div><div class="line">                    style=&#123;&#123;transform: [&#123;scale: scaleText&#125;]&#125;&#125;&gt;</div><div class="line">                    &lt;Text&gt;Welcome&lt;/Text&gt;</div><div class="line">                &lt;/Animated.View&gt;</div><div class="line">                &lt;Animated.View</div><div class="line">                    style=&#123;&#123;marginTop: 20, transform: [&#123;rotate: spinText&#125;]&#125;&#125;&gt;</div><div class="line">                    &lt;Text</div><div class="line">                        style=&#123;&#123;fontSize: 20&#125;&#125;&gt;</div><div class="line">                        to the App!</div><div class="line">                    &lt;/Text&gt;</div><div class="line">                &lt;/Animated.View&gt;</div><div class="line">                &lt;Animated.View</div><div class="line">                    style=&#123;&#123;top: introButton, position: &apos;absolute&apos;&#125;&#125;&gt;</div><div class="line">                    &lt;TouchableHighlight</div><div class="line">                        onPress=&#123;this.animate.bind(this)&#125;</div><div class="line">                        style=&#123;styles.button&#125;&gt;</div><div class="line">                        &lt;Text&gt;启动组动画&lt;/Text&gt;</div><div class="line">                    &lt;/TouchableHighlight&gt;</div><div class="line">                &lt;/Animated.View&gt;</div><div class="line"></div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        flex: 1,</div><div class="line">        marginTop: 20,</div><div class="line">        justifyContent: &apos;center&apos;,</div><div class="line">        alignItems: &apos;center&apos;,</div><div class="line">    &#125;,</div><div class="line">    button: &#123;</div><div class="line">        marginTop: 20,</div><div class="line">        backgroundColor: &apos;#808080&apos;,</div><div class="line">        height: 35,</div><div class="line">        width: 140,</div><div class="line">        borderRadius: 5,</div><div class="line">        justifyContent: &apos;center&apos;,</div><div class="line">        alignItems: &apos;center&apos;,</div><div class="line">    &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">export default AnimationGroupScene;</div></pre></td></tr></table></figure>
<h2 id="示例使用说明"><a href="#示例使用说明" class="headerlink" title="示例使用说明"></a>示例使用说明</h2><p><img src="http://img.blog.csdn.net/20170527212722688?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20170527212132448?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>如图所示，我对动画的代码做了一个简单的整理，大家在使用的时候直接引入AnimationRoot文件即可。<br>AnimationRoot文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Sample React Native App</div><div class="line"> * https://github.com/facebook/react-native</div><div class="line"> * @flow</div><div class="line"> */</div><div class="line"></div><div class="line">import React, &#123;Component&#125; from &apos;react&apos;;</div><div class="line">import &#123; StackNavigator &#125; from &apos;react-navigation&apos;;</div><div class="line"></div><div class="line"></div><div class="line">import AnimationIndex from &apos;./AnimationIndex&apos;;</div><div class="line">import AnimationSpringScene from &apos;./AnimationSpringScene&apos;;//缩放动画</div><div class="line">import AnimationRotateScene from &apos;./AnimationRotateScene&apos;;//旋转动画</div><div class="line">import AnimationAlphaScene from &apos;./AnimationAlphaScene&apos;;//Alpha动画</div><div class="line">import AnimationGroupScene from &apos;./AnimationGroupScene&apos;;//组动画</div><div class="line">import AnimationFrameScene from &apos;./AnimationFrameScene&apos;;//帧动画</div><div class="line"></div><div class="line"></div><div class="line">const anim = StackNavigator(&#123;</div><div class="line">    AnimationIndex: &#123; screen: AnimationIndex &#125;,</div><div class="line">    AnimationSpringScene: &#123; screen: AnimationSpringScene &#125;,</div><div class="line">    AnimationRotateScene: &#123; screen: AnimationRotateScene &#125;,</div><div class="line">    AnimationAlphaScene: &#123; screen: AnimationAlphaScene &#125;,</div><div class="line">    AnimationGroupScene: &#123; screen: AnimationGroupScene &#125;,</div><div class="line">    AnimationFrameScene: &#123; screen: AnimationFrameScene &#125;,</div><div class="line">&#125;);</div><div class="line">export default anim;</div></pre></td></tr></table></figure>
<p>最后是项目实现的最终结果图，代码地址<a href="http://download.csdn.net/detail/xiangzhihong8/9854457" target="_blank" rel="external">动画源码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在移动开发中，动画是提高用户体验不可缺少的一个元素。在React Native中，动画API提供了一些现成的组件：Animated.View，Animated.Text和Animated.Image默认支持动画。动画API会调用iOS或者Android的本地代码来完成这些组
    
    </summary>
    
      <category term="React Native" scheme="http://www.xiangzhihong.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://www.xiangzhihong.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序尝鲜一个月现状分析</title>
    <link href="http://www.xiangzhihong.com/2017/02/10/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B0%9D%E9%B2%9C%E4%B8%80%E4%B8%AA%E6%9C%88%E7%8E%B0%E7%8A%B6%E5%88%86%E6%9E%90/"/>
    <id>http://www.xiangzhihong.com/2017/02/10/微信小程序尝鲜一个月现状分析/</id>
    <published>2017-02-09T16:00:00.000Z</published>
    <updated>2017-07-09T12:50:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>曾记得在微信小程序还没有上线的时候，大家都是翘首以待，希望在张小龙，在企鹅的带领下，走出区别于原生开发的另一条移动开发的道路，我也是一直关注着，知道1月9号，微信小程序终于对外开放了，作为第一批内测开发者，我也是在第一时间启动了微信小程序的开发。<br>其开发也确实相对简单，不过体验上嘛，可能和原生有一些差距，体验上有点类似于企业的x5渲染的webview。不过因为其高度依赖于微信这个平台，也限制了其开放性，所以我当时在csdn的内部群预言：微信小程序不会完全取代原生app，甚至都不可能威胁到原生app。<br>那么现在一个多月过去了，现状如何呢？</p>
<h1 id="微信小程序现状"><a href="#微信小程序现状" class="headerlink" title="微信小程序现状"></a>微信小程序现状</h1><p>就在过年之前，其实好多之前的微信小程序都悄悄下线了，诸如最早入住微信的ota，在过完年不就都纷纷下线，各种股票交易类的小程序也在证监会的要求下纷纷暂停服务。究其原因，就是其转换率并不高。<br>你是否有这样的困扰：手机里装了几十个甚至上百个App，但平均每天都会用到的数量屈指可数，又或者地图、外卖等同类App不得不装好几个换着用，明知使用频率不高却耗电、占内存就是删不得？也因为有这样的用户痛点，当“微信之父”张小龙对外阐释小程序是一个不需要下载安装就可使用的用完即走应用后一直备受关注。<br>2017微信公开课PRO版上，张小龙也举了两个小程序的场景化例子，一个是在公交站，扫一下站牌的二维码就可以了解下一辆公交车的到站时间；一个是在汽车站，扫一下二维码就可以购买车票而不需要排长队。<br>这样的示例已经说明了微信团队对小程序的定位和理解，明显看出重心是要深入开拓线下的场景运营。现在不管是在地铁、公交站等线下场景，许多广告牌中都已加入了二维码等待被“扫一扫”。但张小龙认为，对企业来说，广告中嵌入二维码，被扫后应该能直接触达企业服务而不是消息订阅。<br>他强调，更多希望小程序的启动来自于扫二维码。并且，小程序坚持去中心化的思路，不会有类似应用商店的分类、排行和推荐等功能，也不能推送消息，不会有订阅关系和粉丝机制。<br>值得注意的是，尽管微信官方反复说明小程序并非应用商店的复刻版，但关于小程序可能冲击原有App体系及应用市场的观点依然存在。原因在于，相比苹果iOS系统下App Store的一统江湖，国内的安卓应用市场因某些原因百花齐放，多个第三方应用商店并存。与此同时，流量分散、用户需求和习惯的变化加上技术变迁，都使得应用市场本身面临转型。<br>就在笔者写这篇散文的时候，谷歌正式推出了“谷歌小程序（Android Instant Apps）”。<br>那么这里要八卦一些了，什么是谷歌小程序（Android Instant Apps）？</p>
<h1 id="谷歌小程序"><a href="#谷歌小程序" class="headerlink" title="谷歌小程序"></a>谷歌小程序</h1><p>大家知道，不管是谷歌小程序还是微信小程序，都是一种轻量级的方法，其目的是：运行Android应用而无需安装、从任意位置访问应用。<br>在去年5月的Google I/O大会上，谷歌用了大约10分钟时间为我们介绍了Android Instant Apps，可理解为安卓“即时应用”，也就是无需安装可直接使用的应用，显然这跟微信推出的小程序非常类似，昨天，谷歌正式上线了一小批应用来测试这项功能。<br>上线的几款支持应用包括了BuzzFeed、Wish、Periscope以及Viki，Android Instant Apps并不是简单的网页浏览形式，通过Android Instant Apps，你其实就是打开了这个App的“简洁版”，经过一些媒体的测试，Android Instant Apps的加载速度也要比同等状况下的网页形式要快。<br>谷歌小程序工作原理：将App模块化了之后，Google Play只会在你点击了链接之后下载所需的那部分功能，这样你就相当于在一个简洁的模式下使用该App。对于开发者来说，他们也不必为此专门再去开发一个独立的App，它使用的还是同样的Android API和同样的源代码，开发者们只需要在原有App的基础上进行一下升级，接入Android Instant Apps的功能就可以了，对于一些开发者们来说，这个过程可能都用不了一天。<br>从这方面来说，由于google的全球影响力，加之在系统级别的多年耕耘，优势相对于微信小程序那可不是一点点。</p>
<h1 id="微信小程序的几大痛点"><a href="#微信小程序的几大痛点" class="headerlink" title="微信小程序的几大痛点"></a>微信小程序的几大痛点</h1><p>随着第一轮玩家激情褪去后的纷纷退场，以及第二批第三批玩家的涌入，为什么小程序的存活时间并不长？这不得不说说微信小程序当前存在的几个问题：</p>
<h2 id="bug较多"><a href="#bug较多" class="headerlink" title="bug较多"></a>bug较多</h2><p>这是不得不说的话题，小程序为了实现在苹果发布十周年推出具有“颠覆”的小程序，其实是带了很多bug上线的，即使到现在，开发人员依然会遇到很多问题。<br>对于人力充足的大公司，有专门的人来参与到小程序的开发维护中;而对于小公司，他们没有足够的人力投入，他们可能一半时间来维护其他平台产品另一半时间来开发小程序，这个时候如果碰到几个小程序的bug，基本上是吃不消的。</p>
<h2 id="产品定位"><a href="#产品定位" class="headerlink" title="产品定位"></a>产品定位</h2><p>举一个简单的例子，比如以内容为主的app，我们常常会向用户推送一些消息来提高点击率，但是在小程序里，这条路是死的。对于“今日头条”推出小程序真心搞不太懂，如此高频使用的产品为什么要放到小程序上，先不说重大新闻你怎么推送，那么对于普通用户的爱好如何进行个性化推荐?大概也是跟风吧。</p>
<h2 id="安全风险"><a href="#安全风险" class="headerlink" title="安全风险"></a>安全风险</h2><p>1月13日，证监会担心金融类小程序涉及客户隐私和安全问题，要求金融类的小程序只能进行产品的展示，不能进行诸如申购、赎回、转换、定投、开户等功能。那这就很蛋疼了，你只能在小程序上看最新的股价、咨询，你要想交易那对不起，你可以另跳链接，我们知道微信不支持外链的，那好吧，我得回到APP上，进行交易。那么问题来了，我APP啥都有了，我还要小程序干嘛，所以，很多基金、证券类的小程序直接停止服务。</p>
<h2 id="开发市场"><a href="#开发市场" class="headerlink" title="开发市场"></a>开发市场</h2><p>在小程序开放之前，微信小程序的群满天飞，首先是ios、android的开发者加入到了小程序开发群中，然后是PM也加入了进来，再到后排搞PHP的也加入了进来。小程序开发成本并不高，把官方文档的代码复制过来基本就能用，所以大家都来一起搞。其结果是其转换率并不高，其市场定位只能成为Android，ios的补充和附属品。</p>
<h1 id="小程序未来怎么走"><a href="#小程序未来怎么走" class="headerlink" title="小程序未来怎么走"></a>小程序未来怎么走</h1><p>独立互联网评论人洪波此前接受《每日经济新闻》记者采访时也认为，小程序毕竟是一个新东西，开发者可能会按照手机应用的流程去做小程序，这可能也是早期避免不了的。但小程序并不是免安装的手机应用，它最适合的场景是有一个明显的触发契机，大家需要对小程序应该怎么做、通过哪些场景触发等有个重新而且深入的思考。<br>虽然在推出当天，各类微信小程序一窝蜂的上线，但从推出后1个月的情况看，或许作为一个新思路的产品，没持续引发疯狂跟风反是个好信号，毕竟不管是对用户还是开发者来说，复制一个App生态体系意义不大，而思路和标准的改变跟产品开发都不能一蹴而就。<br>的确，作为线上的用户来说，小程序的设计似乎是如此不便，但换个角度来看，小程序或许本来就不是为被用户找到而设计的，或者说，致力于“勾连线下”的小程序，本身存在的价值或许是在特定的场景下找到特定的用户。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;曾记得在微信小程序还没有上线的时候，大家都是翘首以待，希望在张小龙，在企鹅的带领下，走出区别于原生开发的另一条移动开发的道路，我也是一直关注
    
    </summary>
    
      <category term="小程序" scheme="http://www.xiangzhihong.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://www.xiangzhihong.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="微信" scheme="http://www.xiangzhihong.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL ES简介</title>
    <link href="http://www.xiangzhihong.com/2017/01/05/OpenGL%20ES%E7%AE%80%E4%BB%8B/"/>
    <id>http://www.xiangzhihong.com/2017/01/05/OpenGL ES简介/</id>
    <published>2017-01-04T16:00:00.000Z</published>
    <updated>2017-07-10T01:22:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在聊Android的View渲染流程中，通常会有一个比较核心的步骤：通过OpeGL ES接口调用GPU接口通知GPU绘制图形。其完整的流程：UI对象—-&gt;CPU处理为多维图形,纹理 —–通过OpeGL ES接口调用GPU—-&gt; GPU对图进行光栅化(Frame Rate ) —-&gt;硬件时钟(Refresh Rate)—-垂直同步—-&gt;投射到屏幕。</p>
<p><img src="http://img.blog.csdn.net/20170317165805869?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>详解的绘制原理，后面会慢慢讲的。</p>
<h2 id="渲染的基础知识"><a href="#渲染的基础知识" class="headerlink" title="渲染的基础知识"></a>渲染的基础知识</h2><p>使用OpenGL ES，一般包括如下几个步骤：</p>
<p>　　（1）EGL初始化<br>　　（2）OpenGL ES初始化<br>　　（3）OpenGL ES设置选项&amp;绘制<br>　　（4）OpenGL ES资源释放（可选）<br>　　（5）EGL资源释放</p>
<p>Android提供的GLSurfaceView和Renderer自动完成了（1）（5）两个部分，这部分只需要开发者做一些简单配置即可。另外（4）这一步是可选的，因为随着EGL中上下文的销毁，openGL ES用到的资源也跟着释放了。因此只有（2）（3）是开发者必须做的。这大大简化了开发过程，但是灵活性也有所降低，利用这两个类是无法完成offscreen render的。要想完成offscreen render其实也很简单，相信大家也都猜到了，只要我们把（1）~（5）都自己完成就可以了。后续部分的代码大部分都是C/C++，少部分是Java。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>EGL的功能是将OpenGL ES API和设备当前的窗口系统粘合在一起，起到了沟通桥梁的作用。不同设备的窗口系统千变万化，但是OpenGL ES提供的API却是统一的，所以EGL需要协调当前设备的窗口系统和OpenGL ES。下面EGL初始化的代码我是用C++写的，然后通过jni调用。Android在Java层面上也提供了对应的Java接口函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line">static EGLConfig eglConf;</div><div class="line">static EGLSurface eglSurface;</div><div class="line">static EGLContext eglCtx;</div><div class="line">static EGLDisplay eglDisp;</div><div class="line"></div><div class="line">JNIEXPORT void JNICALL Java_com_handspeaker_offscreentest_MyGles_init</div><div class="line">(JNIEnv*env,jobject obj)</div><div class="line">&#123;</div><div class="line">    // EGL config attributes</div><div class="line">    const EGLint confAttr[] =</div><div class="line">    &#123;</div><div class="line">            EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT,// very important!</div><div class="line">            EGL_SURFACE_TYPE,EGL_PBUFFER_BIT,//EGL_WINDOW_BIT EGL_PBUFFER_BIT we will create a pixelbuffer surface</div><div class="line">            EGL_RED_SIZE,   8,</div><div class="line">            EGL_GREEN_SIZE, 8,</div><div class="line">            EGL_BLUE_SIZE,  8,</div><div class="line">            EGL_ALPHA_SIZE, 8,// if you need the alpha channel</div><div class="line">            EGL_DEPTH_SIZE, 8,// if you need the depth buffer</div><div class="line">            EGL_STENCIL_SIZE,8,</div><div class="line">            EGL_NONE</div><div class="line">    &#125;;</div><div class="line">    // EGL context attributes</div><div class="line">    const EGLint ctxAttr[] = &#123;</div><div class="line">            EGL_CONTEXT_CLIENT_VERSION, 2,// very important!</div><div class="line">            EGL_NONE</div><div class="line">    &#125;;</div><div class="line">    // surface attributes</div><div class="line">    // the surface size is set to the input frame size</div><div class="line">    const EGLint surfaceAttr[] = &#123;</div><div class="line">             EGL_WIDTH,512,</div><div class="line">             EGL_HEIGHT,512,</div><div class="line">             EGL_NONE</div><div class="line">    &#125;;</div><div class="line">    EGLint eglMajVers, eglMinVers;</div><div class="line">    EGLint numConfigs;</div><div class="line"></div><div class="line">    eglDisp = eglGetDisplay(EGL_DEFAULT_DISPLAY);</div><div class="line">    if(eglDisp == EGL_NO_DISPLAY)</div><div class="line">    &#123;</div><div class="line">        //Unable to open connection to local windowing system</div><div class="line">        LOGI(&quot;Unable to open connection to local windowing system&quot;);</div><div class="line">    &#125;</div><div class="line">    if(!eglInitialize(eglDisp, &amp;eglMajVers, &amp;eglMinVers))</div><div class="line">    &#123;</div><div class="line">        // Unable to initialize EGL. Handle and recover</div><div class="line">        LOGI(&quot;Unable to initialize EGL&quot;);</div><div class="line">    &#125;</div><div class="line">    LOGI(&quot;EGL init with version %d.%d&quot;, eglMajVers, eglMinVers);</div><div class="line">    // choose the first config, i.e. best config</div><div class="line">    if(!eglChooseConfig(eglDisp, confAttr, &amp;eglConf, 1, &amp;numConfigs))</div><div class="line">    &#123;</div><div class="line">        LOGI(&quot;some config is wrong&quot;);</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">        LOGI(&quot;all configs is OK&quot;);</div><div class="line">    &#125;</div><div class="line">    // create a pixelbuffer surface</div><div class="line">    eglSurface = eglCreatePbufferSurface(eglDisp, eglConf, surfaceAttr);</div><div class="line">    if(eglSurface == EGL_NO_SURFACE)</div><div class="line">    &#123;</div><div class="line">        switch(eglGetError())</div><div class="line">        &#123;</div><div class="line">        case EGL_BAD_ALLOC:</div><div class="line">        // Not enough resources available. Handle and recover</div><div class="line">            LOGI(&quot;Not enough resources available&quot;);</div><div class="line">            break;</div><div class="line">        case EGL_BAD_CONFIG:</div><div class="line">        // Verify that provided EGLConfig is valid</div><div class="line">            LOGI(&quot;provided EGLConfig is invalid&quot;);</div><div class="line">            break;</div><div class="line">        case EGL_BAD_PARAMETER:</div><div class="line">        // Verify that the EGL_WIDTH and EGL_HEIGHT are</div><div class="line">        // non-negative values</div><div class="line">            LOGI(&quot;provided EGL_WIDTH and EGL_HEIGHT is invalid&quot;);</div><div class="line">            break;</div><div class="line">        case EGL_BAD_MATCH:</div><div class="line">        // Check window and EGLConfig attributes to determine</div><div class="line">        // compatibility and pbuffer-texture parameters</div><div class="line">            LOGI(&quot;Check window and EGLConfig attributes&quot;);</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    eglCtx = eglCreateContext(eglDisp, eglConf, EGL_NO_CONTEXT, ctxAttr);</div><div class="line">    if(eglCtx == EGL_NO_CONTEXT)</div><div class="line">    &#123;</div><div class="line">        EGLint error = eglGetError();</div><div class="line">        if(error == EGL_BAD_CONFIG)</div><div class="line">        &#123;</div><div class="line">            // Handle error and recover</div><div class="line">            LOGI(&quot;EGL_BAD_CONFIG&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if(!eglMakeCurrent(eglDisp, eglSurface, eglSurface, eglCtx))</div><div class="line">    &#123;</div><div class="line">        LOGI(&quot;MakeCurrent failed&quot;);</div><div class="line">    &#125;</div><div class="line">    LOGI(&quot;initialize success!&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码比较长，不过大部分都是检测当前函数调用是否出错的，核心的函数只有6个，只要它们的调用没有问题即可：</p>
<p>eglGetDisplay(EGL_DEFAULT_DISPLAY)</p>
<p>eglInitialize(eglDisp, &amp;eglMajVers, &amp;eglMinVers)</p>
<p>eglChooseConfig(eglDisp, confAttr, &amp;eglConf, 1, &amp;numConfigs)</p>
<p>eglCreatePbufferSurface(eglDisp, eglConf, surfaceAttr)</p>
<p>eglCreateContext(eglDisp, eglConf, EGL_NO_CONTEXT, ctxAttr)</p>
<p>eglMakeCurrent(eglDisp, eglSurface, eglSurface, eglCtx)</p>
<h3 id="OpenGL-ES初始化"><a href="#OpenGL-ES初始化" class="headerlink" title="OpenGL ES初始化"></a>OpenGL ES初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">JNIEXPORT void JNICALL Java_com_handspeaker_offscreentest_MyGles_draw</div><div class="line">(JNIEnv*env,jobject obj)</div><div class="line">&#123;</div><div class="line">    const char*vertex_shader=vertex_shader_fix;</div><div class="line">    const char*fragment_shader=fragment_shader_simple;</div><div class="line">    glPixelStorei(GL_UNPACK_ALIGNMENT,1);</div><div class="line">    glClearColor(0.0,0.0,0.0,0.0);</div><div class="line">    glEnable(GL_DEPTH_TEST);</div><div class="line">    glDepthFunc(GL_LESS);</div><div class="line">    glCullFace(GL_BACK);</div><div class="line">    glViewport(0,0,512,512);</div><div class="line">    GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);</div><div class="line">    glShaderSource(vertexShader,1,&amp;vertex_shader,NULL);</div><div class="line">    glCompileShader(vertexShader);</div><div class="line">    GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);</div><div class="line">    glShaderSource(fragmentShader,1,&amp;fragment_shader,NULL);</div><div class="line">    glCompileShader(fragmentShader);</div><div class="line">    GLuint program = glCreateProgram();</div><div class="line">    glAttachShader(program, vertexShader);</div><div class="line">    glAttachShader(program, fragmentShader);</div><div class="line">    glLinkProgram(program);</div><div class="line">    glUseProgram(program);</div><div class="line">    GLuint aPositionLocation =glGetAttribLocation(program, &quot;a_Position&quot;);</div><div class="line">    glVertexAttribPointer(aPositionLocation,2,GL_FLOAT,GL_FALSE,0,tableVerticesWithTriangles);</div><div class="line">    glEnableVertexAttribArray(aPositionLocation);</div><div class="line">    //draw something</div><div class="line">    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</div><div class="line">    glDrawArrays(GL_TRIANGLES,0,6);</div><div class="line">    eglSwapBuffers(eglDisp,eglSurface);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="EGL资源释放"><a href="#EGL资源释放" class="headerlink" title="EGL资源释放"></a>EGL资源释放</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">JNIEXPORT void JNICALL Java_com_handspeaker_offscreentest_MyGles_release</div><div class="line">(JNIEnv*env,jobject obj)</div><div class="line">&#123;</div><div class="line">    eglMakeCurrent(eglDisp, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);</div><div class="line">    eglDestroyContext(eglDisp, eglCtx);</div><div class="line">    eglDestroySurface(eglDisp, eglSurface);</div><div class="line">    eglTerminate(eglDisp);</div><div class="line"></div><div class="line">    eglDisp = EGL_NO_DISPLAY;</div><div class="line">    eglSurface = EGL_NO_SURFACE;</div><div class="line">    eglCtx = EGL_NO_CONTEXT;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="OpenGL-ES在Android中的应用"><a href="#OpenGL-ES在Android中的应用" class="headerlink" title="OpenGL ES在Android中的应用"></a>OpenGL ES在Android中的应用</h2><p>为了让你的控件能够显示在界面上，你必须创建一个view作为容器。而要想创建View容器，最直接的方式莫过于从GLSurfaceView和GLSurfaceView.Renderer分别派生一个类，实际的绘图动作都是在GLSurfaceView.Renderer里面发生的。对于一个全屏或近全屏的graphicsview，它是最好的选择。如果只是在某个小部分显示OpenGLES图形则可以考虑TextureView。当然你也可以直接继承自OpenGLES view创建一个View，不过一般都不会这么做。</p>
<h3 id="OpenGL-ES-的Android实例"><a href="#OpenGL-ES-的Android实例" class="headerlink" title="OpenGL ES 的Android实例"></a>OpenGL ES 的Android实例</h3><h4 id="1，在Manifest中声明使用OpenGLES"><a href="#1，在Manifest中声明使用OpenGLES" class="headerlink" title="1，在Manifest中声明使用OpenGLES"></a>1，在Manifest中声明使用OpenGLES</h4><p>为了能使用OpenGLES 2.0 API，你必须在你的manifest中添加以下声明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-feature android:glEsVersion=&quot;0x00020000&quot; android:required=&quot;true&quot; /&gt;</div></pre></td></tr></table></figure>
<p>如果你的应用要使用纹理压缩功能，还必须声明设备需要支持什么样的压缩格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;supports-gl-texture android:name=&quot;GL_OES_compressed_ETC1_RGB8_texture&quot; /&gt;</div><div class="line">&lt;supports-gl-texture android:name=&quot;GL_OES_compressed_paletted_texture&quot; /&gt;</div></pre></td></tr></table></figure>
<h4 id="2-创建一个Activity"><a href="#2-创建一个Activity" class="headerlink" title="2,创建一个Activity"></a>2,创建一个Activity</h4><p>这个Activity和普通的activity一样，不过其使用的布局layout需要使用GLSurfaceView包裹。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;GLSurfaceView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">     ....</div><div class="line">&lt;/GLSurfaceView&gt;</div></pre></td></tr></table></figure>
<p>注:OpenGL ES 2.0需要Android2.2 (API Level 8) 及以上版本。</p>
<h4 id="3，构键GLSurfaceView对象"><a href="#3，构键GLSurfaceView对象" class="headerlink" title="3，构键GLSurfaceView对象"></a>3，构键GLSurfaceView对象</h4><p>GLSurfaceView中其实不需要做太多工作，实际的绘制任务都在GLSurfaceView.Renderer中了。这里我们可以直接使用GLSurfaceView。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class MyGLSurfaceView extends GLSurfaceView &#123;</div><div class="line"></div><div class="line">    public MyGLSurfaceView(Context context)&#123;</div><div class="line">        super(context);</div><div class="line">        //设置Renderer到GLSurfaceView</div><div class="line">        setRenderer(new MyRenderer());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当使用OpenGLES 2.0时，你必须在GLSurfaceView构造器中调用另外一个函数，它说明了你将要使用2.0版的API：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setEGLContextClientVersion(2);</div></pre></td></tr></table></figure>
<p>另一个可以添加的你的GLSurfaceView实现的可选的操作是设置render模式为只在绘制数据发生改变时才绘制view。使用GLSurfaceView.RENDERMODE_WHEN_DIRTY：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);</div></pre></td></tr></table></figure>
<p>####4， 构建一个Renderer类<br>Renderer类主要负责GLSurfaceView的绘制工作，它主要有三个方法：</p>
<ul>
<li>onSurfaceCreated()- 仅调用一次，用于设置view的OpenGLES环境。</li>
<li>onDrawFrame()- 每次View被重绘时被调用。</li>
<li>onSurfaceChanged()- 如果view的几和形状发生变化了就调用，例如当竖屏变为横屏时。</li>
</ul>
<p>如我们要在GLSurfaceView上画了一个灰色的背景。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class MyGL20Renderer implements GLSurfaceView.Renderer &#123;</div><div class="line"></div><div class="line">    public void onSurfaceCreated(GL10 unused, EGLConfig config) &#123;</div><div class="line">        //设置背景的颜色</div><div class="line">        GLES20.glClearColor(0.5f, 0.5f, 0.5f, 1.0f);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void onDrawFrame(GL10 unused) &#123;</div><div class="line">        // 重绘背景色</div><div class="line">        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void onSurfaceChanged(GL10 unused, int width, int height) &#123;</div><div class="line">        GLES20.glViewport(0, 0, width, height);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="OpenGL-ES渲染原理"><a href="#OpenGL-ES渲染原理" class="headerlink" title="OpenGL ES渲染原理"></a>OpenGL ES渲染原理</h1><p>首先来看一个OpenGL ES2.0的渲染原理图。</p>
<p><img src="http://img.blog.csdn.net/20170317205203849?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="1-VBO-VAO"><a href="#1-VBO-VAO" class="headerlink" title="1 VBO/VAO"></a>1 VBO/VAO</h2><p>VBO/VAO是cpu提供给GPU的顶点信息，包括了顶点的位置、颜色、纹理坐标（用于纹理贴图）等顶点信息。<br>VBO，全名Vertex Buffer Object。它是GPU里面的一块缓冲区，当我们需要传递数据的时候，可以先向GPU申请一块内存，然后往里面填充数据。最后，再通过调用glVertexAttribPointer把数据传递给Vertex Shader。<br>VAO，全名为Vertex Array Object，它的作用主要是记录当前有哪些VBO，每个VBO里面绑定的是什么数据，还有每一个vertex attribute绑定的是哪一个VBO。</p>
<h2 id="2-VertexShader（顶点着色器）"><a href="#2-VertexShader（顶点着色器）" class="headerlink" title="2 VertexShader（顶点着色器）"></a>2 VertexShader（顶点着色器）</h2><p>顶点着色器的输入数据由下面组成：</p>
<ul>
<li>Attributes：使用顶点数组封装每个顶点的数据，一般用于每个顶点都各不相同的变量，如顶点位置、颜色等</li>
<li>Uniforms：顶点着色器使用的常量数据，不能被着色器修改，一般用于对同一组顶点组成的单个3D物体中所有顶点都相同的变量，如当前光源的位置。</li>
<li>Samplers：这个是可选的，一种特殊的uniforms，表示顶点着色器使用的纹理。</li>
<li>Shader program：顶点着色器的源码或可执行文件，描述了将对顶点执行的操作。</li>
</ul>
<p>顶点着色器的输出：</p>
<ul>
<li>varying：在图元光栅化阶段，这些varying值为每个生成的片元进行计算，并将结果作为片元着色器的输入数据。从分配给每个顶点的原始varying值来为每个片元生成一个varying值的机制叫做插值。</li>
<li>另外，还有gl_postion、gl_FrontFacing和gl_PointSize。</li>
</ul>
<p>顶点着色器可用于传统的基于顶点的操作，例如：基于矩阵变换位置，进行光照计算来生成每个顶点的颜色，生成或者变换纹理坐标。<br>另外因为顶点着色器是由应用程序指定的，所以你可以用来进行任意自定义的顶点变换。</p>
<h2 id="3-PrimitiveAssembly（图元装配）："><a href="#3-PrimitiveAssembly（图元装配）：" class="headerlink" title="3 PrimitiveAssembly（图元装配）："></a>3 PrimitiveAssembly（图元装配）：</h2><p>顶点着色器下一个阶段是图元装配，这个阶段，把顶点着色器输出的顶点组合成图元。图元（primitive）是一个能用opengl es绘图命令绘制的几何体，包括三角形、直线或者点精灵等几何对象，绘图命令指定了一组顶点属性，描述了图元的几何形状和图元类型。在图元装配阶段，这些着色器处理过的顶点被组装到一个个独立的几何图元中，例如三角形、线、点精灵。对于每个图元，必须确定它是否位于视椎体内(3维空间显示在屏幕上的可见区域)，如果图元部分在视椎体中，需要进行裁剪，如果图元全部在视椎体外，则直接丢弃图元。裁剪之后，顶点位置转换成了屏幕坐标。背面剔除操作也会执行，它根据图元是正面还是背面，如果是背面则丢弃该图元。经过裁剪和背面剔除操作后，就进入渲染流水线的下一个阶段：光栅化。</p>
<h2 id="4-rasterization（光栅化）"><a href="#4-rasterization（光栅化）" class="headerlink" title="4 rasterization（光栅化）"></a>4 rasterization（光栅化）</h2><p><img src="http://img.blog.csdn.net/20170317211006433?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>光栅化是将图元转化为一组二维片段的过程，然后，这些片段由片段着色器处理（片段着色器的输入）。这些二维片段代表着可在屏幕上绘制的像素。用于从分配给每个图元顶点的顶点着色器输出生成每个片段值的机制称作插值（Interpolation）。这句不是人话的话解释了一个问题，就是从cpu提供的分散的顶点信息是如何变成屏幕上密集的像素的，图元装配后顶点可以理解成变为图形，光栅化时可以根据图形的形状，插值出那个图形区域的像素（纹理坐标v_texCoord、颜色等信息）。注意，此时的像素并不是屏幕上的像素，是不带有颜色的。接下来的片段着色器完成上色的工作。总之，光栅化阶段把图元转换成片元集合，之后会提交给片元着色器处理，这些片元集合表示可以被绘制到屏幕的像素。</p>
<h2 id="5-FragmentShader（片段着色器）"><a href="#5-FragmentShader（片段着色器）" class="headerlink" title="5 FragmentShader（片段着色器）"></a>5 FragmentShader（片段着色器）</h2><p><img src="http://img.blog.csdn.net/20170317211119324?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>片段着色器为片段（像素）上的操作实现了通用的可编程方法，光栅化输出的每个片段都执行一遍片段着色器，对光栅化阶段生成每个片段执行这个着色器，生成一个或多个（多重渲染）颜色值作为输出。<br>片元着色器对片元实现了一种通用的可编程方法，它对光栅化阶段产生的每个片元进行操作，需要的输入数据如下：</p>
<ul>
<li>Varying variables：顶点着色器输出的varying变量经过光栅化插值计算后产生的作用于每个片元的值。</li>
<li>Uniforms：片元着色器使用的常量数据</li>
<li>Samplers：一种特殊的uniforms，表示片元着色器使用的纹理。</li>
<li>Shader program：片元着色器的源码或可执行文件，描述了将对片元执行的操作。</li>
</ul>
<p>片元着色器也可以丢弃片元或者为片元生成一个颜色值，保存到内置变量gl_FragColor。光栅化阶段产生的颜色、深度、模板和屏幕坐标(Xw, Yw)成为流水线中pre-fragment阶段(FragmentShader之后)的输入。</p>
<p>##６Per-Fragment Operations(逐个片元操作阶段)</p>
<p><img src="http://img.blog.csdn.net/20170317211329575?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>片元着色器之后就是逐个片元操作阶段，包括一系列的测试阶段。一个光栅化阶段产生的具有屏幕坐标(Xw, Yw)的片元，只能修改framebuffer(帧缓冲)中位置在(Xw, Yw)的像素。</p>
<p>上图显示了Opengl es 2.0逐片元操作过程：</p>
<ul>
<li>Pixel ownership test：像素所有权测试决定framebuffer中某一个(Xw,Yw)位置的像素是否属于当前Opengl ES的context，比如：如果一个Opengl  ES帧缓冲窗口被其他窗口遮住了，窗口系统将决定被遮住的像素不属于当前Opengl ES的context，因此也就不会被显示。</li>
<li>Scissor test：裁剪测试决定位置为(Xw, Yw)的片元是否位于裁剪矩形内，如果不在，则被丢弃。</li>
<li>Stencil and depth tests：模板和深度测试传入片元的模板和深度值，决定是否丢弃片元。</li>
<li>Blending：将新产生的片元颜色值和framebuffer中某个(Xw, Yw)位置存储的颜色值进行混合。</li>
<li>Dithering：抖动可以用来最大限度的减少使用有限精度存储颜色值到framebuffer的工件。</li>
<li>逐片元操作之后，片元要么被丢弃，要么一个片元的颜色，深度或者模板值被写入到framebuffer的(Xw,Yw)位置，不过是否真的会写入还得依赖于write masks启用与否。write masks能更好的控制颜色、深度和模板值写入到合适的缓冲区。例如：颜色缓冲区中的write mask可以被设置成没有红色值写入到颜色缓冲区。另外，Opengl ES 2.0提framebuffer中获取像素的接口，不过需要记住的是像素只能从颜色缓冲区读回，深度和模板值不能读回。</li>
</ul>
<p>参考：<br>OpenGL渲染流程 <a href="http://www.cnblogs.com/BigFeng/p/5068715.html" target="_blank" rel="external">http://www.cnblogs.com/BigFeng/p/5068715.html</a><br>OpenGL ES 2.0渲染管线 <a href="http://codingnow.cn/opengles/1504.html" target="_blank" rel="external">http://codingnow.cn/opengles/1504.html</a><br>OpenGL ES 2.0可编程管道 <a href="http://www.cnblogs.com/listenheart/p/3292672.html" target="_blank" rel="external">http://www.cnblogs.com/listenheart/p/3292672.html</a><br>OpenGL ES 2.0编程基础 <a href="http://blog.csdn.net/iispring/article/details/7649628" target="_blank" rel="external">http://blog.csdn.net/iispring/article/details/7649628</a><br>OpenGL-渲染管线的流程 <a href="http://www.cnblogs.com/zhanglitong/p/3238989.html" target="_blank" rel="external">http://www.cnblogs.com/zhanglitong/p/3238989.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;在聊Android的View渲染流程中，通常会有一个比较核心的步骤：通过OpeGL ES接口调用GPU接口通知GPU绘制图形。其完整的流程：
    
    </summary>
    
      <category term="Android" scheme="http://www.xiangzhihong.com/categories/Android/"/>
    
    
      <category term="OpenGL" scheme="http://www.xiangzhihong.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>React Native打包</title>
    <link href="http://www.xiangzhihong.com/2017/01/03/React%20Native%E6%89%93%E5%8C%85/"/>
    <id>http://www.xiangzhihong.com/2017/01/03/React Native打包/</id>
    <published>2017-01-02T16:00:00.000Z</published>
    <updated>2017-07-10T01:25:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>前面写了关于React的一系列入门章：<a href="http://lib.csdn.net/xiangzhihong8/5375/chart/React%20Native" target="_blank" rel="external">http://lib.csdn.net/xiangzhihong8/5375/chart/React%20Native</a><br><img src="http://img.blog.csdn.net/20170227142756287?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>欢迎大家吐槽，今天要说的是在Android和iOS两个平台如何打包的问题。</p>
<h1 id="Android平台打包"><a href="#Android平台打包" class="headerlink" title="Android平台打包"></a>Android平台打包</h1><p>Android平台有两种发布方式：一种是借助于命令行操作，另外一种是借助于Android Studio进行发布。</p>
<h2 id="Android-Studio平台发布"><a href="#Android-Studio平台发布" class="headerlink" title="Android Studio平台发布"></a>Android Studio平台发布</h2><p>借助于Android Studio生成签名keystore，然后生成签名包，这和传统的Native开发一样。</p>
<p><img src="http://img.blog.csdn.net/20170227143230527?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>此时，你会发现，你可以继续生成一个apk，并且可以安装，但是却无法运行，发生闪退。这是因为React-Native的android平台下默认没有生成资源文件也就是我们所有的js图片文件等等。</p>
<p>下面我们就来生成JS Bundle文件：</p>
<h3 id="1，创建一个assets文件"><a href="#1，创建一个assets文件" class="headerlink" title="1，创建一个assets文件"></a>1，创建一个assets文件</h3><p>创建一个assets文件在工程目录下，可以通过命令行操作，也可手动，具体的命名是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p Android/app/src/main/assets</div></pre></td></tr></table></figure>
<h3 id="2，生成Bundle文件"><a href="#2，生成Bundle文件" class="headerlink" title="2，生成Bundle文件"></a>2，生成Bundle文件</h3><p>生成Bundle文件的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">React-native bundle --platform android --dev false --entry-file index.android.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20170227144340622?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>我们已经完全生成了bundle文件了，可以查看自己工程assets下的文件夹，如果生成，则再次签名运行就没有问题。</p>
<h2 id="命令行发布版本"><a href="#命令行发布版本" class="headerlink" title="命令行发布版本"></a>命令行发布版本</h2><h3 id="生成签名文件"><a href="#生成签名文件" class="headerlink" title="生成签名文件"></a>生成签名文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000</div></pre></td></tr></table></figure>
<h3 id="修改android-gradle-properties文件"><a href="#修改android-gradle-properties文件" class="headerlink" title="修改android/gradle.properties文件"></a>修改android/gradle.properties文件</h3><p>编辑gradle文件，如果没有就创建一个。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MYAPP_RELEASE_STORE_FILE=my-release-key.keystore</div><div class="line">MYAPP_RELEASE_KEY_ALIAS=my-key-alias</div><div class="line">MYAPP_RELEASE_STORE_PASSWORD=*****</div><div class="line">MYAPP_RELEASE_KEY_PASSWORD=*****</div></pre></td></tr></table></figure>
<h3 id="修改签名gradle配置文件"><a href="#修改签名gradle配置文件" class="headerlink" title="修改签名gradle配置文件"></a>修改签名gradle配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">    defaultConfig &#123; ... &#125;</div><div class="line">    signingConfigs &#123;</div><div class="line">        release &#123;</div><div class="line">            storeFile file(MYAPP_RELEASE_STORE_FILE)</div><div class="line">            storePassword MYAPP_RELEASE_STORE_PASSWORD</div><div class="line">            keyAlias MYAPP_RELEASE_KEY_ALIAS</div><div class="line">            keyPassword MYAPP_RELEASE_KEY_PASSWORD</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            ...</div><div class="line">            signingConfig signingConfigs.release</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="生成签名APK包"><a href="#生成签名APK包" class="headerlink" title="生成签名APK包"></a>生成签名APK包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew assembleRelease</div></pre></td></tr></table></figure>
<p>完成之后便会在android/app/build/outputs/apk/app-release.apk生成可安装包。</p>
<h1 id="IOS平台打包"><a href="#IOS平台打包" class="headerlink" title="IOS平台打包"></a>IOS平台打包</h1><p>相对于Android平台来讲，IOS平台的发布操作相对简单，只需要简单配置即可。</p>
<p>选择Product ⇒ Archive。</p>
<p><img src="http://img.blog.csdn.net/20170227145214049?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>等待系统打包，打包出来的即使ipa文件</p>
<p><img src="http://img.blog.csdn.net/20170227145259024?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>附：<a href="http://www.jianshu.com/p/32a99c273be1" target="_blank" rel="external">http://www.jianshu.com/p/32a99c273be1</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面写了关于React的一系列入门章：&lt;a href=&quot;http://lib.csdn.net/xiangzhihong8/5375/chart/React%20Native&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://lib.csdn.n
    
    </summary>
    
      <category term="React Native" scheme="http://www.xiangzhihong.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://www.xiangzhihong.com/tags/React-Native/"/>
    
      <category term="打包" scheme="http://www.xiangzhihong.com/tags/%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>ios动画</title>
    <link href="http://www.xiangzhihong.com/2016/12/28/ios%E5%8A%A8%E7%94%BB%E6%80%BB%E7%BB%93/"/>
    <id>http://www.xiangzhihong.com/2016/12/28/ios动画总结/</id>
    <published>2016-12-27T16:00:00.000Z</published>
    <updated>2017-07-17T06:24:42.060Z</updated>
    
    <content type="html"><![CDATA[<p>在iOS开发中，动画是提高用户体验重要的环节之一。一个设计严谨、精细的动画效果能给用户耳目一新的效果，这对于app而言是非常重要的。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>iOS动画主要是指Core Animation框架。官方使用文档地址为：Core Animation Guide。Core Animation是iOS和macOS平台上负责图形渲染与动画的基础框架。Core Animation可以作用与动画视图或者其他可视元素，为你完成了动画所需的大部分绘帧工作。你只需要配置少量的动画参数（如开始点的位置和结束点的位置）即可使用Core Animation的动画效果。Core Animation将大部分实际的绘图任务交给了图形硬件来处理，图形硬件会加速图形渲染的速度。这种自动化的图形加速技术让动画拥有更高的帧率并且显示效果更加平滑，不会加重CPU的负担而影响程序的运行速度。</p>
<h2 id="Core-Animation"><a href="#Core-Animation" class="headerlink" title="Core Animation"></a>Core Animation</h2><p>Core Animation是一组非常强大的动画处理API，它的子类主要有4个：CABasicAnimation、CAKeyframeAnimation、CATransition、CAAnimationGroup。<br>Core Animation类的继承关系图：<br><img src="http://img.blog.csdn.net/20170525215910865?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p><font color="#DC143C">duration：</font>动画的持续时间</p>
<p><font color="#DC143C">beginTime：</font>动画的开始时间</p>
<p><font color="#DC143C">repeatCount：</font>动画的重复次数</p>
<p><font color="#DC143C">autoreverses：</font>动画按照原动画返回执行</p>
<p><font color="#DC143C">timingFunction：</font>控制动画的显示节奏系统提供五种值选择，分别是：</p>
<ul>
<li>kCAMediaTimingFunctionLinear 线性动画</li>
<li>kCAMediaTimingFunctionEaseIn 先快后慢</li>
<li>kCAMediaTimingFunctionEaseOut 先慢后快</li>
<li>kCAMediaTimingFunctionEaseInEaseOut 先慢后快再慢</li>
<li>kCAMediaTimingFunctionDefault 默认，也属于中间比较快</li>
</ul>
<p><font color="#DC143C">delegate：</font>动画代理。能够检测动画的执行和结束。</p>
<p><font color="#DC143C">path：</font>帧动画中的执行路径</p>
<p><font color="#DC143C">type：</font>过渡动画的动画类型。主要有以下4中类型：</p>
<ul>
<li>kCATransitionFade 渐变效果</li>
<li>kCATransitionMoveIn 进入覆盖效果</li>
<li>kCATransitionPush 推出效果</li>
<li>kCATransitionReveal 离开效果</li>
</ul>
<p><font color="#DC143C">subtype：</font>过渡动画的动画方向。</p>
<ul>
<li>kCATransitionFromRight 从右侧进入</li>
<li>kCATransitionFromLeft 从左侧进入</li>
<li>kCATransitionFromTop 从顶部进入</li>
<li>kCATransitionFromBottom 从底部进入</li>
</ul>
<h1 id="动画的使用"><a href="#动画的使用" class="headerlink" title="动画的使用"></a>动画的使用</h1><p>动画使用步骤：</p>
<ol>
<li>初始化一个动画对象(CAAnimation)并设置一些动画相关属性.</li>
<li>添加动画对象到层(CALayer)中,开始执行动画.</li>
</ol>
<p>CALayer中很多属性都可以通过CAAnimation实现动画效果, 包括opacity, position, transform, bounds, contents等，具体可以在API文档中查找</p>
<p>通过调用CALayer的addAnimation:forKey:增加动画到层(CALayer)中,这样就能触发动画了.通过调用removeAnimationForKey:可以停止层中的动画.</p>
<h3 id="UIView"><a href="#UIView" class="headerlink" title="UIView"></a>UIView</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">_demoView.frame = CGRectMake(0, SCREEN_HEIGHT/2-50, 50, 50);</div><div class="line">[UIView animateWithDuration:1.0f animations:^&#123;</div><div class="line">_demoView.frame = CGRectMake(SCREEN_WIDTH, SCREEN_HEIGHT/2-50, 50, 50);</div><div class="line">&#125; completion:^(BOOL finished) &#123;</div><div class="line">_demoView.frame = CGRectMake(SCREEN_WIDTH/2-25, SCREEN_HEIGHT/2-50, 50, 50);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="UIView-begin-commit"><a href="#UIView-begin-commit" class="headerlink" title="UIView [begin commit]"></a>UIView [begin commit]</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">_demoView.frame = CGRectMake(0, SCREEN_HEIGHT/2-50, 50, 50);</div><div class="line">[UIView beginAnimations:nil context:nil];</div><div class="line">[UIView setAnimationDuration:1.0f];</div><div class="line">_demoView.frame = CGRectMake(SCREEN_WIDTH, SCREEN_HEIGHT/2-50, 50, 50);</div><div class="line">[UIView commitAnimations];</div></pre></td></tr></table></figure>
<h3 id="Core-Animation-1"><a href="#Core-Animation-1" class="headerlink" title="Core Animation"></a>Core Animation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CABasicAnimation *anima = [CABasicAnimation animationWithKeyPath:@&quot;position&quot;];</div><div class="line">anima.fromValue = [NSValue valueWithCGPoint:CGPointMake(0, SCREEN_HEIGHT/2-75)];</div><div class="line">anima.toValue = [NSValue valueWithCGPoint:CGPointMake(SCREEN_WIDTH, SCREEN_HEIGHT/2-75)];</div><div class="line">anima.duration = 1.0f;</div><div class="line">[_demoView.layer addAnimation:anima forKey:@&quot;positionAnimation&quot;];</div></pre></td></tr></table></figure>
<h1 id="动画详解"><a href="#动画详解" class="headerlink" title="动画详解"></a>动画详解</h1><h2 id="CABaseAnimation"><a href="#CABaseAnimation" class="headerlink" title="CABaseAnimation"></a>CABaseAnimation</h2><p>基础动画主要提供了对于CALayer对象中的可变属性进行简单动画的操作。比如：位移、透明度、缩放、旋转、背景色等等。<br>主要提供如下属性：</p>
<p><font color="#DC143C">fromValue：</font>keyPath对应的初始值</p>
<p><font color="#DC143C">toValue：</font>keyPath对应的结束值<br>示例：<br><img src="http://img.blog.csdn.net/20170526082556756?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"> 1.呼吸动画</div><div class="line">    CABasicAnimation *animation =[CABasicAnimation animationWithKeyPath:@&quot;opacity&quot;];</div><div class="line">    animation.fromValue = [NSNumber numberWithFloat:1.0f];</div><div class="line">    animation.toValue = [NSNumber numberWithFloat:0.0f];</div><div class="line">    animation.autoreverses = YES;    //回退动画（动画可逆，即循环）</div><div class="line">    animation.duration = 1.0f;</div><div class="line">    animation.repeatCount = MAXFLOAT;</div><div class="line">    animation.removedOnCompletion = NO;</div><div class="line">    animation.fillMode = kCAFillModeForwards;//removedOnCompletion,fillMode配合使用保持动画完成效果</div><div class="line">    animation.timingFunction=[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn];</div><div class="line">    [self.alphaTagButton.layer addAnimation:animation forKey:@&quot;aAlpha&quot;];  </div><div class="line"></div><div class="line">2.摇摆动画</div><div class="line">    //设置旋转原点</div><div class="line">    self.sharkTagButton.layer.anchorPoint = CGPointMake(0.5, 0);</div><div class="line">    CABasicAnimation* rotationAnimation = [CABasicAnimation animationWithKeyPath:@&quot;transform.rotation.z&quot;];</div><div class="line">    //角度转弧度（这里用1，-1简单处理一下）</div><div class="line">    rotationAnimation.toValue = [NSNumber numberWithFloat:1];</div><div class="line">    rotationAnimation.fromValue = [NSNumber numberWithFloat:-1];</div><div class="line">    rotationAnimation.duration = 1.0f;</div><div class="line">    rotationAnimation.repeatCount = MAXFLOAT;</div><div class="line">    rotationAnimation.removedOnCompletion = NO;</div><div class="line">    rotationAnimation.autoreverses = YES;</div><div class="line">    rotationAnimation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div><div class="line">    rotationAnimation.fillMode = kCAFillModeForwards;</div><div class="line">    [self.sharkTagButton.layer addAnimation:rotationAnimation forKey:@&quot;revItUpAnimation&quot;];</div></pre></td></tr></table></figure>
<p>注意：<br>如果fillMode=kCAFillModeForwards和removedOnComletion=NO，那么在动画执行完毕后，图层会保持显示动画执行后的状态。但在实质上，图层的属性值还是动画执行前的初始值，并没有真正被改变。这就相当于Android早期的View动画。</p>
<h2 id="CAKeyframeAnimation"><a href="#CAKeyframeAnimation" class="headerlink" title="CAKeyframeAnimation"></a>CAKeyframeAnimation</h2><p>CAKeyframeAnimation和CABaseAnimation都属于CAPropertyAnimatin的子类。CABaseAnimation只能从一个数值（fromValue）变换成另一个数值（toValue）,而CAKeyframeAnimation则会使用一个NSArray保存一组关键帧。</p>
<p>主要属性：</p>
<p><font color="#DC143C">values：</font>就是上述的NSArray对象。里面的元素称为”关键帧”(keyframe)。动画对象会在指定的时间(duration)内，依次显示values数组中的每一个关键帧</p>
<p><font color="#DC143C">path：</font>可以设置一个CGPathRef\CGMutablePathRef,让层跟着路径移动。path只对CALayer的anchorPoint和position起作用。如果你设置了path，那么values将被忽略。</p>
<p><font color="#DC143C">keyTimes：</font>可以为对应的关键帧指定对应的时间点,其取值范围为0到1.0,keyTimes中的每一个时间值都对应values中的每一帧.当keyTimes没有设置的时候,各个关键帧的时间是平分的。<br>示例：<br><img src="http://img.blog.csdn.net/20170526083129200?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>values属性应用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">-(void)setUpCAKeyframeAnimationUseValues</div><div class="line">&#123;</div><div class="line"></div><div class="line">    CAKeyframeAnimation *animation = [CAKeyframeAnimation animation];</div><div class="line"></div><div class="line">    animation.keyPath = @&quot;position&quot;;</div><div class="line"></div><div class="line">    NSValue *value1 = [NSValue valueWithCGPoint:CGPointMake(50, 50)];</div><div class="line"></div><div class="line">    NSValue *value2 = [NSValue valueWithCGPoint:CGPointMake(kWindowWidth - 50, 50)];</div><div class="line"></div><div class="line">    NSValue *value3 = [NSValue valueWithCGPoint:CGPointMake(kWindowWidth - 50, kWindowHeight-50)];</div><div class="line"></div><div class="line">    NSValue *value4 = [NSValue valueWithCGPoint:CGPointMake(50, kWindowHeight-50)];</div><div class="line"></div><div class="line">    NSValue *value5 = [NSValue valueWithCGPoint:CGPointMake(50, 50)];</div><div class="line"></div><div class="line">    animation.values = @[value1,value2,value3,value4,value5];</div><div class="line">    animation.repeatCount = MAXFLOAT;</div><div class="line"></div><div class="line">    animation.removedOnCompletion = NO;</div><div class="line"></div><div class="line">    animation.fillMode = kCAFillModeForwards;</div><div class="line"></div><div class="line">    animation.duration = 6.0f;</div><div class="line"></div><div class="line">    animation.timingFunction=[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div><div class="line"></div><div class="line">    [self.keyButton.layer addAnimation:animation forKey:@&quot;values&quot;];</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>path方式应用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">-(void)setUpCAKeyframeAnimationUsePath</div><div class="line">&#123;</div><div class="line">    CAKeyframeAnimation *animation = [CAKeyframeAnimation animation];</div><div class="line"></div><div class="line">    animation.keyPath = @&quot;position&quot;;</div><div class="line"></div><div class="line">    CGMutablePathRef path = CGPathCreateMutable();</div><div class="line"></div><div class="line">    //矩形线路</div><div class="line">    CGPathAddRect(path, NULL, CGRectMake(50,50, kWindowWidth - 100,kWindowHeight - 100));</div><div class="line"></div><div class="line">    animation.path=path;</div><div class="line"></div><div class="line">    CGPathRelease(path);</div><div class="line"></div><div class="line">    animation.repeatCount = MAXFLOAT;</div><div class="line"></div><div class="line">    animation.removedOnCompletion = NO;</div><div class="line"></div><div class="line">    animation.fillMode = kCAFillModeForwards;</div><div class="line"></div><div class="line">    animation.duration = 10.0f;</div><div class="line"></div><div class="line">    animation.timingFunction=[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div><div class="line"></div><div class="line">    [self.keyButton.layer addAnimation:animation forKey:@&quot;path&quot;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>keyTimes属性使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">-(void)setUpCAKeyframeAnimationUsekeyTimes</div><div class="line">&#123;</div><div class="line"></div><div class="line">    CAKeyframeAnimation *animation = [CAKeyframeAnimation animation];</div><div class="line"></div><div class="line">    animation.keyPath = @&quot;position.x&quot;;</div><div class="line">    animation.values = @[@0, @20, @-20, @20, @0];</div><div class="line">    animation.keyTimes = @[ @0, @(1 / 6.0), @(3 / 6.0), @(5 / 6.0), @1 ];</div><div class="line">    animation.duration = 0.5;</div><div class="line">    animation.additive = YES;</div><div class="line">    [self.sharkTagButton.layer addAnimation:animation forKey:@&quot;keyTimes&quot;];</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="CAAnimationGroup"><a href="#CAAnimationGroup" class="headerlink" title="CAAnimationGroup"></a>CAAnimationGroup</h2><p>CAAnimationGroup(组动画)是CAAnimation的子类，可以保存一组动画对象，将CAAnimationGroup对象加入层后，组中所有动画对象可以同时并发运行。有点类似于Android的帧动画，不过这里的组动画是将一些基础的动画拼接而成的，比如同时缩小、旋转、渐变。</p>
<p>主要属性有：</p>
<p><font color="#DC143C">animations：</font>用来保存一组动画对象的NSArray。<br>示例：<br><img src="http://img.blog.csdn.net/20170526090628858?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">CABasicAnimation * animationScale = [CABasicAnimation animation];</div><div class="line">    animationScale.keyPath = @&quot;transform.scale&quot;;</div><div class="line">    animationScale.toValue = @(0.1);</div><div class="line"></div><div class="line">    CABasicAnimation *animationRota = [CABasicAnimation animation];</div><div class="line">    animationRota.keyPath = @&quot;transform.rotation&quot;;</div><div class="line">    animationRota.toValue = @(M_PI_2);</div><div class="line"></div><div class="line">    CAAnimationGroup * group = [[CAAnimationGroup alloc] init];</div><div class="line">    group.duration = 3.0;</div><div class="line">    group.fillMode = kCAFillModeForwards;</div><div class="line">    group.removedOnCompletion = NO;</div><div class="line">    group.repeatCount = MAXFLOAT;</div><div class="line"></div><div class="line">    group.animations = @[animationScale,animationRota];</div><div class="line">    [self.groupButton.layer addAnimation:group forKey:nil];</div></pre></td></tr></table></figure>
<h2 id="CATransition"><a href="#CATransition" class="headerlink" title="CATransition"></a>CATransition</h2><p>CAAnimation的子类，用于做过渡动画或者转场动画，能够为层提供移出屏幕和移入屏幕的动画效果。<br>重要属性有：</p>
<p><font color="#DC143C">type：</font>动画过渡类型，官方提供了如下类型：</p>
<ul>
<li>kCATransitionFade 渐变效果</li>
<li>kCATransitionMoveIn 进入覆盖效果</li>
<li>kCATransitionPush 推出效果</li>
<li>kCATransitionReveal 揭露离开效果</li>
</ul>
<p><font color="#DC143C">subtype：</font>动画过渡方向。</p>
<ul>
<li>kCATransitionFromRight 从右侧进入</li>
<li>kCATransitionFromLeft 从左侧进入</li>
<li>kCATransitionFromTop 从顶部进入</li>
<li>kCATransitionFromBottom 从底部进入</li>
<li>startProgress：动画起点(在整体动画的百分比)</li>
<li>endProgress：动画终点(在整体动画的百分比)</li>
</ul>
<p><img src="http://img.blog.csdn.net/20170526091031364?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">MyViewController *myVC = [[MyViewController alloc]init];</div><div class="line"> CATransition *animation = [CATransition animation];</div><div class="line"> animation.timingFunction = UIViewAnimationCurveEaseInOut;</div><div class="line"> animation.type = @&quot;cube&quot;;</div><div class="line"> animation.duration =0.5f;</div><div class="line"> animation.subtype =kCATransitionFromRight;</div><div class="line"> //控制器间跳转动画</div><div class="line"> [[UIApplication sharedApplication].keyWindow.layer addAnimation:animation forKey:nil];</div><div class="line">[self presentViewController:myVC animated:NO completion:nil];</div></pre></td></tr></table></figure>
<p>附：<a href="http://www.jianshu.com/p/a098f6e3617f" target="_blank" rel="external">http://www.jianshu.com/p/a098f6e3617f</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在iOS开发中，动画是提高用户体验重要的环节之一。一个设计严谨、精细的动画效果能给用户耳目一新的效果，这对于app而言是非常重要的。&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1
    
    </summary>
    
      <category term="ios" scheme="http://www.xiangzhihong.com/categories/ios/"/>
    
    
      <category term="ios" scheme="http://www.xiangzhihong.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>React Native之轻量级存储AsyncStorage</title>
    <link href="http://www.xiangzhihong.com/2016/12/25/React%20Native%E4%B9%8B%E8%BD%BB%E9%87%8F%E7%BA%A7%E5%AD%98%E5%82%A8AsyncStorage/"/>
    <id>http://www.xiangzhihong.com/2016/12/25/React Native之轻量级存储AsyncStorage/</id>
    <published>2016-12-24T16:00:00.000Z</published>
    <updated>2017-07-17T06:11:11.886Z</updated>
    
    <content type="html"><![CDATA[<p>AsyncStorage是一个简单的、异步的、持久化的以键值对形式进行数据存储的存储系统，对于App来说是全局性的。它的作用等价于iOS的NSUserDefaluts或Android的SharedPreferences，使用AsyncStorage用来替换老旧的LocalStorage。</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>它有很多方法，每一个方法都有回调函数，第一个参数是错误对象，错了就是展示错误信息，否则为null。都会返回一个Promise对象。</p>
<ul>
<li>static getItem(key:string , callback:(error,result)):<br>根据键来获取值，获取的结果会在回调函数中。</li>
<li>static setItem(key:string , value:string , callback:(error)): 设置键值对。</li>
<li>static removeItem(key:string , callback:(error)): 将根据键移出一项</li>
<li>static mergeItem:(key:string , value:string , callback:(error)):<br>合并现有的值和输入值。</li>
<li>static clear(callback:(error)): 清除所有的项目。</li>
<li>static getAllKeys(callback:(error)): 获取所有的键。</li>
<li>static multiGet(keys,callback:(errors,result)):获取多项，其中keys是字符串数组。</li>
<li>static<br>multiSet(keyValuePairs,callback:(errors)):设置多项，其中keyValuePairs是字符串的二维数组。</li>
<li>static multiRemove(keys,callback(errors)):删除多项，其中keys是字符串数组。</li>
<li>static multiMerge(keyValuePairs,callback:(errors)):多个键值合并，其中keyValuePairs是字符串中的二维数组。</li>
</ul>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>简单存储：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">setData(text)&#123;  </div><div class="line">  AsyncStorage.setItem(AsyncStorageKey,text,()=&gt;&#123;  </div><div class="line">    this.setState(&#123;  </div><div class="line">      data:text,  </div><div class="line">    &#125;);  </div><div class="line">  &#125;);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：</strong>可以设置一个回调，设置成功后，调用回调，修改状态机变量。</p>
<p>删除指定的KEY值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">delData()&#123;  </div><div class="line">  // 读取key字段并将结果作为第二个参数传递给callback。  如果有任何错误发生，则会传递一个Error对象作为第一个参数。返回一个Promise对象。  </div><div class="line">  AsyncStorage.getItem(AsyncStorageKey,(error,text)=&gt;&#123;  </div><div class="line">    if(text=== null )&#123;  </div><div class="line">      alert(AsyncStorageKey +&quot;没有对应的值&quot;);  </div><div class="line">    &#125;else&#123;  </div><div class="line">      //删除数据  </div><div class="line">      AsyncStorage.removeItem(AsyncStorageKey,()=&gt;&#123;  </div><div class="line">        this.setState(&#123;  </div><div class="line">          data:&quot;&quot;,  </div><div class="line">        &#125;,()=&gt;&#123;  </div><div class="line">          alert(&apos;删除成功&apos;);  </div><div class="line">        &#125;);  </div><div class="line">      &#125;);  </div><div class="line">    &#125;  </div><div class="line">  &#125;);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完整代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">  StyleSheet,</div><div class="line">  View,</div><div class="line">  Text,</div><div class="line">  TouchableHighlight,</div><div class="line">  Dimensions,</div><div class="line">  AsyncStorage</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line"></div><div class="line">const &#123;width, height&#125; = Dimensions.get(&apos;window&apos;);</div><div class="line"></div><div class="line"></div><div class="line">var data = &quot;&quot;;</div><div class="line">const AsyncStorageKey = &quot;AS_&quot;;</div><div class="line">export default class AsyncStorageExample extends Component &#123;</div><div class="line"></div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line">    this.state = &#123;</div><div class="line">      data:&quot;&quot;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setData(text)&#123;</div><div class="line">    AsyncStorage.setItem(AsyncStorageKey,text,()=&gt;&#123;</div><div class="line">      this.setState(&#123;</div><div class="line">        data:text,</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  delData()&#123;</div><div class="line">    // 读取key字段并将结果作为第二个参数传递给callback。</div><div class="line">    // 如果有任何错误发生，则会传递一个Error对象作为第一个参数。返回一个Promise对象。</div><div class="line">    AsyncStorage.getItem(AsyncStorageKey,(error,text)=&gt;&#123;</div><div class="line">      if(text=== null )&#123;</div><div class="line">        alert(AsyncStorageKey +&quot;没有对应的值&quot;);</div><div class="line">      &#125;else&#123;</div><div class="line">        //删除数据</div><div class="line">        AsyncStorage.removeItem(AsyncStorageKey,()=&gt;&#123;</div><div class="line">          this.setState(&#123;</div><div class="line">            data:&quot;&quot;,</div><div class="line">          &#125;,()=&gt;&#123;</div><div class="line">            alert(&apos;删除成功&apos;);</div><div class="line">          &#125;);</div><div class="line">        &#125;);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">          &lt;TouchableHighlight style=&#123;styles.itemView&#125; underlayColor=&quot;red&quot; onPress=&#123;this.setData.bind(this,&quot;我是小刀&quot;)&#125;&gt;</div><div class="line">              &lt;Text style=&#123;styles.itemText&#125;&gt;</div><div class="line">                1、存储数据</div><div class="line">              &lt;/Text&gt;</div><div class="line">          &lt;/TouchableHighlight&gt;</div><div class="line"></div><div class="line">          &lt;TouchableHighlight style=&#123;styles.itemView&#125; underlayColor=&quot;red&quot; onPress=&#123;this.delData.bind(this)&#125;&gt;</div><div class="line">              &lt;Text style=&#123;styles.itemText&#125;&gt;</div><div class="line">                2、删除数据</div><div class="line">              &lt;/Text&gt;</div><div class="line">          &lt;/TouchableHighlight&gt;</div><div class="line"></div><div class="line">          &lt;Text style=&#123;&#123;paddingTop:40&#125;&#125;&gt;</div><div class="line">            AsyncStorage存储的值是:&#123;this.state.data&#125;</div><div class="line">          &lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    backgroundColor: &apos;#f2f2f2&apos;,</div><div class="line">    paddingTop:20,</div><div class="line">  &#125;,</div><div class="line">  itemView:&#123;</div><div class="line">    backgroundColor:&apos;grey&apos;,</div><div class="line">    height:44,</div><div class="line">    width:width,</div><div class="line">    justifyContent:&apos;center&apos;,</div><div class="line">    marginTop:10,</div><div class="line">  &#125;,</div><div class="line">  itemText:&#123;</div><div class="line">    fontSize:15,</div><div class="line">    color:&apos;#ffffff&apos;,</div><div class="line">    textAlign:&apos;left&apos;,</div><div class="line">    marginLeft:20,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="购物车结算示例"><a href="#购物车结算示例" class="headerlink" title="购物车结算示例"></a>购物车结算示例</h2><p><img src="http://img.blog.csdn.net/20170518082304498?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>示例代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div></pre></td><td class="code"><pre><div class="line">var React = require(&apos;react-native&apos;);</div><div class="line">var Dimensions = require(&apos;Dimensions&apos;);</div><div class="line">var &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  Image,</div><div class="line">  ScrollView,</div><div class="line">  WebView,</div><div class="line">  NavigatorIOS,</div><div class="line">  AsyncStorage,</div><div class="line">  TouchableOpacity,</div><div class="line">&#125; = React;</div><div class="line"></div><div class="line"></div><div class="line">var Model = [</div><div class="line">    &#123;</div><div class="line">        id: &apos;1&apos;,</div><div class="line">        title:&apos;商品1&apos;,</div><div class="line">        desc:&apos;哎哟～不错哦&apos;,</div><div class="line">        price: 10000,</div><div class="line">        url:&apos;http://ww4.sinaimg.cn/thumb180/4d7f0a6dgw1f18crfemfog20b405mqv7.gif&apos;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        id: &apos;2&apos;,</div><div class="line">        title:&apos;商品2&apos;,</div><div class="line">        desc:&apos;哎哟～不错哦2&apos;,</div><div class="line">        price: 10330,</div><div class="line">        url:&apos;http://ww3.sinaimg.cn/thumb180/6aa09e8fgw1f18abnz36mg20b30697wj.gif&apos;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        id: &apos;3&apos;,</div><div class="line">        title:&apos;商品3&apos;,</div><div class="line">        desc:&apos;哎哟～不错3&apos;,</div><div class="line">        price: 100003,</div><div class="line">        url:&apos;http://ww4.sinaimg.cn/thumb180/6298156bgw1f18ydrmj4cj20hi0bhq5r.jpg&apos;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        id: &apos;4&apos;,</div><div class="line">        title:&apos;商品4&apos;,</div><div class="line">        desc:&apos;哎哟～不错哦4&apos;,</div><div class="line">        price: 100004,</div><div class="line">        url:&apos;http://ww1.sinaimg.cn/thumb180/a5d15efdgw1f18k8pu0cyj20jg0jbdja.jpg&apos;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        id: &apos;5&apos;,</div><div class="line">        title:&apos;商品5&apos;,</div><div class="line">        desc:&apos;哎哟～不错哦5&apos;,</div><div class="line">        price: 100005,</div><div class="line">        url:&apos;http://ww2.sinaimg.cn/thumb180/005yYQOngw1f18lqh7hx9j326r1gincv.jpg&apos;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        id: &apos;6&apos;,</div><div class="line">        title:&apos;商品6&apos;,</div><div class="line">        desc:&apos;哎哟～不错哦6&apos;,</div><div class="line">        price: 100006,</div><div class="line">        url:&apos;http://ww2.sinaimg.cn/thumb180/5ba8d1cbgw1f18hhiaj3jj21kw1kw10x.jpg&apos;</div><div class="line">    &#125;</div><div class="line">];</div><div class="line"></div><div class="line">var styles = StyleSheet.create(&#123;</div><div class="line">    container : &#123;</div><div class="line">        flex: 1</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    row : &#123;</div><div class="line">        flexDirection: &apos;row&apos;,</div><div class="line">        marginBottom: 10,</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    item : &#123;</div><div class="line">        flex: 1,</div><div class="line">        marginLeft:5,</div><div class="line">        borderWidth: 1,</div><div class="line">        borderColor: &apos;#ddd&apos;,</div><div class="line">        marginRight: 5,</div><div class="line">        height: 100,</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    img: &#123;</div><div class="line">        flex: 1,</div><div class="line">        backgroundColor: &apos;transparent&apos;,</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    item_text: &#123;</div><div class="line">        backgroundColor: &apos;#000&apos;,</div><div class="line">        opacity:0.7,</div><div class="line">        color:&apos;#fff&apos;,</div><div class="line">        height:25,</div><div class="line">        lineHeight:18,</div><div class="line">        textAlign:&apos;center&apos;,</div><div class="line">        marginTop:74</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    btn: &#123;</div><div class="line">        backgroundColor: &apos;#ff7200&apos;,</div><div class="line">        height: 33,</div><div class="line">        textAlign : &apos;center&apos;,</div><div class="line">        color: &apos;#fff&apos;,</div><div class="line">        marginLeft:10,</div><div class="line">        marginRight: 10,</div><div class="line">        lineHeight: 24,</div><div class="line">        marginTop: 40,</div><div class="line">        fontSize: 18,</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    list_item : &#123;</div><div class="line">        marginLeft: 5,</div><div class="line">        marginRight: 5,</div><div class="line">        padding:5 ,</div><div class="line">        borderWidth: 1,</div><div class="line">        height: 30,</div><div class="line">        borderRadius: 3,</div><div class="line">        borderColor: &apos;#ddd&apos;,</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    list_item_desc : &#123;</div><div class="line">        flex: 2,</div><div class="line">        fontSize: 15,</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    list_item_price: &#123;</div><div class="line">        flex: 1,</div><div class="line">        textAlign: &apos;right&apos;,</div><div class="line">        fontSize: 15,</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    clear: &#123;</div><div class="line">        marginTop : 10,</div><div class="line">        backgroundColor: &apos;#fff&apos;,</div><div class="line">        color: &apos;#000&apos;,</div><div class="line">        borderColor: &apos;#ddd&apos;,</div><div class="line">        borderWidth:1,</div><div class="line">        marginLeft: 10,</div><div class="line">        marginRight:10,</div><div class="line">        lineHeight: 24,</div><div class="line">        height:33,</div><div class="line">        fontSize: 18,</div><div class="line">        textAlign: &apos;center&apos;,</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">//列表项组件</div><div class="line">var Item = React.createClass(&#123;</div><div class="line">    render:function()&#123;</div><div class="line">        return(</div><div class="line">            &lt;View style = &#123;styles.item&#125;&gt;</div><div class="line">                &lt;TouchableOpacity onPress = &#123;this.props.press&#125;&gt;</div><div class="line">                    &lt;Image</div><div class="line">                        resizeMode = &apos;contain&apos;</div><div class="line">                        style = &#123;styles.img&#125;</div><div class="line">                        source = &#123;&#123;uri:this.props.url&#125;&#125;&gt;</div><div class="line">                        &lt;Text numberLines = &#123;1&#125; style = &#123;styles.item_text&#125;&gt;</div><div class="line">                            &#123;this.props.title&#125;</div><div class="line">                        &lt;/Text&gt;</div><div class="line">                    &lt;/Image&gt;</div><div class="line">                &lt;/TouchableOpacity&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">            );</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//列表组件</div><div class="line">var List = React.createClass(&#123;</div><div class="line">    getInitialState: function()&#123;</div><div class="line">        return&#123;</div><div class="line">            count: 0</div><div class="line">            &#125;;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    componentDidMount: function() &#123;</div><div class="line">        var _that = this;</div><div class="line">        AsyncStorage.getAllKeys(function(err,keys)&#123;</div><div class="line">            if (err) &#123;</div><div class="line">                //TODO:存储取数据出错 ，给用户提示错误信息。</div><div class="line">            &#125;</div><div class="line">            //将存储的商品条数反应到按钮上</div><div class="line">            _that.setState(&#123;</div><div class="line">                count:keys.length</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    render: function()&#123;</div><div class="line">        var list = [];</div><div class="line">        for(var i in Model)&#123;</div><div class="line">            if (i % 2 ===0) &#123;</div><div class="line">                var row = (</div><div class="line">                    &lt;View style = &#123;styles.row&#125; key = &#123;i&#125;&gt;</div><div class="line">                        &lt;Item url=&#123;Model[i].url&#125;</div><div class="line">                        title = &#123;Model[i].title&#125;</div><div class="line">                        press = &#123;this.press.bind(this,Model[i])&#125;&gt;&lt;/Item&gt;</div><div class="line"></div><div class="line">                        &lt;Item url = &#123;Model[parseInt(i) + 1].url&#125;</div><div class="line">                        title = &#123;Model[parseInt(i) + 1].title&#125;</div><div class="line">                        press = &#123;this.press.bind(this,Model[parseInt(i) + 1])&#125;&gt;&lt;/Item&gt;</div><div class="line">                    &lt;/View&gt;</div><div class="line">                );</div><div class="line">                list.push(row);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var counts = this.state.count;</div><div class="line">        var str = null;</div><div class="line"></div><div class="line">        if (counts) &#123;</div><div class="line">            str = &apos;,共&apos;+counts+&apos;件商品&apos;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return(</div><div class="line">            &lt;ScrollView style = &#123;&#123;marginTop:10&#125;&#125;&gt;</div><div class="line">                &#123;list&#125;</div><div class="line">                &lt;Text onPress = &#123;this.goGouWu&#125; style = &#123;styles.btn&#125;&gt;</div><div class="line">                    去结算&#123;str&#125;</div><div class="line">                &lt;/Text&gt;</div><div class="line">            &lt;/ScrollView&gt;</div><div class="line">        );</div><div class="line">    &#125;,</div><div class="line">    //前往购物车方法</div><div class="line">    goGouWu: function()&#123;</div><div class="line">        this.props.navigator.push(&#123;</div><div class="line">            component:GouWu,</div><div class="line">            title: &apos;购物车&apos;</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    //商品被选中方法</div><div class="line">    press: function(data)&#123;</div><div class="line">        var count = this.state.count;</div><div class="line">        count++;</div><div class="line">        //改变数字状态</div><div class="line">        this.setState(&#123;</div><div class="line">            count: count</div><div class="line">        &#125;);</div><div class="line">        //AsyncStorage 存储</div><div class="line">        AsyncStorage.setItem(&apos;SP-&apos;+this.genId() + &apos;-SP&apos;,JSON.stringify(data),function(err)&#123;</div><div class="line">            if (err) &#123;</div><div class="line">                //TODO:存储出错</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    genId: function()&#123;</div><div class="line">        return &apos;xxxxxxx-xxxx-2xxxx-bxxxxxxxxx&apos;.replace(/[xy]/g,function(c)&#123;</div><div class="line">            var r = Math.random() * 16|0,</div><div class="line">            v = c == &apos;x&apos;?r:(r &amp; 0x3 | 0x8);</div><div class="line">            return v.toString(16);</div><div class="line">        &#125;).toUpperCase();</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">var GouWu = React.createClass(&#123;</div><div class="line">    getInitialState:function()&#123;</div><div class="line">        return&#123;</div><div class="line">            data:[],</div><div class="line">            price:0</div><div class="line">        &#125;;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    render:function()&#123;</div><div class="line">        var data = this.state.data;</div><div class="line">        var price = this.state.price;</div><div class="line">        var list = [];</div><div class="line">        for(var i in data)&#123;</div><div class="line">            price += parseFloat(data[i].price);</div><div class="line">            list.push(</div><div class="line">                &lt;View style = &#123;[styles.row,styles.list_item]&#125; key = &#123;i&#125;&gt;</div><div class="line">                    &lt;Text style = &#123;styles.list_item_desc&#125; &gt;</div><div class="line">                        &#123;data[i].title&#125;</div><div class="line">                        &#123;data[i].desc&#125;</div><div class="line">                    &lt;/Text&gt;</div><div class="line">                    &lt;Text style = &#123;styles.list_item_price&#125; &gt;$&#123;data[i].price&#125;&lt;/Text&gt;</div><div class="line">                &lt;/View&gt;</div><div class="line">            );</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        var str = null;</div><div class="line">        if (price) &#123;</div><div class="line">            str = &apos;,共&apos;+ price.toFixed(1)+&apos;元&apos;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return(</div><div class="line">            &lt;ScrollView style = &#123;&#123;marginTop:10&#125;&#125;&gt;</div><div class="line">                &#123;list&#125;</div><div class="line">                &lt;Text style = &#123;styles.btn&#125; onPress = &#123;this.paySuccess&#125;&gt;支付&#123;str&#125;&lt;/Text&gt;</div><div class="line">                &lt;Text style = &#123;styles.clear&#125; onPress = &#123;this.clearStorage&#125;&gt;清空购物车&lt;/Text&gt;</div><div class="line">            &lt;/ScrollView&gt;</div><div class="line">        )</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    componentDidMount: function() &#123;</div><div class="line">        var _that = this;</div><div class="line">        AsyncStorage.getAllKeys(function(err,keys)&#123;</div><div class="line">            if (err) &#123;</div><div class="line">                //TODO:存储取数据出错</div><div class="line">                //如果发生错误，这里直接返回（return）防止进入下面的逻辑</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            AsyncStorage.multiGet(keys,function(errs,result)&#123;</div><div class="line">                //TODO:错误处理</div><div class="line">                //得到的结果是二维数组</div><div class="line">                //result［i］［0］表示我们存储的键，result［i］［1］表示我们存储的值</div><div class="line">                var arr = [];</div><div class="line">                for(var i in result)&#123;</div><div class="line">                    arr.push(JSON.parse(result[i][1]));</div><div class="line">                &#125;</div><div class="line">                _that.setState(&#123;</div><div class="line">                    data:arr</div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">    &#125;,</div><div class="line">    clearStorage:function()&#123;</div><div class="line">        var _that = this;</div><div class="line">        AsyncStorage.clear(function(err)&#123;</div><div class="line">            if (!err) &#123;</div><div class="line">                _that.setState(&#123;</div><div class="line">                    data:[],</div><div class="line">                    price:0,</div><div class="line">                &#125;);</div><div class="line">                alert(&apos;购物车已经清空&apos;)</div><div class="line">            &#125;</div><div class="line">            //TODO:err</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    paySuccess: function()&#123;</div><div class="line">        var _that = this;</div><div class="line">        AsyncStorage.clear(function(err)&#123;</div><div class="line">            if (!err) &#123;</div><div class="line"></div><div class="line">                alert(&quot;支付成功！&quot;)</div><div class="line"></div><div class="line">                _that.props.navigator.pop();</div><div class="line"></div><div class="line"></div><div class="line">            &#125;</div><div class="line">            //TODO:err</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        _that.setState(&#123;</div><div class="line">                    data:[],</div><div class="line">                    price:0,</div><div class="line">                    count:0,</div><div class="line">                    str:&apos;去结算&apos;</div><div class="line">                &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line">var wxsPrj = React.createClass(&#123;</div><div class="line">  render: function() &#123;</div><div class="line">    return (</div><div class="line">        &lt;NavigatorIOS style = &#123;styles.container&#125;</div><div class="line">                      initialRoute = &#123;</div><div class="line">                        &#123;</div><div class="line">                            component:List,</div><div class="line">                            title:&apos;商品列表&apos;,</div><div class="line">                        &#125;</div><div class="line">                      &#125;/&gt;</div><div class="line"></div><div class="line">    );</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(&apos;wxsPrj&apos;, () =&gt; wxsPrj);</div></pre></td></tr></table></figure>
<p>代码说明：<br>首先我们来看一下模块， 我们创建Model(数据源) styles(样式列表) Item(列表项组件) List(列表组件) GouWu(购物车组件)<br>前三个没有什么好说的，先来说一下List组件：<br>在List组件中，我们用Model数据源来渲染列表项。使用i％2 ＝＝0 来控制，每两个列表项目在一行中。<br>在press方法中我们让count＋1，并且使用AsynStorage.setItem将选中的商品数据添加到App本地存储中。这里之所以使用SP－为前缀，－SP为后缀，采用GUID为存储的键名的一部分，是为了区分其他数据，好处：</p>
<p>可以缺粉用户数据，例如username信息。<br>可以放置key重复，保证同名商品都能被添加进购物车。<br>这样我们就把商品信息存储起来了。</p>
<p>我们在componentDidMount方法中作了一个处理，在用户第二次进入的时候，如果没有支付，依旧会告诉用户购物车中的商品数。使用Asy ncStorage.getAllKeys获取数据的条数，<br>在去结算按钮中，我们注册了点击方法goGouWu事件。使用this.props.navigator.push将购物车组件加载。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AsyncStorage是一个简单的、异步的、持久化的以键值对形式进行数据存储的存储系统，对于App来说是全局性的。它的作用等价于iOS的NSUserDefaluts或Android的SharedPreferences，使用AsyncStorage用来替换老旧的LocalS
    
    </summary>
    
      <category term="React Native" scheme="http://www.xiangzhihong.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://www.xiangzhihong.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>gulp+webpack工具整合简介</title>
    <link href="http://www.xiangzhihong.com/2016/12/05/gulp+webpack%E5%B7%A5%E5%85%B7%E6%95%B4%E5%90%88%E7%AE%80%E4%BB%8B/"/>
    <id>http://www.xiangzhihong.com/2016/12/05/gulp+webpack工具整合简介/</id>
    <published>2016-12-04T16:00:00.000Z</published>
    <updated>2017-07-10T01:08:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack简介"><a href="#webpack简介" class="headerlink" title="webpack简介"></a>webpack简介</h2><p>Webpack 是一个模块打包器。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。<br><img src="http://img.blog.csdn.net/20170103123129506?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h3 id="webpack特点"><a href="#webpack特点" class="headerlink" title="webpack特点"></a>webpack特点</h3><ul>
<li><p>Webpack<br>有两种组织模块依赖的方式，同步和异步。异步依赖作为分割点，形成一个新的块。在优化了依赖树后，每一个异步区块都作为一个文件被打包。</p>
</li>
<li><p>Webpack 本身只能处理原生的 JavaScript 模块，但是 loader 转换器可以将各种类型的资源转换成 JavaScript<br>模块。这样，任何资源都可以成为 Webpack 可以处理的模块。</p>
</li>
<li><p>Webpack 有一个智能解析器，几乎可以处理任何第三方库，无论它们的模块形式是 CommonJS、 AMD 还是普通的 JS<br>文件。甚至在加载依赖的时候，允许使用动态表达式 require(“./templates/“ + name + “.jade”)。</p>
</li>
<li><p>Webpack 还有一个功能丰富的插件系统。大多数内容功能都是基于这个插件系统运行的，还可以开发和使用开源的 Webpack<br>插件，来满足各式各样的需求。</p>
</li>
<li><p>Webpack 使用异步 I/O 和多级缓存提高运行效率，这使得 Webpack 能够以令人难以置信的速度快速增量编译。</p>
</li>
</ul>
<h3 id="webpack配置及使用"><a href="#webpack配置及使用" class="headerlink" title="webpack配置及使用"></a>webpack配置及使用</h3><p>首先需要安装node环境和npm包管理工具，不知道的可以自行百度。基本环境好了后需要安装webpack插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install webpack --save-dev</div></pre></td></tr></table></figure>
<p>接下来就是写一个demo验证了。创建一个静态页面 index.html 和一个 JS 入口文件 entry.js<br><!-- index.html --><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p> entry.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.write(&apos;It works.&apos;)</div></pre></td></tr></table></figure></p>
<p>编译 entry.js 并打包到 bundle.js：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack entry.js bundle.js</div></pre></td></tr></table></figure>
<p>然后在浏览器上就可以看到输出结果了“It works”。</p>
<h3 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h3><p>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。Loader 可以理解为是模块和资源的转换器，它本身是一个函数，接受源文件作为参数，返回转换的结果。这样，我们就可以通过 require 来加载任何类型的模块或文件，比如 CoffeeScript、 JSX、 LESS 或图片。首先安装loader：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install css-loader style-loader</div></pre></td></tr></table></figure>
<p>然后我们写代码的时候通过require函数引入进来就可以了，具体使用请自行搜索。</p>
<h2 id="gulp-简介"><a href="#gulp-简介" class="headerlink" title="gulp 简介"></a>gulp 简介</h2><p>gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成；使用它，我们不仅可以很愉快的编写代码，而且大大提高我们的工作效率。<br>gulp是基于Nodejs的自动任务运行器， 她能自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。在实现上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。通过本文，我们将学习如何使用Gulp来改变开发流程，从而使开发更加快速高效。<br>gulp 和 grunt 非常类似，但相比于 grunt 的频繁 IO 操作，gulp 的流操作，能更快地更便捷地完成构建工作。</p>
<h3 id="gulp安装使用"><a href="#gulp安装使用" class="headerlink" title="gulp安装使用"></a>gulp安装使用</h3><h4 id="1、安装nodejs"><a href="#1、安装nodejs" class="headerlink" title="1、安装nodejs"></a>1、安装nodejs</h4><p>1.1、说明：gulp是基于nodejs，理所当然需要安装nodejs；<br>1.2、安装：打开<a href="https://nodejs.org/en/" target="_blank" rel="external">nodejs官网</a>，点击硕大的绿色Download按钮，它会根据系统信息选择对应版本（.msi文件）。然后一路next。</p>
<h4 id="2、使用命令行（如果你熟悉命令行，可以直接跳到第3步）"><a href="#2、使用命令行（如果你熟悉命令行，可以直接跳到第3步）" class="headerlink" title="2、使用命令行（如果你熟悉命令行，可以直接跳到第3步）"></a>2、使用命令行（如果你熟悉命令行，可以直接跳到第3步）</h4><p>2.1、说明：什么是命令行？命令行在OSX是终端（Terminal），在windows是命令提示符（Command Prompt）；<br>2.2、注：之后操作都是在windows系统下；<br>2.3、简单介绍gulp在使用过程中常用命令，打开命令提示符执行下列命令（打开方式：window + r 输入cmd回车）：<br>node -v查看安装的nodejs版本，出现版本号，说明刚刚已正确安装nodejs。PS：未能出现版本号，请尝试注销电脑重试；<br>npm -v查看npm的版本号，npm是在安装nodejs时一同安装的nodejs包管理器，那它有什么用呢？稍后解释；<br>cd定位到目录，用法：cd + 路径 ；<br>dir列出文件列表；<br>cls清空命令提示符窗口内容。<br><img src="http://img.blog.csdn.net/20170103204436639?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h4 id="3、npm介绍"><a href="#3、npm介绍" class="headerlink" title="3、npm介绍"></a>3、npm介绍</h4><p>在这里直接略过，<a href="http://blog.csdn.net/xiangzhihong8/article/details/53422926" target="_blank" rel="external">npm详解</a></p>
<h4 id="4、选装cnpm"><a href="#4、选装cnpm" class="headerlink" title="4、选装cnpm"></a>4、选装cnpm</h4><p>4.1、说明：因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常，如果npm的服务器在中国就好了，所以我们乐于分享的淘宝团队干了这事。32个！来自官网：“这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。”；<br>4.2、官方网址：<a href="http://npm.taobao.org；" target="_blank" rel="external">http://npm.taobao.org；</a><br>4.3、安装：命令提示符执行npm install cnpm -g –registry=<a href="https://registry.npm.taobao.org；" target="_blank" rel="external">https://registry.npm.taobao.org；</a>  注意：安装完后最好查看其版本号cnpm -v或关闭命令提示符重新打开，安装完直接使用有可能会出现错误；<br>注：cnpm跟npm用法完全一致，只是在执行命令时将npm改为cnpm（以下操作将以cnpm代替npm）。</p>
<h4 id="5、全局安装gulp"><a href="#5、全局安装gulp" class="headerlink" title="5、全局安装gulp"></a>5、全局安装gulp</h4><p>5.1、说明：全局安装gulp目的是为了通过她执行gulp任务；<br>5.2、安装：命令提示符执行cnpm install gulp -g；<br>5.3、查看是否正确安装：命令提示符执行gulp -v，出现版本号即为正确安装。</p>
<h4 id="6、新建package-json文件"><a href="#6、新建package-json文件" class="headerlink" title="6、新建package.json文件"></a>6、新建package.json文件</h4><p>这个也忽略，相当于maven组织项目的。</p>
<h4 id="7、本地安装gulp插件"><a href="#7、本地安装gulp插件" class="headerlink" title="7、本地安装gulp插件"></a>7、本地安装gulp插件</h4><p>7.1、安装：定位目录命令后提示符执行cnpm install –save-dev；<br>7.2、本示例以gulp-less为例（编译less文件），命令提示符执行cnpm install gulp-less –save-dev；<br><img src="http://img.blog.csdn.net/20170103205009580?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>7.3、将会安装在node_modules的gulp-less目录下，该目录下有一个gulp-less的使用帮助文档README.md；<br>7.4、为了能正常使用，我们还得本地安装gulp：cnpm install gulp –save-dev；<br>PS：细心的你可能会发现，我们全局安装了gulp，项目也安装了gulp，全局安装gulp是为了执行gulp任务，本地安装gulp则是为了调用gulp插件的功能。</p>
<h4 id="8、新建gulpfile-js文件（重要）"><a href="#8、新建gulpfile-js文件（重要）" class="headerlink" title="8、新建gulpfile.js文件（重要）"></a>8、新建gulpfile.js文件（重要）</h4><p>8.1、说明：gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件（其实将gulpfile.js放入其他文件夹下亦可）。<br>8.2、它大概是这样一个js文件（更多插件配置请<a href="http://www.ydcss.com/archives/tag/gulp" target="_blank" rel="external">查看这里</a>）<br>来看一个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//导入工具包 require(&apos;node_modules里对应模块&apos;)</div><div class="line">var gulp = require(&apos;gulp&apos;), //本地安装gulp所用到的地方</div><div class="line">    less = require(&apos;gulp-less&apos;);</div><div class="line"> </div><div class="line">//定义一个testLess任务（自定义任务名称）</div><div class="line">gulp.task(&apos;testLess&apos;, function () &#123;</div><div class="line">    gulp.src(&apos;src/less/index.less&apos;) //该任务针对的文件</div><div class="line">        .pipe(less()) //该任务调用的模块</div><div class="line">        .pipe(gulp.dest(&apos;src/css&apos;)); //将会在src/css下生成index.css</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">gulp.task(&apos;default&apos;,[&apos;testLess&apos;, &apos;elseTask&apos;]); //定义默认任务 elseTask为其他任务，该示例没有定义elseTask任务</div><div class="line"> </div><div class="line">//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数</div><div class="line">//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组) </div><div class="line">//gulp.dest(path[, options]) 处理完后文件生成路径</div></pre></td></tr></table></figure>
<h4 id="9、运行gulp"><a href="#9、运行gulp" class="headerlink" title="9、运行gulp"></a>9、运行gulp</h4><p>9.1、说明：命令提示符执行gulp 任务名称；<br>9.2、编译less：命令提示符执行gulp testLess；<br>9.3、当执行gulp default或gulp将会调用default任务里的所有任务[‘testLess’,’elseTask’]。</p>
<h4 id="10、使用webstorm运行gulp任务"><a href="#10、使用webstorm运行gulp任务" class="headerlink" title="10、使用webstorm运行gulp任务"></a>10、使用webstorm运行gulp任务</h4><p>10.1、说明：使用webstorm可视化运行gulp任务；<br>10.2、使用方法：将项目导入webstorm，右键gulpfile.js 选择”Show Gulp Tasks”打开Gulp窗口，若出现”No task found”，选择右键”Reload tasks”，双击运行即可。<br><img src="http://img.blog.csdn.net/20170103211004745?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="webpack-amp-gulp集成"><a href="#webpack-amp-gulp集成" class="headerlink" title="webpack&amp;gulp集成"></a>webpack&amp;gulp集成</h2><p>接下来要到重点了，gulp和webpack各有各的优点，那么我们整合这两个工具呢？</p>
<h3 id="创建webpack对象"><a href="#创建webpack对象" class="headerlink" title="创建webpack对象"></a>创建webpack对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var webpack = require(&quot;webpack&quot;)</div></pre></td></tr></table></figure>
<h3 id="创建gulp任务"><a href="#创建gulp任务" class="headerlink" title="创建gulp任务"></a>创建gulp任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//gulp --product</div><div class="line">gulp.task(&apos;default&apos;, function() &#123;</div><div class="line">  isProduct = argv.product;</div><div class="line">  isWatch = !isProduct;</div><div class="line">  console.log(&apos;正在处理：&apos; + (isProduct ? &apos;线上&apos; : &apos;本地&apos;) + &apos;环境&apos;);</div><div class="line">  fse.emptydirSync(&apos;./dist&apos;);</div><div class="line">  gulp.start(&apos;webpack&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>ps:本地开发(命令：gulp)和线上(命令：gulp –product)部署gulp命令分开，本地会做文件更改的监听，并且不会压缩。</p>
<h3 id="webpack任务配置"><a href="#webpack任务配置" class="headerlink" title="webpack任务配置"></a>webpack任务配置</h3><p>入口文件配置:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">entry: &#123;</div><div class="line">            index: &apos;./index.js&apos;</div><div class="line">            common: [</div><div class="line">                &apos;jquery&apos;,</div><div class="line">                &apos;understore&apos;,</div><div class="line">                &apos;template&apos;,</div><div class="line">                &apos;store&apos;</div><div class="line">            ]</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>该参数主要是配置入口文件，打包出来的文件就是以里面的key作为名字的文件（即bundle）。<br>输出路径配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">output: &#123;</div><div class="line">            path: &apos;./dist/&apos;,</div><div class="line">            filename: &apos;[name].js&apos;,</div><div class="line">            publicPath: &apos;&apos;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>别名配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">resolve: &#123;</div><div class="line">            alias: &#123;</div><div class="line">                jquery: path.resolve(&apos;../global/lib/jquery.js&apos;),</div><div class="line">                template: path.resolve(&apos;../global/lib/template.js&apos;),</div><div class="line">                understore: path.resolve(&apos;../global/lib/underscore.js&apos;),</div><div class="line">                store: path.resolve(&apos;../global/lib/store.js&apos;)</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>配置完别名，就可以用别名来进行require了，不管是在webpack配置中，还是在js代码中。</p>
<h3 id="webpack插件配置"><a href="#webpack插件配置" class="headerlink" title="webpack插件配置"></a>webpack插件配置</h3><p>webpack内部全局变量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">new webpack.ProvidePlugin(&#123;</div><div class="line">    $: &apos;jquery&apos;,</div><div class="line">    jQuery: &apos;jquery&apos;,</div><div class="line">    template: &apos;template&apos;,</div><div class="line">    store: &apos;store&apos;,</div><div class="line">    _: &apos;understore&apos;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>配置完全局的变量，在js中就直接可以用，不需要再require。该全局不是挂载到window对象上，只对webpack打包出来的js有用。<br>合并相同的模块：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new webpack.optimize.DedupePlugin()</div></pre></td></tr></table></figure>
<p>说明:该插件会把相同的模块合并，不推荐使用，最好自己做到模块唯一性，如果打出来两个相同的模块，说明你的代码潜藏出错风险。<br>css抽离插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new ExtractTextPlugin(&quot;[name].css&quot;)</div></pre></td></tr></table></figure>
<p>该插件会把css抽离出来作为单独的css文件进行打包，如果不使用该插件，会把css打包到js中，然后以style标签的形式，把css作为内联样式使用。<br>公共文件插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new webpack.optimize.CommonsChunkPlugin(&apos;common&apos;, &apos;common.js&apos;)</div></pre></td></tr></table></figure>
<p>该插件会把公共的模块进行抽离到公共的js模块里面，防止js重复引用打包。<br>压缩插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">new webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">        compress: &#123;</div><div class="line">            warnings: false</div><div class="line">        &#125;,</div><div class="line">        mangle: &#123;</div><div class="line">            except: [&apos;$&apos;, &apos;m&apos;, &apos;webpackJsonpCallback&apos;]</div><div class="line">        &#125;</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<p>该插件会把js进行压缩，在线上环境进行使用。<br>注：mangle该关键词不需要混淆，因为在我们实践过程中，压缩后的代码有很多地方报错。<br>由于webpack会把所有的js都打包到一个js文件中，这样就不方便开发人员debug，故需要进行sourcemap的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">devtool: (isProduct ? false : &apos;source-map&apos;)</div></pre></td></tr></table></figure>
<h3 id="加载器loader"><a href="#加载器loader" class="headerlink" title="加载器loader"></a>加载器loader</h3><p>js加载器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    test: /\.js[x]?$/,</div><div class="line">    exclude: /node_modules/,</div><div class="line">    loader: &apos;babel-loader&apos;,</div><div class="line">    query: &#123;</div><div class="line">        compact: false</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>js使用babel来进行加载，这样就可以使用一些es6的特性来开发，IE8下面使用如下方案来进行解决转换后的代码不兼容问题。</p>
<p>ps：解决IE8 babel 转换：我们把shim.js &amp; sham.js，自己合并到一起吧。<br>css、less、sass加载器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    test: /\.css$/,</div><div class="line">    loader: ExtractTextPlugin.extract(&apos;style-loader&apos;, &apos;css-loader?-convertValues&apos;)</div><div class="line">&#125;, &#123;</div><div class="line">    test: /\.less$/,</div><div class="line">    loader: ExtractTextPlugin.extract(&apos;style-loader&apos;, &apos;css-loader?-convertValues!less-loader&apos;)</div><div class="line">&#125;, &#123;</div><div class="line">    test: /\.scss$/,</div><div class="line">    loader: ExtractTextPlugin.extract(&apos;style-loader&apos;, &apos;css-loader?-convertValues!sass-loader&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ExtractTextPlugin是抽离css的插件。css-loader是处理css，会把url(xxx.png)处理成require，然后通过对应后缀名的其他加载器进行处理。==如果是线上环境，css会进行压缩，很多配置要进行调整如果直接采用默认的，转换后的css会出现一些问题，常见问题如：</p>
<ul>
<li>问题一，压缩后字体文件不能处理。解决方法：把iconfont.css里面的注释删除掉即可</li>
<li>问题二，压缩后的px单位会转换成pc,pt。解决方法：在加载器里面加上-convertValues参数。</li>
<li>问题三，css require的优先级问题，按照常理是后require的css是后加载。但是在实践过程中，(1)通过import引入的js模块中引入的css是优先于require引入的js模块中引入的css；(2)js中require的css名称如果和js所在模块的文件夹名字相同即使部分相同的话，优先级也会提高。</li>
<li>关于更多的问题请参照Loader配置。<br>图片字体文件加载器，file-loader：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    test: /\.(png|jpg|gif|woff|woff2|ttf|eot|svg)$/,</div><div class="line">    loader: &quot;file-loader?name=[name]_[sha512:hash:base64:7].[ext]&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对一些图片和字体资源进行加载，我们会把相关文件抽离出来进行名字加上hash值的前7位做了处理后的名字。<br>html加载器;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    test: /\.html/,</div><div class="line">    loader: &quot;html-loader&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="gulp脚本文件-重要"><a href="#gulp脚本文件-重要" class="headerlink" title="gulp脚本文件(重要)"></a>gulp脚本文件(重要)</h3><p>gulpfile.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;),</div><div class="line">    argv = require(&apos;yargs&apos;).argv,</div><div class="line">    fs = require(&apos;fs&apos;),</div><div class="line">    fse = require(&apos;fs-extra&apos;),</div><div class="line">    path = require(&apos;path&apos;),</div><div class="line">    util = require(&apos;util&apos;);</div><div class="line">var webpack = require(&quot;webpack&quot;),</div><div class="line">    ExtractTextPlugin = require(&quot;extract-text-webpack-plugin&quot;);</div><div class="line"></div><div class="line">var isWatch = true;</div><div class="line">var isProduct = false;</div><div class="line">var project = &apos;iwjw-pc&apos;;</div><div class="line">//gulp --product</div><div class="line">gulp.task(&apos;default&apos;, function() &#123;</div><div class="line">    isProduct = argv.product;</div><div class="line">    isWatch = !isProduct;</div><div class="line"></div><div class="line">    console.log(&apos;正在处理：&apos; + (isProduct ? &apos;线上&apos; : &apos;本地&apos;) + &apos;环境&apos;);</div><div class="line"></div><div class="line">    fse.emptydirSync(&apos;./dist&apos;);</div><div class="line"></div><div class="line">    gulp.start(&apos;webpack&apos;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//webpack静态处理</div><div class="line">gulp.task(&apos;webpack&apos;, function(callback) &#123;</div><div class="line">    var minfy = [];</div><div class="line">    isProduct &amp;&amp; minfy.push(new webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">        compress: &#123;</div><div class="line">            warnings: false</div><div class="line">        &#125;,</div><div class="line">        mangle: &#123;</div><div class="line">            except: [&apos;$&apos;, &apos;m&apos;, &apos;webpackJsonpCallback&apos;]</div><div class="line">        &#125;</div><div class="line">    &#125;));</div><div class="line">    //webpack配置文件</div><div class="line">    var config = &#123;</div><div class="line">        watch: isWatch,</div><div class="line">        entry: &#123;</div><div class="line">            index: &apos;./index.js&apos;,</div><div class="line">            common: [</div><div class="line">                &apos;jquery&apos;,</div><div class="line">                &apos;understore&apos;,</div><div class="line">                &apos;template&apos;,</div><div class="line">                &apos;store&apos;</div><div class="line">            ]</div><div class="line">        &#125;,</div><div class="line">        debug: true,</div><div class="line"></div><div class="line">        devtool: (isProduct ? false : &apos;source-map&apos;),</div><div class="line"></div><div class="line">        output: &#123;</div><div class="line">            path: &apos;./dist/&apos;,</div><div class="line">            filename: &apos;[name].js&apos;,</div><div class="line">            publicPath: &apos;&apos;</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        resolve: &#123;</div><div class="line">            alias: &#123;</div><div class="line">                jquery: path.resolve(&apos;../global/lib/jquery.js&apos;),</div><div class="line">                template: path.resolve(&apos;../global/lib/template.js&apos;),</div><div class="line">                understore: path.resolve(&apos;../global/lib/underscore.js&apos;),</div><div class="line">                store: path.resolve(&apos;../global/lib/store.js&apos;)</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line"></div><div class="line"></div><div class="line">        plugins: [</div><div class="line">            new webpack.ProvidePlugin(&#123;</div><div class="line">                $: &apos;jquery&apos;,</div><div class="line">                jQuery: &apos;jquery&apos;,</div><div class="line">                template: &apos;template&apos;,</div><div class="line">                store: &apos;store&apos;,</div><div class="line">                _: &apos;understore&apos;</div><div class="line">            &#125;),</div><div class="line">            new webpack.optimize.DedupePlugin(),</div><div class="line">            new ExtractTextPlugin(&quot;[name].css&quot;),</div><div class="line">            new webpack.optimize.CommonsChunkPlugin(&apos;common&apos;, &apos;common.js&apos;)</div><div class="line">        ].concat(minfy),</div><div class="line">        module: &#123;</div><div class="line">            loaders: [&#123;</div><div class="line">                test: /\.js[x]?$/,</div><div class="line">                exclude: /node_modules/,</div><div class="line">                loader: &apos;babel-loader&apos;,</div><div class="line">                query: &#123;</div><div class="line">                    compact: false</div><div class="line">                &#125;</div><div class="line">            &#125;, &#123;</div><div class="line">                test: /\.css$/,</div><div class="line">                loader: ExtractTextPlugin.extract(&apos;style-loader&apos;, &apos;css-loader?-convertValues&apos;)</div><div class="line">            &#125;, &#123;</div><div class="line">                test: /\.less$/,</div><div class="line">                loader: ExtractTextPlugin.extract(&apos;style-loader&apos;, &apos;css-loader?-convertValues!less-loader&apos;)</div><div class="line">            &#125;, &#123;</div><div class="line">                test: /\.scss$/,</div><div class="line">                loader: ExtractTextPlugin.extract(&apos;style-loader&apos;, &apos;css-loader?-convertValues!sass-loader&apos;)</div><div class="line">            &#125;, &#123;</div><div class="line">                test: /\.(png|jpg|gif|woff|woff2|ttf|eot|svg)$/,</div><div class="line">                loader: &quot;file-loader?name=[name]_[sha512:hash:base64:7].[ext]&quot;</div><div class="line">            &#125;, &#123;</div><div class="line">                test: /\.html/,</div><div class="line">                loader: &quot;html-loader&quot;</div><div class="line">            &#125;]</div><div class="line">        &#125;</div><div class="line">    &#125;; </div><div class="line">    webpack(config, function(err, stats) &#123;</div><div class="line">        console.log(stats.toString());</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">gulp.task(&apos;sham&apos;, function()&#123;</div><div class="line">    gulp.src(&apos;../global/lib/es5-shim-sham.js&apos;).pipe(gulp.dest(&apos;./dist&apos;));</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>pacakge.json（根据项目情况配置）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">&quot;name&quot;: &quot;iwfe&quot;,</div><div class="line">&quot;version&quot;: &quot;0.0.0&quot;,</div><div class="line">&quot;private&quot;: true,</div><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">  &quot;start&quot;: &quot;node ./bin/server&quot;</div><div class="line">&#125;,</div><div class="line">&quot;dependencies&quot;: &#123;</div><div class="line">  &quot;babel-loader&quot;: &quot;^5.3.2&quot;,</div><div class="line">  &quot;bundle-loader&quot;: &quot;^0.5.4&quot;,</div><div class="line">  &quot;css-loader&quot;: &quot;^0.16.0&quot;,</div><div class="line">  &quot;exports-loader&quot;: &quot;^0.6.2&quot;,</div><div class="line">  &quot;extract-text-webpack-plugin&quot;: &quot;^0.8.2&quot;,</div><div class="line">  &quot;file-loader&quot;: &quot;~0.8.4&quot;,</div><div class="line">  &quot;fs-extra&quot;: &quot;*&quot;,</div><div class="line">  &quot;html-loader&quot;: &quot;^0.4.0&quot;,</div><div class="line">  &quot;imports-loader&quot;: &quot;^0.6.5&quot;,</div><div class="line">  &quot;jquery&quot;: &quot;~2.1.4&quot;,</div><div class="line">  &quot;sass-loader&quot;: &quot;^3.1.2&quot;,</div><div class="line">  &quot;source-map-loader&quot;: &quot;^0.1.5&quot;,</div><div class="line">  &quot;style-loader&quot;: &quot;~0.12.3&quot;,</div><div class="line">  &quot;through2&quot;: &quot;*&quot;,</div><div class="line">  &quot;url-loader&quot;: &quot;~0.5.6&quot;,</div><div class="line">  &quot;webpack&quot;: &quot;*&quot;,</div><div class="line">  &quot;webpack-dev-server&quot;: &quot;^1.10.1&quot;,</div><div class="line">  &quot;yargs&quot;: &quot;*&quot;,</div><div class="line">  &quot;gulp-zip&quot;: &quot;*&quot;</div><div class="line">&#125;,</div><div class="line">&quot;devDependencies&quot;: &#123;</div><div class="line">  &quot;gulp&quot;: &quot;*&quot;,</div><div class="line">  &quot;gulp-util&quot;: &quot;*&quot;</div><div class="line">&#125;,</div><div class="line">&quot;description&quot;: &quot;前端静态库&quot;,</div><div class="line">&quot;repository&quot;: &#123;</div><div class="line">  &quot;type&quot;: &quot;git&quot;,</div><div class="line">  &quot;url&quot;: &quot;xxx&quot;</div><div class="line">&#125;,</div><div class="line">&quot;author&quot;: &quot;jade&quot;,</div><div class="line">&quot;license&quot;: &quot;ISC&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考：<a href="http://www.ydcss.com/archives/18" target="_blank" rel="external">http://www.ydcss.com/archives/18</a><br><a href="https://github.com/webpack" target="_blank" rel="external">https://github.com/webpack</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;webpack简介&quot;&gt;&lt;a href=&quot;#webpack简介&quot; class=&quot;headerlink&quot; title=&quot;webpack简介&quot;&gt;&lt;/a&gt;webpack简介&lt;/h2&gt;&lt;p&gt;Webpack 是一个模块打包器。它将根据模块的依赖关系进行静态分析，然后将这些模块
    
    </summary>
    
      <category term="前端" scheme="http://www.xiangzhihong.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://www.xiangzhihong.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="webpack" scheme="http://www.xiangzhihong.com/tags/webpack/"/>
    
      <category term="gulp" scheme="http://www.xiangzhihong.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>Angular2入坑指南</title>
    <link href="http://www.xiangzhihong.com/2016/12/05/Angular2%E5%85%A5%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    <id>http://www.xiangzhihong.com/2016/12/05/Angular2入坑指南/</id>
    <published>2016-12-04T16:00:00.000Z</published>
    <updated>2017-07-10T01:05:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>对后端开发来说，前端是神秘的，眼花缭乱的技术，繁多的框架，出名的不出名的好几百种，看是“繁荣”，其实显得杂乱无章，但是我们在做开发的时候，技术选型还是主流的那么几个：浅析angular，react，vue.js Node.js。</p>
<h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><p>官网：<a href="https://nodejs.org/" target="_blank" rel="external">https://nodejs.org/</a><br>nodejs不是一个js框架，千万不要认为是类似jquery的框架，nodejs是js运行时，运行环境，类比java中jvm。做前端的没用过nodejs都不好意思说自己是前端。nodejs是和jvm同等地位的js运行环境，打开了前端人员走向后端的道路。</p>
<h2 id="react-js"><a href="#react-js" class="headerlink" title="react.js"></a>react.js</h2><p>官网：<a href="http://facebook.github.io/react/" target="_blank" rel="external">http://facebook.github.io/react/</a><br>react是facebook前不久出的一款框架，众前端膜拜之。类比Java中freemarker的宏。reactjs最大的作用就是用来开发ui组件，比如用它开发移动端页面，也是今年移动端前端化的推动者。</p>
<h2 id="angular-js"><a href="#angular-js" class="headerlink" title="angular.js"></a>angular.js</h2><p>官网：<a href="http://www.apjs.net/" target="_blank" rel="external">http://www.apjs.net/</a><br>angular是一款优秀的前端JS框架，已经被用于Google的多款产品当中。AngularJS有着诸多特性，最为核心的是：MVC、模块化、自动化双向数据绑定、语义化标签、依赖注入等等。因为背靠google也收到了开发者的推崇。</p>
<h1 id="概念与区别"><a href="#概念与区别" class="headerlink" title="概念与区别"></a>概念与区别</h1><p>本人也在React与Angular两大体系里纠结了好久，还使用React Native做了几个UI，彷徨于两大前端框架之前。<br>React缺点：</p>
<ol>
<li>Web Componet的MVC分离不够彻底。 JSX描述的页面模板与JS代码没有办法完全分开。<br>无法接受代码的同时还夹个HTML代码这样原始的方式。</li>
<li>对UI的描述自成一体，而不是采用CSS或者SCSS。</li>
<li>数据的传递不够直接还有一堆乱七八槽的属性</li>
<li>Android与IOS的代码不够一致</li>
<li>核心太小，一堆补充的库<br>Angular2的优点：<br>1、推荐TypeScript而不是原生的Javascript<br>2、类库特别多，概念也是特别多<br>3、体量大<br>4、成熟度相对偏低，版本2才刚发布<br>5、不兼容1.x<br>6、Router还不成熟<br>综合以上我最终决定选择Angular2作为我前端开发的首选框架。<br>同时还有以下几个Bonus：</li>
<li>配置nativescript写原生应用，并且nativescript支持css子集，这一点比react要强一些，可以更小的降低学习成本与维护成本。<ol>
<li>有官方的UI方案Material Design供选择</li>
<li>官工具链相对于React要成熟 有angular-cli这个便利化的工具，并提供E2E的测试，用以方便测试，并保证项目的质量。</li>
<li>维护团队强大<br>来看一张图：<br><img src="http://img.blog.csdn.net/20161225121233493?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><h1 id="Angular2快速安装与入门"><a href="#Angular2快速安装与入门" class="headerlink" title="Angular2快速安装与入门"></a>Angular2快速安装与入门</h1>安装angular-cli</li>
</ol>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g angular-cli</div></pre></td></tr></table></figure>
<p>创建项目</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ng new PROJECT_NAMEcd PROJECT_NAMEng serve</div></pre></td></tr></table></figure>
<p>就这么 简单，这时候你的项目已经运行起来了。<br><img src="http://img.blog.csdn.net/20161225121618854?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>我们看一下项目结构<br><img src="http://img.blog.csdn.net/20161225121652321?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>然后打开localhost:4200就可以查看效果了。<br>附：<a href="https://github.com/angular/angular-cli" target="_blank" rel="external">angular-cli的教程与源码地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;对后端开发来说，前端是神秘的，眼花缭乱的技术，繁多的框架，出名的不出名的好几百种，看是“繁荣”，其实显得杂乱无章，但是我们在做开发的时候，技术选型还
    
    </summary>
    
      <category term="Angular2" scheme="http://www.xiangzhihong.com/categories/Angular2/"/>
    
      <category term="前端" scheme="http://www.xiangzhihong.com/categories/Angular2/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Angular2" scheme="http://www.xiangzhihong.com/tags/Angular2/"/>
    
      <category term="前端开发" scheme="http://www.xiangzhihong.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>机器学习</title>
    <link href="http://www.xiangzhihong.com/2016/12/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.xiangzhihong.com/2016/12/01/机器学习/</id>
    <published>2016-11-30T16:00:00.000Z</published>
    <updated>2017-07-10T01:30:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>什么是机器学习？<br>机器学习是英文名称Machine Learning(简称ML)的直译。机器学习涉及概率论、统计学、逼近论、凸分析、算法复杂度理论等多门学科。专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身的性能。它是人工智能的核心，是使计算机具有智能的根本途径，其应用遍及人工智能的各个领域，它主要使用归纳、综合而不是演绎。<br>相对于传统的计算机工作，我们给它一串指令，然后它遵照这个指令一步步执行下去即可。机器学习根本不接受你输入的指令，相反，它只接受你输入的数据!也就是说它某种意义上具有了我们人处理事情的能力。</p>
<h2 id="机器学习发展史"><a href="#机器学习发展史" class="headerlink" title="机器学习发展史"></a>机器学习发展史</h2><p>机器学习是人工智能研究较为年轻的分支，它的发展过程大体上可分为4个时期。<br>第一阶段是在20世纪50年代中叶到60年代中叶，属于热烈时期。<br>第二阶段是在20世纪60年代中叶至70年代中叶，被称为机器学习的冷静时期。<br>第三阶段是从20世纪70年代中叶至80年代中叶，称为复兴时期。<br>机器学习的最新阶段始于1986年。机器学习进入新阶段的重要表现在下列诸方面：<br>(1) 机器学习已成为新的边缘学科并在高校形成一门课程。它综合应用心理学、生物学和神经生理学以及数学、自动化和计算机科学形成机器学习理论基础。<br>(2) 结合各种学习方法，取长补短的多种形式的集成学习系统研究正在兴起。特别是连接学习符号学习的耦合可以更好地解决连续性信号处理中知识与技能的获取与求精问题而受到重视。<br>(3) 机器学习与人工智能各种基础问题的统一性观点正在形成。例如学习与问题求解结合进行、知识表达便于学习的观点产生了通用智能系统SOAR的组块学习。类比学习与问题求解结合的基于案例方法已成为经验学习的重要方向。<br>(4) 各种学习方法的应用范围不断扩大，一部分已形成商品。归纳学习的知识获取工具已在诊断分类型专家系统中广泛使用。连接学习在声图文识别中占优势。分析学习已用于设计综合型专家系统。遗传算法与强化学习在工程控制中有较好的应用前景。与符号系统耦合的神经网络连接学习将在企业的智能管理与智能机器人运动规划中发挥作用。<br>(5) 与机器学习有关的学术活动空前活跃。国际上除每年一次的机器学习研讨会外，还有计算机学习理论会议以及遗传算法会议。</p>
<h2 id="机器学习的范围"><a href="#机器学习的范围" class="headerlink" title="机器学习的范围"></a>机器学习的范围</h2><p>机器学习跟模式识别，统计学习，数据挖掘，计算机视觉，语音识别，自然语言处理等领域有着很深的联系。从范围上来说，机器学习跟模式识别，统计学习，数据挖掘是类似的，同时，机器学习与其他领域的处理技术的结合，形成了计算机视觉、语音识别、自然语言处理等交叉学科。因此，一般说数据挖掘时，可以等同于说机器学习。同时，我们平常所说的机器学习应用，应该是通用的，不仅仅局限在结构化数据，还有图像，音频等应用。</p>
<h3 id="模式识别"><a href="#模式识别" class="headerlink" title="模式识别"></a>模式识别</h3><p>模式识别=机器学习。两者的主要区别在于前者是从工业界发展起来的概念，后者则主要源自计算机学科。在著名的《Pattern Recognition And Machine Learning》这本书中，Christopher M. Bishop在开头是这样说的“模式识别源自工业界，而机器学习来自于计算机学科。不过，它们中的活动可以被视为同一个领域的两个方面，同时在过去的10年间，它们都有了长足的发展”。</p>
<h3 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h3><p>数据挖掘=机器学习+数据库，记得大学的最后一学期开了一门数据挖掘的课，何为数据挖掘，就是从海量的数据中挖掘出有用的数据，其实从某种意义上来说和大数据分析很像。数据挖掘通常与计算机科学有关，并通过统计、在线分析处理、情报检索、机器学习、专家系统（依靠过去的经验法则）和模式识别等诸多方法来实现上述目标。</p>
<h3 id="统计学习"><a href="#统计学习" class="headerlink" title="统计学习"></a>统计学习</h3><p>统计学习近似等于机器学习。统计学习是个与机器学习高度重叠的学科。因为机器学习中的大多数方法来自统计学，甚至可以认为，统计学的发展促进机器学习的繁荣昌盛。例如著名的支持向量机算法，就是源自统计学科。但是在某种程度上两者是有分别的，这个分别在于：统计学习者重点关注的是统计模型的发展与优化，偏数学，而机器学习者更关注的是能够解决问题，偏实践，因此机器学习研究者会重点研究学习算法在计算机上执行的效率与准确性的提升。</p>
<h3 id="计算机视觉"><a href="#计算机视觉" class="headerlink" title="计算机视觉"></a>计算机视觉</h3><p>计算机视觉=图像处理+机器学习。图像处理技术用于将图像处理为适合进入机器学习模型中的输入，机器学习则负责从图像中识别出相关的模式。随着机器学习的新领域深度学习的发展，大大促进了计算机图像识别的效果，因此未来计算机视觉界的发展前景不可估量。</p>
<h3 id="语音识别"><a href="#语音识别" class="headerlink" title="语音识别"></a>语音识别</h3><p>语音识别=语音处理+机器学习。语音识别就是音频处理技术与机器学习的结合。语音识别技术一般不会单独使用，一般会结合自然语言处理的相关技术。目前的相关应用有苹果的语音助手siri，讯飞等国内很多的科技公司和机构。</p>
<h3 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h3><p>自然语言处理=文本处理+机器学习。自然语言处理技术主要是让机器理解人类的语言的一门领域。在自然语言处理技术中，大量使用了编译原理相关的技术，例如词法分析，语法分析等等，除此之外，在理解这个层面，则使用了语义理解，机器学习等技术。</p>
<h2 id="机器学习算法"><a href="#机器学习算法" class="headerlink" title="机器学习算法"></a>机器学习算法</h2><h3 id="监督式学习"><a href="#监督式学习" class="headerlink" title="监督式学习"></a>监督式学习</h3><p>监督式学习算法包括一个目标变量（因变量）和用来预测目标变量的预测变量（自变量）。通过这些变量我们可以搭建一个模型，从而对于一个已知的预测变量值，我们可以得到对应的目标变量值。重复训练这个模型，直到它能在训练数据集上达到预定的准确度。 属于监督式学习的算法有：回归模型，决策树，随机森林，K邻近算法，逻辑回归等。</p>
<h3 id="无监督式学习"><a href="#无监督式学习" class="headerlink" title="无监督式学习"></a>无监督式学习</h3><p>与监督式学习不同的是，无监督学习中我们没有需要预测或估计的目标变量。无监督式学习是用来对总体对象进行分类的。它在根据某一指标将客户分类上有广泛应用。 属于无监督式学习的算法有：关联规则，K-means聚类算法等。</p>
<h3 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h3><p>这个算法可以训练程序做出某一决定。程序在某一情况下尝试所有的可能行动，记录不同行动的结果并试着找出最好的一次尝试来做决定。 属于这一类算法的有马尔可夫决策过程。</p>
<h3 id="常见算法"><a href="#常见算法" class="headerlink" title="常见算法"></a>常见算法</h3><p>常见的机器学习算法<br>以下是最常用的机器学习算法，大部分数据问题都可以通过它们解决：<br>1.线性回归 (Linear Regression)<br>2.逻辑回归 (Logistic Regression)<br>3.决策树 (Decision Tree)<br>4.支持向量机（SVM）<br>5.朴素贝叶斯 (Naive Bayes)<br>6.K邻近算法（KNN）<br>7.K-均值算法（K-means）<br>8.随机森林 (Random Forest)<br>9.降低维度算法（DimensionalityReduction Algorithms）<br>10.GradientBoost和Adaboost算法</p>
<h2 id="机器学习分类"><a href="#机器学习分类" class="headerlink" title="机器学习分类"></a>机器学习分类</h2><h3 id="基于学习策略的分类"><a href="#基于学习策略的分类" class="headerlink" title="基于学习策略的分类"></a>基于学习策略的分类</h3><p>学习策略是指学习过程中系统所采用的推理策略。一个学习系统总是由学习和环境两部分组成。由环境（如书本或教师）提供信息，学习部分则实现信息转换，用能够理解的形式记忆下来，并从中获取有用的信息。在学习过程中，学生（学习部分）使用的推理越少，他对教师（环境）的依赖就越大，教师的负担也就越重。学习策略的分类标准就是根据学生实现信息转换所需的推理多少和难易程度来分类的，依从简单到复杂，从少到多的次序分为以下六种基本类型：</p>
<h4 id="1）机械学习-Rote-learning"><a href="#1）机械学习-Rote-learning" class="headerlink" title="1）机械学习 (Rote learning)"></a>1）机械学习 (Rote learning)</h4><p>学习者无需任何推理或其它的知识转换，直接吸取环境所提供的信息。如塞缪尔的跳棋程序，纽厄尔和西蒙的LT系统。这类学习系统主要考虑的是如何索引存贮的知识并加以利用。系统的学习方法是直接通过事先编好、构造好的程序来学习，学习者不作任何工作，或者是通过直接接收既定的事实和数据进行学习，对输入信息不作任何的推理。</p>
<h4 id="2）示教学习-Learning-from-instruction或Learning-by-being-told"><a href="#2）示教学习-Learning-from-instruction或Learning-by-being-told" class="headerlink" title="2）示教学习 (Learning from instruction或Learning by being told)"></a>2）示教学习 (Learning from instruction或Learning by being told)</h4><p>学生从环境（教师或其它信息源如教科书等）获取信息，把知识转换成内部可使用的表示形式，并将新的知识和原有知识有机地结合为一体。所以要求学生有一定程度的推理能力，但环境仍要做大量的工作。教师以某种形式提出和组织知识，以使学生拥有的知识可以不断地增加。这种学习方法和人类社会的学校教学方式相似，学习的任务就是建立一个系统，使它能接受教导和建议，并有效地存贮和应用学到的知识。不少专家系统在建立知识库时使用这种方法去实现知识获取。示教学习的一个典型应用例是FOO程序。</p>
<h4 id="3）演绎学习-Learning-by-deduction"><a href="#3）演绎学习-Learning-by-deduction" class="headerlink" title="3）演绎学习 (Learning by deduction)"></a>3）演绎学习 (Learning by deduction)</h4><p>学生所用的推理形式为演绎推理。推理从公理出发，经过逻辑变换推导出结论。这种推理是”保真”变换和特化(specialization)的过程，使学生在推理过程中可以获取有用的知识。这种学习方法包含宏操作(macro-operation)学习、知识编辑和组块(Chunking)技术。演绎推理的逆过程是归纳推理。</p>
<h4 id="4）类比学习-Learning-by-analogy"><a href="#4）类比学习-Learning-by-analogy" class="headerlink" title="4）类比学习 (Learning by analogy)"></a>4）类比学习 (Learning by analogy)</h4><p>利用二个不同领域（源域、目标域）中的知识相似性，可以通过类比，从源域的知识（包括相似的特征和其它性质）推导出目标域的相应知识，从而实现学习。类比学习系统可以使一个已有的计算机应用系统转变为适应于新的领域，来完成原先没有设计的相类似的功能。<br>类比学习需要比上述三种学习方式更多的推理。它一般要求先从知识源（源域）中检索出可用的知识，再将其转换成新的形式，用到新的状况（目标域）中去。类比学习在人类科学技术发展史上起着重要作用，许多科学发现就是通过类比得到的。例如著名的卢瑟福类比就是通过将原子结构（目标域）同太阳系（源域）作类比，揭示了原子结构的奥秘。</p>
<h4 id="5）基于解释的学习-Explanation-based-learning-EBL"><a href="#5）基于解释的学习-Explanation-based-learning-EBL" class="headerlink" title="5）基于解释的学习 (Explanation-based learning, EBL)"></a>5）基于解释的学习 (Explanation-based learning, EBL)</h4><p>学生根据教师提供的目标概念、该概念的一个例子、领域理论及可操作准则，首先构造一个解释来说明为什该例子满足目标概念，然后将解释推广为目标概念的一个满足可操作准则的充分条件。EBL已被广泛应用于知识库求精和改善系统的性能。<br>著名的EBL系统有迪乔恩（G.DeJong）的GENESIS,米切尔（T.Mitchell）的LEXII和LEAP, 以及明顿（S.Minton）等的PRODIGY。</p>
<h4 id="6）归纳学习-Learning-from-induction"><a href="#6）归纳学习-Learning-from-induction" class="headerlink" title="6）归纳学习 (Learning from induction)"></a>6）归纳学习 (Learning from induction)</h4><p>归纳学习是由教师或环境提供某概念的一些实例或反例，让学生通过归纳推理得出该概念的一般描述。这种学习的推理工作量远多于示教学习和演绎学习，因为环境并不提供一般性概念描述（如公理）。从某种程度上说，归纳学习的推理量也比类比学习大，因为没有一个类似的概念可以作为”源概念”加以取用。归纳学习是最基本的，发展也较为成熟的学习方法，在人工智能领域中已经得到广泛的研究和应用。</p>
<h3 id="基于所获取知识的表示形式分类"><a href="#基于所获取知识的表示形式分类" class="headerlink" title="基于所获取知识的表示形式分类　"></a>基于所获取知识的表示形式分类　</h3><p>学习系统获取的知识可能有：行为规则、物理对象的描述、问题求解策略、各种分类及其它用于任务实现的知识类型。<br>对于学习中获取的知识，主要有以下一些表示形式：</p>
<h4 id="1）代数表达式参数"><a href="#1）代数表达式参数" class="headerlink" title="1）代数表达式参数"></a>1）代数表达式参数</h4><p>学习的目标是调节一个固定函数形式的代数表达式参数或系数来达到一个理想的性能。</p>
<h4 id="2）决策树"><a href="#2）决策树" class="headerlink" title="2）决策树"></a>2）决策树</h4><p>用决策树来划分物体的类属，树中每一内部节点对应一个物体属性，而每一边对应于这些属性的可选值，树的叶节点则对应于物体的每个基本分类。</p>
<h4 id="3）形式文法"><a href="#3）形式文法" class="headerlink" title="3）形式文法"></a>3）形式文法</h4><p>在识别一个特定语言的学习中，通过对该语言的一系列表达式进行归纳，形成该语言的形式文法。</p>
<h4 id="4）产生式规则"><a href="#4）产生式规则" class="headerlink" title="4）产生式规则"></a>4）产生式规则</h4><p>产生式规则表示为条件—动作对，已被极为广泛地使用。学习系统中的学习行为主要是：生成、泛化、特化（Specialization）或合成产生式规则。</p>
<h4 id="5）形式逻辑表达式"><a href="#5）形式逻辑表达式" class="headerlink" title="5）形式逻辑表达式"></a>5）形式逻辑表达式</h4><p>形式逻辑表达式的基本成分是命题、谓词、变量、约束变量范围的语句，及嵌入的逻辑表达式。</p>
<h4 id="6）图和网络"><a href="#6）图和网络" class="headerlink" title="6）图和网络"></a>6）图和网络</h4><p>有的系统采用图匹配和图转换方案来有效地比较和索引知识。</p>
<h4 id="7）框架和模式（schema）"><a href="#7）框架和模式（schema）" class="headerlink" title="7）框架和模式（schema）"></a>7）框架和模式（schema）</h4><p>每个框架包含一组槽，用于描述事物（概念和个体）的各个方面。</p>
<h4 id="8）计算机程序和其它的过程编码"><a href="#8）计算机程序和其它的过程编码" class="headerlink" title="8）计算机程序和其它的过程编码"></a>8）计算机程序和其它的过程编码</h4><p>获取这种形式的知识，目的在于取得一种能实现特定过程的能力，而不是为了推断该过程的内部结构。</p>
<h4 id="9）神经网络"><a href="#9）神经网络" class="headerlink" title="9）神经网络"></a>9）神经网络</h4><p>这主要用在联接学习中。学习所获取的知识，最后归纳为一个神经网络。</p>
<h4 id="10）多种表示形式的组合"><a href="#10）多种表示形式的组合" class="headerlink" title="10）多种表示形式的组合"></a>10）多种表示形式的组合</h4><p>根据表示的精细程度，可将知识表示形式分为两大类：泛化程度高的粗粒度符号表示、??泛化程度低的精粒度亚符号(sub-symbolic)表示。像决策树、形式文法、产生式规则、形式逻辑表达式、框架和模式等属于符号表示类；而代数表达式参数、图和网络、神经网络等则属亚符号表示类。</p>
<h3 id="按应用领域分类"><a href="#按应用领域分类" class="headerlink" title="按应用领域分类　"></a>按应用领域分类　</h3><p>最主要的应用领域有：专家系统、认知模拟、规划和问题求解、数据挖掘、网络信息服务、图象识别、故障诊断、自然语言理解、机器人和博弈等领域。<br>从机器学习的执行部分所反映的任务类型上看，大部分的应用研究领域基本上集中于以下两个范畴：分类和问题求解。<br>（1）分类任务要求系统依据已知的分类知识对输入的未知模式（该模式的描述）作分析，以确定输入模式的类属。相应的学习目标就是学习用于分类的准则（如分类规则）。<br>（2）问题求解任务要求对于给定的目标状态,??寻找一个将当前状态转换为目标状态的动作序列；机器学习在这一领域的研究工作大部分集中于通过学习来获取能提高问题求解效率的知识（如搜索控制知识，启发式知识等）。</p>
<h3 id="综合分类"><a href="#综合分类" class="headerlink" title="综合分类"></a>综合分类</h3><h4 id="1）经验性归纳学习-empirical-inductive-learning"><a href="#1）经验性归纳学习-empirical-inductive-learning" class="headerlink" title="1）经验性归纳学习 (empirical inductive learning)"></a>1）经验性归纳学习 (empirical inductive learning)</h4><p>经验性归纳学习采用一些数据密集的经验方法（如版本空间法、ID3法，定律发现方法）对例子进行归纳学习。其例子和学习结果一般都采用属性、谓词、关系等符号表示。它相当于基于学习策略分类中的归纳学习，但扣除联接学习、遗传算法、加强学习的部分。</p>
<h4 id="2）分析学习（analytic-learning）"><a href="#2）分析学习（analytic-learning）" class="headerlink" title="2）分析学习（analytic learning）"></a>2）分析学习（analytic learning）</h4><p>分析学习方法是从一个或少数几个实例出发，运用领域知识进行分析。其主要特征为：<br>·推理策略主要是演绎，而非归纳；<br>·使用过去的问题求解经验（实例）指导新的问题求解，或产生能更有效地运用领域知识的搜索控制规则。<br>分析学习的目标是改善系统的性能，而不是新的概念描述。分析学习包括应用解释学习、演绎学习、多级结构组块以及宏操作学习等技术。</p>
<h4 id="3）类比学习"><a href="#3）类比学习" class="headerlink" title="3）类比学习"></a>3）类比学习</h4><p>它相当于基于学习策略分类中的类比学习。在这一类型的学习中比较引人注目的研究是通过与过去经历的具体事例作类比来学习，称为基于范例的学习(case_based learning)，或简称范例学习。</p>
<h2 id="机器学习代码示例"><a href="#机器学习代码示例" class="headerlink" title="机器学习代码示例"></a>机器学习代码示例</h2><p>机器学习语音设计到pytho和R等最新语言。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">//在gcc-4.7.2下编译通过。</div><div class="line">//命令行：g++-Wall-ansi-O2test.cpp-otest</div><div class="line">#include&lt;iostream&gt;</div><div class="line">usingnamespacestd;</div><div class="line">voidinput(int&amp;oper,constboolmeth)</div><div class="line">&#123;</div><div class="line">//meth为true则只判断1，为false则判断1或0</div><div class="line">while(true)</div><div class="line">&#123;</div><div class="line">cin&gt;&gt;oper;</div><div class="line">if(meth&amp;&amp;oper==1)</div><div class="line">break;</div><div class="line">elseif(oper==0||oper==1)</div><div class="line">break;</div><div class="line">cout&lt;&lt;&quot;输入错误，请重新输入。&quot;&lt;&lt;endl;//判断参数</div><div class="line">cin.sync();//避免极端输入导致死循环</div><div class="line">cin.clear();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">intmain(void)</div><div class="line">&#123;</div><div class="line">cout&lt;&lt;&quot;1+1=2吗？那要看您怎么教我了，不要惊讶我会学习的&quot;&lt;&lt;endl;</div><div class="line">intladd,radd,aprs,rcnt(0),wcnt(0);//定义输入与结果，正确次数与错误次数</div><div class="line">cout&lt;&lt;&quot;开始学习……&quot;&lt;&lt;endl;</div><div class="line">for(inti(0);i!=10;++i)</div><div class="line">&#123;</div><div class="line">cout&lt;&lt;&quot;参数1（必须是1）：&quot;&lt;&lt;flush;//提示输入参数</div><div class="line">input(ladd,true);</div><div class="line">cout&lt;&lt;&quot;参数2（必须是1）：&quot;&lt;&lt;flush;</div><div class="line">input(radd,true);</div><div class="line">cout&lt;&lt;&quot;结果：&quot;&lt;&lt;(ladd+radd)&lt;&lt;endl;//输出结果</div><div class="line">cout&lt;&lt;&quot;您对这满意吗（满意输入1，不满意输入0）：&quot;&lt;&lt;flush;//评价等级</div><div class="line">input(aprs,false);</div><div class="line">if(aprs)//判断用户评价</div><div class="line">++rcnt;</div><div class="line">else</div><div class="line">++wcnt;</div><div class="line">cout&lt;&lt;&quot;正确次数：&quot;&lt;&lt;rcnt&lt;&lt;&quot;错误次数：&quot;&lt;&lt;wcnt&lt;&lt;endl;//错误次数</div><div class="line">&#125;</div><div class="line">if(rcnt&gt;wcnt)//判断学习结果</div><div class="line">cout&lt;&lt;&quot;主人告诉我1+1=2。&quot;&lt;&lt;endl;</div><div class="line">else</div><div class="line">if(rcnt&lt;wcnt)</div><div class="line">cout&lt;&lt;&quot;主人告诉我1+1!=2。&quot;&lt;&lt;endl;</div><div class="line">else</div><div class="line">cout&lt;&lt;&quot;我不明白主人是什么意思。&quot;&lt;&lt;endl;</div><div class="line">intterm;//退出部分</div><div class="line">cout&lt;&lt;&quot;您对我的表现满意吗？满意请输入1不满意请输入0：&quot;&lt;&lt;flush;</div><div class="line">input(term,false);</div><div class="line">if(term)</div><div class="line">cout&lt;&lt;&quot;谢谢我会继续努力学习&quot;&lt;&lt;endl;</div><div class="line">else</div><div class="line">cout&lt;&lt;&quot;谢谢我会继续努力学习D&quot;&lt;&lt;endl;</div><div class="line">//cin&gt;&gt;term;//在Windows上测试时启用</div><div class="line">return0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;什么是机器学习？&lt;br&gt;机器学习是英文名称Machine Learning(简称ML)的直译。机器学习涉及概率论、统计学、逼近论、凸分析、算
    
    </summary>
    
      <category term="机器学习" scheme="http://www.xiangzhihong.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://www.xiangzhihong.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>React Native和原生app通信机制详解</title>
    <link href="http://www.xiangzhihong.com/2016/11/18/React%20Native%E5%92%8C%E5%8E%9F%E7%94%9Fapp%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.xiangzhihong.com/2016/11/18/React Native和原生app通信机制详解/</id>
    <published>2016-11-17T16:00:00.000Z</published>
    <updated>2017-07-10T01:44:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>React Native用iOS自带的JavaScriptCore作为JS的解析引擎，但并没有用到JavaScriptCore提供的一些可以让JS与OC互调的特性，而是自己实现了一套机制，这套机制可以通用于所有JS引擎上，在没有JavaScriptCore的情况下也可以用webview代替，实际上项目里就已经有了用webview作为解析引擎的实现，应该是用于兼容iOS7以下没有JavascriptCore的版本。<br>普通的JS-OC通信实际上很简单，OC向JS传信息有现成的接口，像webview提供的-stringByEvaluatingJavaScriptFromString方法可以直接在当前context上执行一段JS脚本，并且可以获取执行后的返回值，这个返回值就相当于JS向OC传递信息。React Native也是以此为基础，通过各种手段，实现了在OC定义一个模块方法，JS可以直接调用这个模块方法并还可以无缝衔接回调。<br>举个例子，OC定义了一个模块RCTSQLManager，里面有个方法-query:successCallback:，JS可以直接调用RCTSQLManager.query并通过回调获取执行结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//OC</div><div class="line">@implement RCTSQLManager</div><div class="line">- (void)query:(NSString *)queryData successCallback:(RCTResponseSenderBlOCk)responseSender</div><div class="line">&#123;</div><div class="line">     RCT_EXPORT();</div><div class="line">     NSString *ret = @&quot;ret&quot;</div><div class="line">     responseSender(ret);</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//JS:</div><div class="line">RCTSQLManager.query(&quot;SELECT * FROM table&quot;, function(result) &#123;</div><div class="line">     //result == &quot;ret&quot;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="模块配置表"><a href="#模块配置表" class="headerlink" title="模块配置表"></a>模块配置表</h1><p>首先OC要告诉JS它有什么模块，模块里有什么方法，JS才知道有这些方法后才有可能去调用这些方法。这里的实现是OC生成一份模块配置表传给JS，配置表里包括了所有模块和模块里方法的信息。例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;remoteModuleConfig&quot;: &#123;</div><div class="line">        &quot;RCTSQLManager&quot;: &#123;</div><div class="line">            &quot;methods&quot;: &#123;</div><div class="line">                &quot;query&quot;: &#123;</div><div class="line">                    &quot;type&quot;: &quot;remote&quot;,</div><div class="line">                    &quot;methodID&quot;: 0</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            &quot;moduleID&quot;: 4</div><div class="line">        &#125;,</div><div class="line">        ...</div><div class="line">     &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OC端和JS端分别各有一个bridge，两个bridge都保存了同样一份模块配置表，JS调用OC模块方法时，通过bridge里的配置表把模块方法转为模块ID和方法ID传给OC，OC通过bridge的模块配置表找到对应的方法执行之，以上述代码为例，流程大概是这样（先不考虑callback）：<br><img src="http://img.blog.csdn.net/20170114112512625?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>在了解这个调用流程之前，我们先来看看OC的模块配置表式怎么来的。我们在新建一个OC模块时，JS和OC都不需要为新的模块手动去某个地方添加一些配置，模块配置表是自动生成的，只要项目里有一个模块，就会把这个模块加到配置表上，那这个模块配置表是怎样自动生成的呢？分两个步骤。</p>
<h2 id="1，取所有模块类"><a href="#1，取所有模块类" class="headerlink" title="1，取所有模块类"></a>1，取所有模块类</h2><p>每个模块类都实现了RCTBridgeModule接口，可以通过runtime接口objc_getClassList或objc_copyClassList取出项目里所有类，然后逐个判断是否实现了RCTBridgeModule接口，就可以找到所有模块类，实现在RCTBridgeModuleClassesByModuleID()方法里。</p>
<h2 id="2，取模块里暴露给JS的方法"><a href="#2，取模块里暴露给JS的方法" class="headerlink" title="2，取模块里暴露给JS的方法"></a>2，取模块里暴露给JS的方法</h2><p>一个模块里可以有很多方法，一些是可以暴露给JS直接调用的，一些是私有的不想暴露给JS，怎样做到提取这些暴露的方法呢？我能想到的方法是对要暴露的方法名制定一些规则，比如用RCTExport_作为前缀，然后用runtime方法class<em>getInstanceMethod取出所有方法名字，提取以RCTExport</em>为前缀的方法，但这样做恶心的地方是每个方法必须加前缀。React Native用了另一种黑魔法似的方法解决这个问题：编译属性<strong>attribute</strong>。<br>在上述例子中我们看到模块方法里有句代码：RCT_EXPORT()，模块里的方法加上这个宏就可以实现暴露给JS，无需其他规则，那这个宏做了什么呢？来看看它的定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#define RCT_EXPORT(JS_name) __attribute__((used, section(&quot;__DATA,RCTExport&quot; \</div><div class="line">))) static const char *__rct_export_entry__[] = &#123; __func__, #JS_name &#125;</div></pre></td></tr></table></figure>
<p>这个宏的作用是用编译属性<strong>attribute</strong>给二进制文件新建一个section，属于<strong>DATA数据段，名字为RCTExport，并在这个段里加入当前方法名。编译器在编译时会找到</strong>attribute__进行处理，为生成的可执行文件加入相应的内容。效果可以从linkmap看出来：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># Sections:</div><div class="line"># Address Size Segment Section</div><div class="line">0x100001670 0x000C0180 __TEXT __text</div><div class="line">...</div><div class="line">0x10011EFA0 0x00000330 __DATA RCTExport</div><div class="line">0x10011F2D0 0x00000010 __DATA __common</div><div class="line">0x10011F2E0 0x000003B8 __DATA __bss</div><div class="line">...</div><div class="line"> </div><div class="line">0x10011EFA0 0x00000010 [ 4] -[RCTStatusBarManager setStyle:animated:].__rct_export_entry__</div><div class="line">0x10011EFB0 0x00000010 [ 4] -[RCTStatusBarManager setHidden:withAnimation:].__rct_export_entry__</div><div class="line">0x10011EFC0 0x00000010 [ 5] -[RCTSourceCode getScriptText:failureCallback:].__rct_export_entry__</div><div class="line">0x10011EFD0 0x00000010 [ 7] -[RCTAlertManager alertWithArgs:callback:].__rct_export_entry__</div><div class="line">...</div></pre></td></tr></table></figure>
<p>可以看到可执行文件数据段多了个RCTExport段，内容就是各个要暴露给JS的方法。这些内容是可以在运行时获取到的，在RCTBridge.m的RCTExportedMethodsByModuleID()方法里获取这些内容，提取每个方法的类名和方法名，就完成了提取模块里暴露给JS方法的工作。整体的模块类/方法提取实现在RCTRemoteModulesConfig()方法里。</p>
<h2 id="js和oc的调用流程分析"><a href="#js和oc的调用流程分析" class="headerlink" title="js和oc的调用流程分析"></a>js和oc的调用流程分析</h2><p>接下来看看JS调用OC模块方法的详细流程，包括callback回调。<br><img src="http://img.blog.csdn.net/20170114112742315?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>从发起调用到执行回调总共有11个步骤：</p>
<ol>
<li>JS端调用某个OC模块暴露出来的方法。</li>
<li>把上一步的调用分解为ModuleName,MethodName,arguments，再扔给MessageQueue处理。<br>在初始化时模块配置表上的每一个模块都生成了对应的remoteModule对象，对象里也生成了跟模块配置表里一一对应的方法，这些方法里可以拿到自身的模块名，方法名，并对callback进行一些处理，再移交给MessageQueue。具体实现在BatchedBridgeFactory.js的_createBridgedModule里。</li>
<li>在这一步把JS的callback函数缓存在MessageQueue的一个成员变量里，用CallbackID代表callback。在通过保存在MessageQueue的模块配置表把上一步传进来的ModuleName和MethodName转为ModuleID和MethodID。</li>
<li>上述步骤得到的ModuleID,MethodId,CallbackID和其他参数argus传给OC。</li>
<li>OC接收到消息，通过模块配置表拿到对应的模块和方法。实际上模块配置表已经经过处理了，跟JS一样，在初始化时OC也对模块配置表上的每一个模块生成了对应的实例并缓存起来，模块上的每一个方法也都生成了对应的RCTModuleMethod对象，这里通过ModuleID和MethodID取到对应的Module实例和RCTModuleMethod实例进行调用。具体实现在_handleRequestNumber:moduleID:methodID:params:。</li>
<li>RCTModuleMethod对JS传过来的每一个参数进行处理。RCTModuleMethod可以拿到OC要调用的目标方法的每个参数类型，处理JS类型到目标类型的转换，所有JS传过来的数字都是NSNumber，这里会转成对应的int/long/double等类型，更重要的是会为block类型参数的生成一个block。</li>
<li>OC模块方法调用完，执行block回调。</li>
<li>调用到第6步说明的RCTModuleMethod生成的block。</li>
<li>block里带着CallbackID和block传过来的参数去调JS里MessageQueue的方法invokeCallbackAndReturnFlushedQueue。</li>
<li>MessageQueue通过CallbackID找到相应的JS callback方法。</li>
<li>调用callback方法，并把OC带过来的参数一起传过去，完成回调。<br>概况一下完整的流程如下：JS函数调用转ModuleID/MethodID -&gt; callback转CallbackID -&gt; OC根据ID拿到方法 -&gt; 处理参数 -&gt; 调用OC方法 -&gt; 回调CallbackID -&gt; JS通过CallbackID拿到callback执行。<h2 id="问题剖析"><a href="#问题剖析" class="headerlink" title="问题剖析"></a>问题剖析</h2>上述第4步留下一个问题，JS是怎样把数据传给OC，让OC去调相应方法的？<br>答案是通过返回值。JS不会主动传递数据给OC，在调OC方法时，会在上述第4步把ModuleID,MethodID等数据加到一个队列里，等OC过来调JS的任意方法时，再把这个队列返回给OC，此时OC再执行这个队列里要调用的方法。</li>
</ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;React Native用iOS自带的JavaScriptCore作为JS的解析引擎，但并没有用到JavaScriptCore提供的一些可以
    
    </summary>
    
      <category term="React Native" scheme="http://www.xiangzhihong.com/categories/React-Native/"/>
    
    
      <category term="eact Native" scheme="http://www.xiangzhihong.com/tags/eact-Native/"/>
    
  </entry>
  
  <entry>
    <title>iOS 轻量级存储</title>
    <link href="http://www.xiangzhihong.com/2016/11/15/iOS%20%E8%BD%BB%E9%87%8F%E7%BA%A7%E5%AD%98%E5%82%A8NSUserDefaults%20/"/>
    <id>http://www.xiangzhihong.com/2016/11/15/iOS 轻量级存储NSUserDefaults /</id>
    <published>2016-11-14T16:00:00.000Z</published>
    <updated>2017-07-17T06:09:28.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NSUserDefaults简介"><a href="#NSUserDefaults简介" class="headerlink" title="NSUserDefaults简介"></a>NSUserDefaults简介</h1><p>在Android和ios都提供了本地轻量级数据存储，底层实现都是基于key-value的方式。Android里面的叫SharedPreferences，ios的叫NSUserDefaults，使用上也是非常的简单。我们先看一看NSUserDefaults的API。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/NSObject.h&gt;</div><div class="line"></div><div class="line">@class NSArray&lt;ObjectType&gt;, NSData, NSDictionary&lt;KeyValue, ObjectValue&gt;, NSMutableDictionary, NSString, NSURL;</div></pre></td></tr></table></figure>
<p>NSUserDefaults 是一个单例，所以就不存在全局问题，需要用到的时候直接取就可以，随时存取，十分方便。<br>NSUserDefaults支持的数据类型有：NSNumber（Integer、Float、Double），NSString，NSDate，NSArray，NSDictionary，BOOL。</p>
<h1 id="NSUserDefaults实例"><a href="#NSUserDefaults实例" class="headerlink" title="NSUserDefaults实例"></a>NSUserDefaults实例</h1><p>下面我们以一个第一次登录记住密码的功能来讲讲NSUserDefaults。比如说我们要存储<br>用户名（NSString）:userName<br>密码（NSNumber）:userPassword<br>用户信息（NSDictionary）:userInfo</p>
<p>那么我们可以定义如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">NSString *userName=@&quot;xzh&quot;;</div><div class="line">NSNumber *userPassword=@123456;</div><div class="line">NSDictionary *userInfo=@&#123;</div><div class="line">                         @&quot;age&quot;:@29,</div><div class="line">                         @&quot;sex&quot;:@&quot;male&quot;</div><div class="line">                         &#125;;</div><div class="line">BOOL isOn=YES;</div></pre></td></tr></table></figure>
<p>接着我们使用NSUserDefaults开始对资料进行存储。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[NSUserDefaults standardUserDefaults] setObject:userName forKey:@&quot;name&quot;];</div><div class="line">   [[NSUserDefaults standardUserDefaults] setInteger:[userPassword integerValue] forKey:@&quot;password&quot;];</div><div class="line">   [[NSUserDefaults standardUserDefaults] setObject:userInfo forKey:@&quot;info&quot;];</div><div class="line">   [[NSUserDefaults standardUserDefaults] setBool:isOn forKey:@&quot;isOn&quot;];</div><div class="line"></div><div class="line">//调用synchronize存储</div><div class="line">   [[NSUserDefaults standardUserDefaults] synchronize];</div></pre></td></tr></table></figure>
<p>取数据的方法跟存是一样的，取出数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSString *userName=[[NSUserDefaults standardUserDefaults] objectForKey:@&quot;name&quot;];</div><div class="line">    NSInteger userPassword=[[NSUserDefaults standardUserDefaults] integerForKey:@&quot;password&quot;];</div><div class="line">    NSDictionary *userInfo=[[NSUserDefaults standardUserDefaults] dictionaryForKey:@&quot;info&quot;];</div><div class="line">    BOOL isOn=[[NSUserDefaults standardUserDefaults] boolForKey:@&quot;isOn&quot;];</div></pre></td></tr></table></figure>
<p>一些其他的方法，如根据键移除某一数据等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//移除某一键值对</div><div class="line">    [[NSUserDefaults standardUserDefaults] removeObjectForKey:@&quot;name&quot;];</div><div class="line">//或者设置为空</div><div class="line">    [[NSUserDefaults standardUserDefaults] setObject:nil </div><div class="line">//获取所有的数据</div><div class="line">    NSDictionary *allDic=[[NSDictionary alloc]initWithDictionary: [[NSUserDefaults standardUserDefaults]dictionaryRepresentation]];</div></pre></td></tr></table></figure>
<p>NSUserDefaults只能存储一些简单的数据类型，如果要存取一些复杂类型的数据（例如实体类），就需要对数据进行归档后转为NSData后存取。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//存一个类 ClassA</div><div class="line">ClassA *bc = [[ClassA alloc] init];     </div><div class="line">NSUserDefaults *ud = [NSUserDefaults standardUserDefaults];     </div><div class="line">NSData *saveObject = [NSKeyedArchiver archivedDataWithRootObject:bc];     </div><div class="line">[ud setObject:saveObject forKey:@&quot;ClassA&quot;];     </div><div class="line">//下面是取出</div><div class="line">NSData *getObject = [ud objectForKey:@&quot;myBusinessCard&quot;];    </div><div class="line">ClassA *bcNew = [[ClassA alloc] init];   </div><div class="line">bcNew = [NSKeyedUnarchiver unarchiveObjectWithData:getObject] ;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;NSUserDefaults简介&quot;&gt;&lt;a href=&quot;#NSUserDefaults简介&quot; class=&quot;headerlink&quot; title=&quot;NSUserDefaults简介&quot;&gt;&lt;/a&gt;NSUserDefaults简介&lt;/h1&gt;&lt;p&gt;在Android和ios都提
    
    </summary>
    
      <category term="ios" scheme="http://www.xiangzhihong.com/categories/ios/"/>
    
    
      <category term="ios" scheme="http://www.xiangzhihong.com/tags/ios/"/>
    
      <category term="Xcode" scheme="http://www.xiangzhihong.com/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>Swift基础语法</title>
    <link href="http://www.xiangzhihong.com/2016/11/05/Swift/"/>
    <id>http://www.xiangzhihong.com/2016/11/05/Swift/</id>
    <published>2016-11-04T16:00:00.000Z</published>
    <updated>2017-07-10T01:32:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文来自Swift中文开发组，感谢翻译者的分享。<br>本文将分几部分对Swift对iOS的语法做讲解。本文为第一节，主要讲解基础语法。<br>常量和变量</p>
<p>常量和变量把一个名字（比如maximumNumberOfLoginAttempts或者welcomeMessage）和一个指定类型的值（比如数字10或者字符串”Hello”）关联起来。常量的值一旦设定就不能改变，而变量的值可以随意更改。<br>声明常量和变量</p>
<p>常量和变量必须在使用前声明，用let来声明常量，用var来声明变量。下面的例子展示了如何用常量和变量来记录用户尝试登录的次数：<br>[html] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let maximumNumberOfLoginAttempts = 10<br>var currentLoginAttempt = 0<br>这两行代码可以被理解为：“声明一个名字是maximumNumberOfLoginAttempts的新常量，并给它一个值10。然后，声明一个名字是currentLoginAttempt的变量并将它的值初始化为0.”</p>
<p>在这个例子中，允许的最大尝试登录次数被声明为一个常量，因为这个值不会改变。当前尝试登录次数被声明为一个变量，因为每次尝试登录失败的时候都需要增加这个值。</p>
<p>你可以在一行中声明多个常量或者多个变量，用逗号隔开：<br>[html] view plain copy print?在CODE上查看代码片派生到我的代码片<br>var x = 0.0, y = 0.0, z = 0.0<br>注意：如果你的代码中有不需要改变的值，请使用let关键字将它声明为常量。只将需要改变的值声明为变量。<br>类型标注</p>
<p>当你声明常量或者变量的时候可以加上类型标注(type annotation)，说明常量或者变量中要存储的值的类型。如果要添加类型标注，需要在常量或者变量名后面加上一个冒号和空格，然后加上类型名称。</p>
<p>这个例子给welcomeMessage变量添加了类型标注，表示这个变量可以存储String类型的值：<br>[html] view plain copy print?在CODE上查看代码片派生到我的代码片<br>var welcomeMessage: String<br>声明中的冒号代表着“是…类型”，所以这行代码可以被理解为：“声明一个类型为String，名字为welcomeMessage的变量。”</p>
<p>“类型为String”的意思是“可以存储任意String类型的值。”</p>
<p>welcomeMessage变量现在可以被设置成任意字符串：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>welcomeMessage = “Hello”<br>注意：一般来说你很少需要写类型标注。如果你在声明常量或者变量的时候赋了一个初始值，Swift可以推断出这个常量或者变量的类型，请参考类型安全和类型推断。在上面的例子中，没有给welcomeMessage赋初始值，所以变量welcomeMessage的类型是通过一个类型标注指定的，而不是通过初始值推断的。<br>常量和变量的命名</p>
<p>你可以用任何你喜欢的字符作为常量和变量名，包括 Unicode 字符：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let π = 3.14159<br>let 你好 = “你好世界”<br>常量与变量名不能包含数学符号，箭头，保留的（或者非法的）Unicode 码位，连线与制表符。也不能以数字开头，但是可以在常量与变量名的其他地方包含数字。</p>
<p>一旦你将常量或者变量声明为确定的类型，你就不能使用相同的名字再次进行声明，或者改变其存储的值的类型。同时，你也不能将常量与变量进行互转。<br>注意：如果你需要使用与Swift保留关键字相同的名称作为常量或者变量名，你可以使用反引号（`）将关键字包围的方式将其作为名字使用。无论如何，你应当避免使用关键字作为常量或变量名，除非你别无选择。<br>你可以更改现有的变量值为其他同类型的值，在下面的例子中，friendlyWelcome的值从”Hello!”改为了”Bonjour!”:<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>var friendlyWelcome = “Hello!”<br>friendlyWelcome = “Bonjour!”<br>// friendlyWelcome 现在是 “Bonjour!”<br>与变量不同，常量的值一旦被确定就不能更改了。尝试这样做会导致编译时报错：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let languageName = “Swift”<br>languageName = “Swift++”<br>// 这会报编译时错误 - languageName 不可改变<br>输出常量和变量</p>
<p>你可以用println函数来输出当前常量或变量的值:<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>println(friendlyWelcome) // 输出 “Bonjour!”<br>println是一个用来输出的全局函数，输出的内容会在最后换行。如果你用 Xcode，println将会输出内容到“console”面板上。(另一种函数叫print，唯一区别是在输出内容最后不会换行。)</p>
<p>println函数输出传入的String值：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>println(“This is a string”) // 输出 “This is a string”<br>与 Cocoa 里的NSLog函数类似的是，println函数可以输出更复杂的信息。这些信息可以包含当前常量和变量的值。</p>
<p>Swift 用字符串插值（string interpolation）的方式把常量名或者变量名当做占位符加入到长字符串中，Swift 会用当前常量或变量的值替换这些占位符。将常量或变量名放入圆括号中，并在开括号前使用反斜杠将其转义：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>println(“The current value of friendlyWelcome is (friendlyWelcome)”)<br>// 输出 “The current value of friendlyWelcome is Bonjour!<br>注意：字符串插值所有可用的选项，请参考字符串插值。</p>
<p>注释</p>
<p>请将你的代码中的非执行文本注释成提示或者笔记以方便你将来阅读。Swift 的编译器将会在编译代码时自动忽略掉注释部分。</p>
<p>Swift 中的注释与C 语言的注释非常相似。单行注释以双正斜杠作(//)为起始标记；<br>// 这是一个注释<br>你也可以进行多行注释，其起始标记为单个正斜杠后跟随一个星号(/<em>)，终止标记为一个星号后跟随单个正斜杠(</em>/)<br>/<em> 这是一个, 多行注释 </em>/<br>与C 语言多行注释不同，Swift 的多行注释可以嵌套在其它的多行注释之中。你可以先生成一个多行注释块，然后在这个注释块之中再嵌套成第二个多行注释。终止注释时先插入第二个注释块的终止标记，然后再插入第一个注释块的终止标记：<br>/<em> 这是第一个多行注释的开头<br>/</em> 这是第二个被嵌套的多行注释 <em>/<br>这是第一个多行注释的结尾 </em>/<br>通过运用嵌套多行注释，你可以快速方便的注释掉一大段代码，即使这段代码之中已经含有了多行注释块。</p>
<p>分号</p>
<p>与其他大部分编程语言不同，Swift 并不强制要求你在每条语句的结尾处使用分号（;），当然，你也可以按照你自己的习惯添加分号。有一种情况下必须要用分号，即你打算在同一行内写多条独立的语句：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let cat = “<br>整数</p>
<p>整数就是没有小数部分的数字，比如42和-23。整数可以是有符号（正、负、零）或者无符号（正、零）。</p>
<p>Swift 提供了8，16，32和64位的有符号和无符号整数类型。这些整数类型和 C 语言的命名方式很像，比如8位无符号整数类型是UInt8，32位有符号整数类型是Int32。就像 Swift 的其他类型一样，整数类型采用大写命名法。<br>整数范围</p>
<p>你可以访问不同整数类型的min和max属性来获取对应类型的最大值和最小值：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let minValue = UInt8.min // minValue 为 0，是 UInt8 类型的最小值<br>let maxValue = UInt8.max // maxValue 为 255，是 UInt8 类型的最大值<br>Int</p>
<p>一般来说，你不需要专门指定整数的长度。Swift 提供了一个特殊的整数类型Int，长度与当前平台的原生字长相同：<br>在32位平台上，Int和Int32长度相同。<br>在64位平台上，Int和Int64长度相同。</p>
<p>除非你需要特定长度的整数，一般来说使用Int就够了。这可以提高代码一致性和可复用性。即使是在32位平台上，Int可以存储的整数范围也可以达到-2147483648~2147483647，大多数时候这已经足够大了。<br>UInt</p>
<p>Swift 也提供了一个特殊的无符号类型UInt，长度与当前平台的原生字长相同：<br>在32位平台上，UInt和UInt32长度相同。<br>在64位平台上，UInt和UInt64长度相同。<br>注意：尽量不要使用UInt，除非你真的需要存储一个和当前平台原生字长相同的无符号整数。除了这种情况，最好使用Int，即使你要存储的值已知是非负的。统一使用Int可以提高代码的可复用性，避免不同类型数字之间的转换，并且匹配数字的类型推测，请参考类型安全和类型推测。<br>浮点数</p>
<p>浮点数是有小数部分的数字，比如3.14159，0.1和-273.15。</p>
<p>浮点类型比整数类型表示的范围更大，可以存储比Int类型更大或者更小的数字。Swift 提供了两种有符号浮点数类型：<br>Double表示64位浮点数。当你需要存储很大或者很高精度的浮点数时请使用此类型。<br>Float表示32位浮点数。精度要求不高的话可以使用此类型。<br>注意：Double精确度很高，至少有15位数字，而Float最少只有6位数字。选择哪个类型取决于你的代码需要处理的值的范围。<br>类型安全和类型推测</p>
<p>Swift 是一个类型安全(type safe )的语言。类型安全的语言可以让你清楚地知道代码要处理的值的类型。如果你的代码需要一个String，你绝对不可能不小心传进去一个Int。</p>
<p>由于 Swift 是类型安全的，所以它会在编译你的代码时进行类型检查(type checks)，并把不匹配的类型标记为错误。这可以让你在开发的时候尽早发现并修复错误。</p>
<p>当你要处理不同类型的值时，类型检查可以帮你避免错误。然而，这并不是说你每次声明常量和变量的时候都需要显式指定类型。如果你没有显式指定类型，Swift 会使用类型推测(type inference)来选择合适的类型。有了类型推测，编译器可以在编译代码的时候自动推测出表达式的类型。原理很简单，只要检查你赋的值即可。</p>
<p>因为有类型推测，和 C 或者 Objective-C 比起来 Swift 很少需要声明类型。常量和变量虽然需要明确类型，但是大部分工作并不需要你自己来完成。</p>
<p>当你声明常量或者变量并赋初值的时候类型推测非常有用。当你在声明常量或者变量的时候赋给它们一个字面量(literal value 或 literal)即可触发类型推测。（字面量就是会直接出现在你代码中的值，比如42和3.14159。）</p>
<p>例如，如果你给一个新常量赋值42并且没有标明类型，Swift 可以推测出常量类型是Int，因为你给它赋的初始值看起来像一个整数：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let meaningOfLife = 42 // meaningOfLife 会被推测为 Int 类型<br>同理，如果你没有给浮点字面量标明类型，Swift 会推测你想要的是Double：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let pi = 3.14159 // pi 会被推测为 Double 类型<br>当推测浮点数的类型时，Swift 总是会选择Double而不是Float。</p>
<p>如果表达式中同时出现了整数和浮点数，会被推测为Double类型：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let anotherPi = 3 + 0.14159 // anotherPi 会被推测为 Double 类型<br>原始值3没有显式声明类型，而表达式中出现了一个浮点字面量，所以表达式会被推测为Double类型。<br>数值型字面量</p>
<p>整数字面量可以被写作：<br>一个十进制数，没有前缀<br>一个二进制数，前缀是0b<br>一个八进制数，前缀是0o<br>一个十六进制数，前缀是0x</p>
<p>下面的所有整数字面量的十进制值都是17:<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let decimalInteger = 17<br>let binaryInteger = 0b10001 // 二进制的17<br>let octalInteger = 0o21 // 八进制的17<br>let hexadecimalInteger = 0x11 // 十六进制的17<br>浮点字面量可以是十进制（没有前缀）或者是十六进制（前缀是0x）。小数点两边必须有至少一个十进制数字（或者是十六进制的数字）。浮点字面量还有一个可选的指数(exponent)，在十进制浮点数中通过大写或者小写的e来指定，在十六进制浮点数中通过大写或者小写的p来指定。</p>
<p>如果一个十进制数的指数为exp，那这个数相当于基数和$10^{exp}$的乘积：<br>1.25e2 表示 $1.25 × 10^{2}$，等于 125.0。<br>1.25e-2 表示 $1.25 × 10^{-2}$，等于 0.0125。</p>
<p>如果一个十六进制数的指数为exp，那这个数相当于基数和$2^{exp}$的乘积：<br>0xFp2 表示 $15 × 2^{2}$，等于 60.0。<br>0xFp-2 表示 $15 × 2^{-2}$，等于 3.75。</p>
<p>下面的这些浮点字面量都等于十进制的12.1875：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let decimalDouble = 12.1875<br>let exponentDouble = 1.21875e1<br>let hexadecimalDouble = 0xC.3p0<br>数值类字面量可以包括额外的格式来增强可读性。整数和浮点数都可以添加额外的零并且包含下划线，并不会影响字面量：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let paddedDouble = 000123.456<br>let oneMillion = 1_000_000<br>let justOverOneMillion = 1_000_000.000_000_1<br>数值型类型转换</p>
<p>通常来讲，即使代码中的整数常量和变量已知非负，也请使用Int类型。总是使用默认的整数类型可以保证你的整数常量和变量可以直接被复用并且可以匹配整数类字面量的类型推测。 只有在必要的时候才使用其他整数类型，比如要处理外部的长度明确的数据或者为了优化性能、内存占用等等。使用显式指定长度的类型可以及时发现值溢出并且可以暗示正在处理特殊数据。<br>整数转换</p>
<p>不同整数类型的变量和常量可以存储不同范围的数字。Int8类型的常量或者变量可以存储的数字范围是-128~127，而UInt8类型的常量或者变量能存储的数字范围是0~255。如果数字超出了常量或者变量可存储的范围，编译的时候会报错：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let cannotBeNegative: UInt8 = -1 // UInt8 类型不能存储负数，所以会报错<br>let tooBig: Int8 = Int8.max + 1 // Int8 类型不能存储超过最大值的数，所以会报错<br>由于每中整数类型都可以存储不同范围的值，所以你必须根据不同情况选择性使用数值型类型转换。这种选择性使用的方式，可以预防隐式转换的错误并让你的代码中的类型转换意图变得清晰。</p>
<p>要将一种数字类型转换成另一种，你要用当前值来初始化一个期望类型的新数字，这个数字的类型就是你的目标类型。在下面的例子中，常量twoThousand是UInt16类型，然而常量one是Uint8类型。它们不能直接相加，因为它们类型不同。所以要调用UInt16(one)来创建一个新的UInt16数字并用one的值来初始化，然后使用这个新数字来计算：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let twoThousand: UInt16 = 2_000<br>let one: UInt8 = 1<br>let twoThousandAndOne = twoThousand + UInt16(one)<br>现在两个数字的类型都是UInt16，可以进行相加。目标常量twoThousandAndOne的类型被推测为UInt16，因为它是两个UInt16值的和。</p>
<p>SomeType(ofInitialValue)是调用 Swift 构造器并传入一个初始值的默认方法。在语言内部，UInt16有一个构造器，可以接受一个UInt8类型的值，所以这个构造器可以用现有的UInt8来创建一个新的UInt16。注意，你并不能传入任意类型的值，只能传入UInt16内部有对应构造器的值。不过你可以扩展现有的类型来让它可以接收其他类型的值（包括自定义类型），请参考扩展。<br>整数和浮点数转换</p>
<p>整数和浮点数的转换必须显式指定类型：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let three = 3<br>let pointOneFourOneFiveNine = 0.14159<br>let pi = Double(three) + pointOneFourOneFiveNine<br>// pi 等于 3.14159，所以被推测为 Double 类型<br>这个例子中，常量three的值被用来创建一个Double类型的值，所以加号两边的数类型相同。如果不进行转换，两者无法相加。</p>
<p>浮点数到整数的反向转换同样行，整数类型可以用Double或者Float类型来初始化：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let integerPi = Int(pi) // integerPi 等于 3，所以被推测为 Int 类型<br>当用这种方式来初始化一个新的整数值时，浮点值会被截断。也就是说4.75会变成4，-3.9会变成-3。<br>注意：结合数字类常量和变量不同于结合数字类字面量。字面量3可以直接和字面量0.14159相加，因为数字字面量本身没有明确的类型。它们的类型只在编译器需要求值的时候被推测。<br>类型别名</p>
<p>类型别名(type aliases)就是给现有类型定义另一个名字。你可以使用typealias关键字来定义类型别名。</p>
<p>当你想要给现有类型起一个更有意义的名字时，类型别名非常有用。假设你正在处理特定长度的外部资源的数据：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>typealias AudioSample = UInt16<br>定义了一个类型别名之后，你可以在任何使用原始名的地方使用别名：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>var maxAmplitudeFound = AudioSample.min // maxAmplitudeFound 现在是 0<br>本例中，AudioSample被定义为UInt16的一个别名。因为它是别名，AudioSample.min实际上是UInt16.min，所以会给maxAmplitudeFound赋一个初值0。<br>布尔值</p>
<p>Swift 有一个基本的布尔(Boolean)类型，叫做Bool。布尔值指逻辑上的(logical)，因为它们只能是真或者假。Swift 有两个布尔常量，true和false：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let orangesAreOrange = true<br>let turnipsAreDelicious = false<br>orangesAreOrange和turnipsAreDelicious的类型会被推测为Bool，因为它们的初值是布尔字面量。就像之前提到的Int和Double一样，如果你创建变量的时候给它们赋值true或者false，那你不需要将常量或者变量声明为Bool类型。初始化常量或者变量的时候如果所赋的值类型已知，就可以触发类型推测，这让 Swift 代码更加简洁并且可读性更高。</p>
<p>当你编写条件语句比如if语句的时候，布尔值非常有用：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>if turnipsAreDelicious {<br>    println(“Mmm, tasty turnips!”)<br>} else {<br>    println(“Eww, turnips are horrible.”)<br>}<br>// 输出 “Eww, turnips are horrible.”<br>条件语句，例如if，请参考控制流。</p>
<p>如果你在需要使用Bool类型的地方使用了非布尔值，Swift 的类型安全机制会报错。下面的例子会报告一个编译时错误：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let i = 1 if i { // 这个例子不会通过编译，会报错 }<br>然而，下面的例子是合法的：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let i = 1 if i == 1 { // 这个例子会编译成功 }<br>i == 1的比较结果是Bool类型，所以第二个例子可以通过类型检查。类似i == 1这样的比较，请参考基本操作符。</p>
<p>和 Swift 中的其他类型安全的例子一样，这个方法可以避免错误并保证这块代码的意图总是清晰的。<br>元组</p>
<p>元组（tuples）把多个值组合成一个复合值。元组内的值可以使任意类型，并不要求是相同类型。</p>
<p>下面这个例子中，(404, “Not Found”)是一个描述 HTTP 状态码（HTTP status code）的元组。HTTP 状态码是当你请求网页的时候 web 服务器返回的一个特殊值。如果你请求的网页不存在就会返回一个404 Not Found状态码。<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let http404Error = (404, “Not Found”) // http404Error 的类型是 (Int, String)，值是 (404, “Not Found”)<br>(404, “Not Found”)元组把一个Int值和一个String值组合起来表示 HTTP 状态码的两个部分：一个数字和一个人类可读的描述。这个元组可以被描述为“一个类型为(Int, String)的元组”。</p>
<p>你可以把任意顺序的类型组合成一个元组，这个元组可以包含所有类型。只要你想，你可以创建一个类型为(Int, Int, Int)或者(String, Bool)或者其他任何你想要的组合的元组。</p>
<p>你可以将一个元组的内容分解（decompose）成单独的常量和变量，然后你就可以正常使用它们了：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let (statusCode, statusMessage) = http404Error<br>println(“The status code is (statusCode)”)<br>// 输出 “The status code is 404”<br>println(“The status message is (statusMessage)”)<br>// 输出 “The status message is Not Found”<br>如果你只需要一部分元组值，分解的时候可以把要忽略的部分用下划线（<em>）标记：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let (justTheStatusCode, </em>) = http404Error<br>println(“The status code is (justTheStatusCode)”)<br>// 输出 “The status code is 404”<br>此外，你还可以通过下标来访问元组中的单个元素，下标从零开始：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>println(“The status code is (http404Error.0)”) // 输出 “The status code is 404”<br>println(“The status message is (http404Error.1)”) // 输出 “The status message is Not Found”<br>你可以在定义元组的时候给单个元素命名：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let http200Status = (statusCode: 200, description: “OK”)<br>给元组中的元素命名后，你可以通过名字来获取这些元素的值：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>println(“The status code is (http200Status.statusCode)”) // 输出 “The status code is 200”<br>println(“The status message is (http200Status.description)”) // 输出 “The status message is OK”<br>作为函数返回值时，元组非常有用。一个用来获取网页的函数可能会返回一个(Int, String)元组来描述是否获取成功。和只能返回一个类型的值比较起来，一个包含两个不同类型值的元组可以让函数的返回信息更有用。请参考[函数参数与返回值(06_Functions.html#Function_Parameters_and_Return_Values)。<br>注意：元组在临时组织值的时候很有用，但是并不适合创建复杂的数据结构。如果你的数据结构并不是临时使用，请使用类或者结构体而不是元组。请参考类和结构体。<br>可选</p>
<p>使用可选（optionals）来处理值可能缺失的情况。可选表示：<br>有值，等于 x<br>或者<br>没有值<br>注意：C 和 Objective-C 中并没有可选这个概念。最接近的是 Objective-C 中的一个特性，一个方法要不返回一个对象要不返回nil，nil表示“缺少一个合法的对象”。然而，这只对对象起作用——对于结构体，基本的 C 类型或者枚举类型不起作用。对于这些类型，Objective-C 方法一般会返回一个特殊值（比如NSNotFound）来暗示值缺失。这种方法假设方法的调用者知道并记得对特殊值进行判断。然而，Swift 的可选可以让你暗示任意类型的值缺失，并不需要一个特殊值。<br>来看一个例子。Swift 的String类型有一个叫做toInt的方法，作用是将一个String值转换成一个Int值。然而，并不是所有的字符串都可以转换成一个整数。字符串”123”可以被转换成数字123，但是字符串”hello, world”不行。</p>
<p>下面的例子使用toInt方法来尝试将一个String转换成Int：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let possibleNumber = “123”<br>let convertedNumber = possibleNumber.toInt()<br>// convertedNumber 被推测为类型 “Int?”， 或者类型 “optional Int”<br>因为toInt方法可能会失败，所以它返回一个可选的（optional）Int，而不是一个Int。一个可选的Int被写作Int?而不是Int。问号暗示包含的值是可选，也就是说可能包含Int值也可能不包含值。（不能包含其他任何值比如Bool值或者String值。只能是Int或者什么都没有。）<br>if 语句以及强制解析</p>
<p>你可以使用if语句来判断一个可选是否包含值。如果可选有值，结果是true；如果没有值，结果是false。</p>
<p>当你确定可选包确实含值之后，你可以在可选的名字后面加一个感叹号(!)来获取值。这个惊叹号表示“我知道这个可选有值，请使用它。”这被称为可选值的强制解析（forced unwrapping）：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>if convertedNumber {<br>    println(“(possibleNumber) has an integer value of (convertedNumber!)”)<br>} else {<br>    println(“(possibleNumber) could not be converted to an integer”)<br>}<br>// 输出 “123 has an integer value of 123”<br>更多关于if语句的内容，请参考控制流。<br>注意：使用!来获取一个不存在的可选值会导致运行时错误。使用!来强制解析值之前，一定要确定可选包含一个非nil的值。<br>可选绑定</p>
<p>使用可选绑定（optional binding）来判断可选是否包含值，如果包含就把值赋给一个临时常量或者变量。可选绑定可以用在if和while语句中来对可选的值进行判断并把值赋给一个常量或者变量。if和while语句，请参考控制流。</p>
<p>像下面这样在if语句中写一个可选绑定：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>if let constantName = someOptional { statements }<br>你可以像上面这样使用可选绑定来重写possibleNumber这个例子：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>if let actualNumber = possibleNumber.toInt() {<br>    println(“(possibleNumber) has an integer value of (actualNumber)”)<br>} else {<br>    println(“(possibleNumber) could not be converted to an integer”)<br>}<br>// 输出 “123 has an integer value of 123”<br>这段代码可以被理解为：“如果possibleNumber.toInt返回的可选Int包含一个值，创建一个叫做actualNumber的新常量并将可选包含的值赋给它。”</p>
<p>如果转换成功，actualNumber常量可以在if语句的第一个分支中使用。它已经被可选包含的值初始化过，所以不需要再使用!后缀来获取它的值。在这个例子中，actualNumber只被用来输出转换结果。</p>
<p>你可以在可选绑定中使用常量和变量。如果你想在if语句的第一个分支中操作actualNumber的值，你可以改成if var actualNumber，这样可选包含的值就会被赋给一个变量而非常量。<br>nil</p>
<p>你可以给可选变量赋值为nil来表示它没有值：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>var serverResponseCode: Int? = 404  // serverResponseCode 包含一个可选的 Int 值 404<br>serverResponseCode = nil // serverResponseCode 现在不包含值<br>注意：nil不能用于非可选的常量和变量。如果你的代码中有常量或者变量需要处理值缺失的情况，请把它们声明成对应的可选类型。<br>如果你声明一个可选常量或者变量但是没有赋值，它们会自动被设置为nil：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>var surveyAnswer: String? // surveyAnswer 被自动设置为 nil</p>
<p>注意：Swift 的nil和 Objective-C 中的nil并不一样。在 Objective-C 中，nil是一个指向不存在对象的指针。在 Swift 中，nil不是指针——它是一个确定的值，用来表示值缺失。任何类型的可选都可以被设置为nil，不只是对象类型。<br>隐式解析可选</p>
<p>如上所述，可选暗示了常量或者变量可以“没有值”。可选可以通过if语句来判断是否有值，如果有值的话可以通过可选绑定来解析值。</p>
<p>有时候在程序架构中，第一次被赋值之后，可以确定一个可选总会有值。在这种情况下，每次都要判断和解析可选值是非常低效的，因为可以确定它总会有值。</p>
<p>这种类型的可选被定义为隐式解析可选（implicitly unwrapped optionals）。把想要用作可选的类型的后面的问号（String?）改成感叹号（String!）来声明一个隐式解析可选。</p>
<p>当可选被第一次赋值之后就可以确定之后一直有值的时候，隐式解析可选非常有用。隐式解析可选主要被用在 Swift 中类的构造过程中，请参考类实例之间的循环强引用。</p>
<p>一个隐式解析可选其实就是一个普通的可选，但是可以被当做非可选来使用，并不需要每次都使用解析来获取可选值。下面的例子展示了可选String和隐式解析可选String之间的区别：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>let possibleString: String? = “An optional string.”<br>println(possibleString!) // 需要惊叹号来获取值<br>// 输出 “An optional string.”<br>let assumedString: String! = “An implicitly unwrapped optional string.”<br>println(assumedString) // 不需要感叹号<br>// 输出 “An implicitly unwrapped optional string.”<br>你可以把隐式解析可选当做一个可以自动解析的可选。你要做的只是声明的时候把感叹号放到类型的结尾，而不是每次取值的可选名字的结尾。<br>注意：如果你在隐式解析可选没有值的时候尝试取值，会触发运行时错误。和你在没有值的普通可选后面加一个惊叹号一样。<br>你仍然可以把隐式解析可选当做普通可选来判断它是否包含值：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>if assumedString {<br>    println(assumedString)<br>}<br>// 输出 “An implicitly unwrapped optional string.”<br>你也可以在可选绑定中使用隐式解析可选来检查并解析它的值：<br>[objc] view plain copy print?在CODE上查看代码片派生到我的代码片<br>if let definiteString = assumedString {<br>    println(definiteString)<br>}<br>// 输出 “An implicitly unwrapped optional string.”<br>注意：如果一个变量之后可能变成nil的话请不要使用隐式解析可选。如果你需要在变量的生命周期中判断是否是nil的话，请使用普通可选类型。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文来自Swift中文开发组，感谢翻译者的分享。&lt;br&gt;本文将分几部分对Swift对iOS的语法做讲解。本文为第一节，主要讲解基础语法。&lt;br&gt;常量和变量&lt;/p&gt;
&lt;p&gt;常量和变量把一个名字（比如maximumNumberOfLoginAttempts或者welcomeMe
    
    </summary>
    
      <category term="ios" scheme="http://www.xiangzhihong.com/categories/ios/"/>
    
    
      <category term="ios" scheme="http://www.xiangzhihong.com/tags/ios/"/>
    
      <category term="swift" scheme="http://www.xiangzhihong.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>深入理解React Native页面构建渲染原理</title>
    <link href="http://www.xiangzhihong.com/2016/10/28/React%20%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86/"/>
    <id>http://www.xiangzhihong.com/2016/10/28/React 页面渲染原理/</id>
    <published>2016-10-27T16:00:00.000Z</published>
    <updated>2017-07-10T01:23:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>React Native 是最近非常火的一个话题，因为它的语法简介，跨平台等特性，赢得了各大平台的青睐，虽然前期是有一些坑。</p>
<h2 id="基本概念解释"><a href="#基本概念解释" class="headerlink" title="基本概念解释"></a>基本概念解释</h2><p>React 是一套可以用简洁的语法高效绘制 DOM 的框架，所谓的“高效”，是因为 React 独创了 Virtual DOM 机制。Virtual DOM 是一个存在于内存中的 JavaScript 对象，它与 DOM 是一一对应的关系，也就是说只要有 Virtual DOM，我们就能渲染出 DOM。当界面发生变化时，得益于高效的 DOM Diff 算法，我们能够知道 Virtual DOM 的变化，从而高效的改动 DOM，避免了重新绘制 DOM。</p>
<p>我们知道React是一个专注于 UI 部分框架，对应到 MVC 结构中就是 View 层。要想实现完整的 MVC 架构，还需要 Model 和 Controller 的结构。在前端开发时，我们可以采用 Flux 和 Redux 架构，它们并非框架(Library)，而是和 MVC 一样都是一种架构设计(Architecture)。</p>
<p> 我们知道React Native之所以能再Android/ios等移动设备上运行起来，是因为react native和原生设备之间有一种交互，以ios为例，JavaScript 的形式告诉 Objective-C需要执行什么，然后ios自己去调用 UIKit 等框架绘制界面。所以，React Native 能够运行起来，全靠 Objective-C 和 JavaScript 的交互。</p>
<p>我们知道 C 系列的语言，经过编译，链接等操作后，会得到一个二进制格式的可执行文，所谓的运行程序，其实是运行这个二进制程序。而 JavaScript 是一种脚本语言，它不会经过编译、链接等操作，而是在运行时才动态的进行词法、语法分析，生成抽象语法树(AST)和字节码，然后由解释器负责执行或者使用 JIT 将字节码转化为机器码再执行。整个流程由 JavaScript 引擎负责完成。</p>
<p>苹果提供了一个叫做 JavaScript Core 的框架，这是一个 JavaScript 引擎。通过下面这段代码可以简单的感受一下 Objective-C 如何调用 JavaScript 代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">JSContext *context = [[JSContext alloc] init];  </div><div class="line">JSValue *jsVal = [context evaluateScript:@&quot;21+7&quot;];  </div><div class="line">int iVal = [jsVal toInt32];</div></pre></td></tr></table></figure>
<p>JavaScript 是一种单线程的语言，它不具备自运行的能力，因此总是被动调用。很多介绍 React Native 的文章都会提到 “JavaScript 线程” 的概念，实际上，它表示的是 Objective-C 创建了一个单独的线程，这个线程只用于执行 JavaScript 代码，而且 JavaScript 代码只会在这个线程中执行。<br>要完全理解JavaScript和Objective-C之前的交互，可以看我之前关于这方面吗的介绍<a href="http://blog.csdn.net/xiangzhihong8/article/details/53366501" target="_blank" rel="external">React native和原生之间的通信</a></p>
<h1 id="React-Native源码剖析"><a href="#React-Native源码剖析" class="headerlink" title="React Native源码剖析"></a>React Native源码剖析</h1><p>在解释React Native的也没渲染原理之前，我们先看几个概念。</p>
<h2 id="ReactElement和ReactClass"><a href="#ReactElement和ReactClass" class="headerlink" title="ReactElement和ReactClass"></a>ReactElement和ReactClass</h2><p><strong>ReactElement</strong><br>一个描述DOM节点或component实例的字面级对象。它包含一些信息，包括组件类型 type 和属性 props 。就像一个描述DOM节点的元素（虚拟节点）。它们可以被创建通过 React.createElement 方法或 jsx 写法。<br>ReactElement分为 DOM Element 和 Component Elements 两类：<br>DOM Elements实例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  type: &apos;button&apos;,</div><div class="line">  props: &#123;</div><div class="line">    className: &apos;button button-blue&apos;,</div><div class="line">    children: &#123;</div><div class="line">      type: &apos;b&apos;,</div><div class="line">      props: &#123;</div><div class="line">        children: &apos;OK!&apos;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Component Elements</strong><br>当节点的type属性为一个函数或一个类时，它代表自定义的节点。<br>Component Elements实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class Button extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    const &#123; children, color &#125; = this.props;</div><div class="line">    return &#123;</div><div class="line">      type: &apos;button&apos;,</div><div class="line">      props: &#123;</div><div class="line">        className: &apos;button button-&apos; + color,</div><div class="line">        children: &#123;</div><div class="line">          type: &apos;b&apos;,</div><div class="line">          props: &#123;</div><div class="line">            children: children</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Component Elements</div><div class="line">&#123;</div><div class="line">  type: Button,</div><div class="line">  props: &#123;</div><div class="line">    color: &apos;blue&apos;,</div><div class="line">    children: &apos;OK!&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="ReactClass"><a href="#ReactClass" class="headerlink" title="ReactClass"></a>ReactClass</h2><p>ReactClass是平时我们写的Component组件(类或函数)，例如上面的 Button 类。ReactClass实例化后调用render方法可返回 DOM Element 。<br><img src="http://img.blog.csdn.net/20170114225727446?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>如上图所示：</p>
<ol>
<li>调用 React.render 方法，将我们的 element 根虚拟节点渲染到 container 元素中。element 可以是一个字符串文本元素，也可以是如上介绍的 ReactElement 。</li>
<li>根据 element 的类型不同，分别实例化 ReactDOMTextComponent , ReactDOMComponent , ReactCompositeComponent 类。这些类用来管理 ReactElement ,负责将不同的 ReactElement 转化成DOM，并更新DOM。</li>
<li>ReactCompositeComponent 实例调用 mountComponent 方法后内部调用 render 方法，返回了 DOM Elements 。再对如图的步骤:two:递归。<h2 id="React-Native工作原理介绍"><a href="#React-Native工作原理介绍" class="headerlink" title="React Native工作原理介绍"></a>React Native工作原理介绍</h2>要想深入理解 React Native 的工作原理，有两个阶段必须了解：初始化阶段和方法调用阶段。<h3 id="初始化-React-Native"><a href="#初始化-React-Native" class="headerlink" title="初始化 React Native"></a>初始化 React Native</h3>每个项目都有一个入口，然后进行初始化操作，React Native 也不例外。一个不含 Objective-C 代码的项目留给我们的唯一线索就是位于 AppDelegate 文件中，用户能看到的一切内容都来源于这个 RootView ，所有的初始化工作也都在这个方法内完成。</li>
</ol>
<p>在这个方法内部，在创建 RootView 之前，React Native 实际上先创建了一个 Bridge 对象。它是 Objective-C 与 JavaScript 交互的桥梁，后续的方法交互完全依赖于它，而整个初始化过程的最终目的其实也就是创建这个桥梁对象。<br>初始化方法的核心是 setUp 方法，而 setUp 方法的主要任务则是创建 BatchedBridge 。BatchedBridge 的作用是批量读取 JavaScript 对 Objective-C 的方法调用，同时它内部持有一个 JavaScriptExecutor 。创建 BatchedBridge 的关键是 start 方法，它可以分为五个步骤：</p>
<ul>
<li>读取 JavaScript 源码</li>
<li>初始化模块信息</li>
<li>初始化 JavaScript 代码的执行器，即 RCTJSCExecutor 对象</li>
<li>生成模块列表并写入 JavaScript 端</li>
<li>执行 JavaScript 源码<h3 id="JavaScript-调用-Objective-C"><a href="#JavaScript-调用-Objective-C" class="headerlink" title="JavaScript 调用 Objective-C"></a>JavaScript 调用 Objective-C</h3>在调用 Objective-C 代码时，如前文所述，JavaScript 会解析出方法的 ModuleId 、 MethodId 和 Arguments 并放入到 MessageQueue 中，等待 Objective-C 主动拿走，或者超时后主动发送给 Objective-C。</li>
</ul>
<p>Objective-C 负责处理调用的方法是 handleBuffer ，它的参数是一个含有四个元素的数组，每个元素也都是一个数组，分别存放了 ModuleId 、 MethodId 、 Params ，第四个元素目测用处不大。<br>函数内部在每一次方调用中调用 _handleRequestNumber:moduleID:methodID:params 方法。，通过查找模块配置表找出要调用的方法，并通过 runtime 动态的调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[method invokeWithBridge:self module:moduleData.instance arguments:params];</div></pre></td></tr></table></figure>
<p>processMethodSignature ，它会根据 JavaScript 的 CallbackId 创建一个 Block，并且在调用完函数后执行这个 Block。</p>
<h2 id="React-Native更新机制"><a href="#React-Native更新机制" class="headerlink" title="React Native更新机制"></a>React Native更新机制</h2><p><img src="http://img.blog.csdn.net/20170114231157469?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>之前我们说过，React是有个状态机这么一说的，就是不行的去检查当前的状态，是否需要刷新。</p>
<h3 id="调用this-setState"><a href="#调用this-setState" class="headerlink" title="调用this.setState"></a>调用this.setState</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ReactClass.prototype.setState = function(newState) &#123;</div><div class="line">    this._reactInternalInstance.receiveComponent(null, newState);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="调用内部receiveComponent方法"><a href="#调用内部receiveComponent方法" class="headerlink" title="调用内部receiveComponent方法"></a>调用内部receiveComponent方法</h3><p>这里在接受元素的时候主要分三种情况，文本元素，基本元素，自定义元素。<br><strong>自定义元素</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ReactCompositeComponent.prototype.receiveComponent = function(nextElement, transaction, nextContext) &#123;</div><div class="line">    var prevElement = this._currentElement;</div><div class="line">    var prevContext = this._context;</div><div class="line"></div><div class="line">    this._pendingElement = null;</div><div class="line"></div><div class="line">    this.updateComponent(</div><div class="line">      transaction,</div><div class="line">      prevElement,</div><div class="line">      nextElement,</div><div class="line">      prevContext,</div><div class="line">      nextContext</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>updateComponent</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ReactCompositeComponent.prototype.updateComponent = function(</div><div class="line">    transaction,</div><div class="line">    prevParentElement,</div><div class="line">    nextParentElement,</div><div class="line">    prevUnmaskedContext,</div><div class="line">    nextUnmaskedContext</div><div class="line">)&#123;</div><div class="line">//省略</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用内部_performComponentUpdate方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">ReactCompositeComponent.prototype._updateRenderedComponentWithNextElement = function() &#123;</div><div class="line">   </div><div class="line">   // 判定两个element需不需要更新</div><div class="line">   if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) &#123;</div><div class="line">     // 如果需要更新，就继续调用子节点的receiveComponent的方法，传入新的element更新子节点。</div><div class="line">     ReactReconciler.receiveComponent(</div><div class="line">       prevComponentInstance,</div><div class="line">       nextRenderedElement,</div><div class="line">       transaction,</div><div class="line">       this._processChildContext(context)</div><div class="line">     );</div><div class="line">   &#125; else &#123;</div><div class="line">     // 卸载之前的子节点，安装新的子节点</div><div class="line">     var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);</div><div class="line">     ReactReconciler.unmountComponent(</div><div class="line">       prevComponentInstance,</div><div class="line">       safely,</div><div class="line">       false /* skipLifecycle */</div><div class="line">     );</div><div class="line"></div><div class="line">     var nodeType = ReactNodeTypes.getType(nextRenderedElement);</div><div class="line">     this._renderedNodeType = nodeType;</div><div class="line">     var child = this._instantiateReactComponent(</div><div class="line">       nextRenderedElement,</div><div class="line">       nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */</div><div class="line">     );</div><div class="line">     this._renderedComponent = child;</div><div class="line"></div><div class="line">     var nextMarkup = ReactReconciler.mountComponent(</div><div class="line">       child,</div><div class="line">       transaction,</div><div class="line">       this._hostParent,</div><div class="line">       this._hostContainerInfo,</div><div class="line">       this._processChildContext(context),</div><div class="line">       debugID</div><div class="line">     );</div><div class="line">   </div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><strong>文本元素</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">ReactDOMTextComponent.prototype.receiveComponent(nextText, transaction) &#123;</div><div class="line">     //跟以前保存的字符串比较</div><div class="line">    if (nextText !== this._currentElement) &#123;</div><div class="line">      this._currentElement = nextText;</div><div class="line">      var nextStringText = &apos;&apos; + nextText;</div><div class="line">      if (nextStringText !== this._stringText) &#123;</div><div class="line">        this._stringText = nextStringText;</div><div class="line">        var commentNodes = this.getHostNode();</div><div class="line">        // 替换文本元素</div><div class="line">        DOMChildrenOperations.replaceDelimitedText(</div><div class="line">          commentNodes[0],</div><div class="line">          commentNodes[1],</div><div class="line">          nextStringText</div><div class="line">        );</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><strong>基本元素</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ReactDOMComponent.prototype.receiveComponent = function(nextElement, transaction, context) &#123;</div><div class="line">    var prevElement = this._currentElement;</div><div class="line">    this._currentElement = nextElement;</div><div class="line">    this.updateComponent(transaction, prevElement, nextElement, context);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>updateComponent</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ReactDOMComponent.prototype.updateComponent = function(transaction, prevElement, nextElement, context) &#123;</div><div class="line">    // 略.....</div><div class="line">    //需要单独的更新属性</div><div class="line">    this._updateDOMProperties(lastProps, nextProps, transaction, isCustomComponentTag);</div><div class="line">    //再更新子节点</div><div class="line">    this._updateDOMChildren(</div><div class="line">      lastProps,</div><div class="line">      nextProps,</div><div class="line">      transaction,</div><div class="line">      context</div><div class="line">    );</div><div class="line"></div><div class="line">    // ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>this._updateDOMChildren 方法内部调用diff算法。<br><img src="http://img.blog.csdn.net/20170114232522307?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">_updateChildren: function(nextNestedChildrenElements, transaction, context) &#123;</div><div class="line">    var prevChildren = this._renderedChildren;</div><div class="line">    var removedNodes = &#123;&#125;;</div><div class="line">    var mountImages = [];</div><div class="line">    </div><div class="line">    // 获取新的子元素数组</div><div class="line">    var nextChildren = this._reconcilerUpdateChildren(</div><div class="line">      prevChildren,</div><div class="line">      nextNestedChildrenElements,</div><div class="line">      mountImages,</div><div class="line">      removedNodes,</div><div class="line">      transaction,</div><div class="line">      context</div><div class="line">    );</div><div class="line">    </div><div class="line">    if (!nextChildren &amp;&amp; !prevChildren) &#123;</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    var updates = null;</div><div class="line">    var name;</div><div class="line">    var nextIndex = 0;</div><div class="line">    var lastIndex = 0;</div><div class="line">    var nextMountIndex = 0;</div><div class="line">    var lastPlacedNode = null;</div><div class="line"></div><div class="line">    for (name in nextChildren) &#123;</div><div class="line">      if (!nextChildren.hasOwnProperty(name)) &#123;</div><div class="line">        continue;</div><div class="line">      &#125;</div><div class="line">      var prevChild = prevChildren &amp;&amp; prevChildren[name];</div><div class="line">      var nextChild = nextChildren[name];</div><div class="line">      if (prevChild === nextChild) &#123;</div><div class="line">          // 同一个引用，说明是使用的同一个component,所以我们需要做移动的操作</div><div class="line">          // 移动已有的子节点</div><div class="line">          // NOTICE：这里根据nextIndex, lastIndex决定是否移动</div><div class="line">        updates = enqueue(</div><div class="line">          updates,</div><div class="line">          this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex)</div><div class="line">        );</div><div class="line">        </div><div class="line">        // 更新lastIndex</div><div class="line">        lastIndex = Math.max(prevChild._mountIndex, lastIndex);</div><div class="line">        // 更新component的.mountIndex属性</div><div class="line">        prevChild._mountIndex = nextIndex;</div><div class="line">        </div><div class="line">      &#125; else &#123;</div><div class="line">        if (prevChild) &#123;</div><div class="line">          // 更新lastIndex</div><div class="line">          lastIndex = Math.max(prevChild._mountIndex, lastIndex);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        // 添加新的子节点在指定的位置上</div><div class="line">        updates = enqueue(</div><div class="line">          updates,</div><div class="line">          this._mountChildAtIndex(</div><div class="line">            nextChild,</div><div class="line">            mountImages[nextMountIndex],</div><div class="line">            lastPlacedNode,</div><div class="line">            nextIndex,</div><div class="line">            transaction,</div><div class="line">            context</div><div class="line">          )</div><div class="line">        );</div><div class="line">        </div><div class="line">        </div><div class="line">        nextMountIndex++;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      // 更新nextIndex</div><div class="line">      nextIndex++;</div><div class="line">      lastPlacedNode = ReactReconciler.getHostNode(nextChild);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 移除掉不存在的旧子节点，和旧子节点和新子节点不同的旧子节点</div><div class="line">    for (name in removedNodes) &#123;</div><div class="line">      if (removedNodes.hasOwnProperty(name)) &#123;</div><div class="line">        updates = enqueue(</div><div class="line">          updates,</div><div class="line">          this._unmountChild(prevChildren[name], removedNodes[name])</div><div class="line">        );</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>react的优点总结：</p>
<ul>
<li>虚拟节点。在UI方面，不需要立刻更新视图，而是生成虚拟DOM后统一渲染。</li>
<li>组件机制。各个组件独立管理,层层嵌套，互不影响，react内部实现的渲染功能。</li>
<li>差异算法。根据基本元素的key值，判断是否递归更新子节点，还是删除旧节点，添加新节点。</li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;React Native 是最近非常火的一个话题，因为它的语法简介，跨平台等特性，赢得了各大平台的青睐，虽然前期是有一些坑。&lt;/p&gt;
&lt;h2
    
    </summary>
    
      <category term="React Native" scheme="http://www.xiangzhihong.com/categories/React-Native/"/>
    
    
      <category term="前端" scheme="http://www.xiangzhihong.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React Native" scheme="http://www.xiangzhihong.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native之StyleSheet样式表</title>
    <link href="http://www.xiangzhihong.com/2016/10/18/StyleSheet%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
    <id>http://www.xiangzhihong.com/2016/10/18/StyleSheet样式表/</id>
    <published>2016-10-17T16:00:00.000Z</published>
    <updated>2017-07-10T01:41:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在React Native中，StyleSheet是实现了类似Web中CSS样式表的功能。最简单的使用如下，先定一个StyleSheet的样式表，然后在View中引用样式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    borderRadius: 4,</div><div class="line">    borderWidth: 0.5,</div><div class="line">    borderColor: &apos;#d6d7da&apos;,</div><div class="line">  &#125;,</div><div class="line">  title: &#123;</div><div class="line">    fontSize: 19,</div><div class="line">    fontWeight: &apos;bold&apos;,</div><div class="line">  &#125;,</div><div class="line">  activeTitle: &#123;</div><div class="line">    color: &apos;red&apos;,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>view中引用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">  &lt;Text style=&#123;[styles.title, this.props.isActive &amp;&amp; styles.activeTitle]&#125; /&gt;</div><div class="line">&lt;/View&gt;</div></pre></td></tr></table></figure>
<h1 id="StyleSheet样式表的优点"><a href="#StyleSheet样式表的优点" class="headerlink" title="StyleSheet样式表的优点"></a>StyleSheet样式表的优点</h1><p>采用StyleSheet样式表的优点注意如下：<br><strong>从代码质量角度来分析:</strong></p>
<ul>
<li>从render渲染方法中移除了styles样式相关代码，这样可以使代码更加容易阅读</li>
<li>通过对不同样式命名，正好也是对render方法中的组件的一种标志</li>
<li>这样的写法做到了业务和样式的分离，为后面分层开发打下了基础</li>
</ul>
<p><strong>从性能角度来分析:</strong></p>
<ul>
<li>通过StyleSheet，我们可以通过标志的样式ID来引用，而不是每次都要创建一个新的Style对象</li>
<li>该允许样式通过桥接在原生代码和JavaScript中传递一次，后面全部通过该id进行引用(不过现在该功能还没有实现)</li>
</ul>
<h1 id="StyleSheet使用"><a href="#StyleSheet使用" class="headerlink" title="StyleSheet使用"></a>StyleSheet使用</h1><h2 id="调用方法："><a href="#调用方法：" class="headerlink" title="调用方法："></a>调用方法：</h2><p>create(obj:{[key:string]:any})  static 静态方法   通过给定的对象进行常见一个StyleSheet样式</p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ol>
<li><p>.hairlineWidth:CallExpression<br>该用来定义当前平台最细的宽度。该属性用来设置边框或者两个组件之间的分割线。例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    borderBottomColor: &apos;#bbb&apos;,</div><div class="line">    borderBottomWidth: StyleSheet.hairlineWidth</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>flatten: CallExpression<br>使用异常。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var styles = StyleSheet.create(&#123; </div><div class="line">listItem: &#123; </div><div class="line">flex: 1, fontSize: 16, color: &apos;white&apos; &#125;, selectedListItem: &#123; color: &apos;green&apos; &#125; &#125;); </div><div class="line">StyleSheet.flatten([styles.listItem, styles.selectedListItem]) </div><div class="line">// returns &#123; flex: 1, fontSize: 16, color: &apos;green&apos; &#125;</div></pre></td></tr></table></figure>
</li>
</ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;在React Native中，StyleSheet是实现了类似Web中CSS样式表的功能。最简单的使用如下，先定一个StyleSheet的样
    
    </summary>
    
      <category term="React Native" scheme="http://www.xiangzhihong.com/categories/React-Native/"/>
    
    
      <category term="Spring" scheme="http://www.xiangzhihong.com/tags/Spring/"/>
    
      <category term="入门" scheme="http://www.xiangzhihong.com/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot入门</title>
    <link href="http://www.xiangzhihong.com/2016/10/12/Spring%20Boot%E6%90%AD%E5%BB%BAWeb%E5%BA%94%E7%94%A8/"/>
    <id>http://www.xiangzhihong.com/2016/10/12/Spring Boot搭建Web应用/</id>
    <published>2016-10-11T16:00:00.000Z</published>
    <updated>2017-07-10T01:30:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot简介"><a href="#Spring-Boot简介" class="headerlink" title="Spring Boot简介"></a>Spring Boot简介</h1><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式,Spring Boot致力于在蓬勃发展的快速应用开发领域（rapid application development）成为领导者。<br>用一句话：不用自己做配置，搭建速度快，降低学习门槛。</p>
<p>Spring Boot 在 Spring 生态中的位置：<br><img src="http://img.blog.csdn.net/20170221224730657?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="Spring-Boot的特点"><a href="#Spring-Boot的特点" class="headerlink" title="Spring Boot的特点"></a>Spring Boot的特点</h2><ul>
<li>为所有Spring开发者更快的入门</li>
<li>不用看那么一坨xml真的很神清气爽</li>
<li>嵌入的Tomcat，无需部署WAR文件</li>
<li>开箱即用，提供各种默认配置来简化项目配置</li>
</ul>
<p>如：快速在 Java 代码中测试和使用 Spring Boot 的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import org.springframework.boot.*;</div><div class="line">import org.springframework.boot.autoconfigure.*;</div><div class="line">import org.springframework.web.bind.annotation.*;</div><div class="line"></div><div class="line">@RestController</div><div class="line">@EnableAutoConfiguration</div><div class="line">public class Example &#123;</div><div class="line"></div><div class="line">    @RequestMapping(&quot;/&quot;)</div><div class="line">    String home() &#123;</div><div class="line">        return &quot;Hello World!&quot;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        SpringApplication.run(Example.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Spring-Boot使用"><a href="#Spring-Boot使用" class="headerlink" title="Spring Boot使用"></a>Spring Boot使用</h2><p>打开网址：<a href="http://start.spring.io/" target="_blank" rel="external">http://start.spring.io/</a>，按照图中填写信息。<br><img src="http://img.blog.csdn.net/20170221225233050?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>点击Generate Project下载项目压缩包，解压项目包，并用IDE以Maven项目导入</p>
<h2 id="导入Web模块："><a href="#导入Web模块：" class="headerlink" title="导入Web模块："></a>导入Web模块：</h2><p>在pom.xml中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>编写Controller类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">publicclassHelenController&#123; </div><div class="line">@RequestMapping(&quot;/hello&quot;) </div><div class="line">publicStringindex()</div><div class="line">&#123;</div><div class="line">return&quot;hello world&quot;;</div><div class="line">&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样一个入门的hello 就搭建好了。打开浏览器：<a href="http://localhost:8080/hello，你会发现输出：hello" target="_blank" rel="external">http://localhost:8080/hello，你会发现输出：hello</a> word<br>接下来我们要说说Thymeleaf模板。</p>
<h1 id="引入Thymeleaf模板引擎开发web项目"><a href="#引入Thymeleaf模板引擎开发web项目" class="headerlink" title="引入Thymeleaf模板引擎开发web项目"></a>引入Thymeleaf模板引擎开发web项目</h1><h2 id="引入Maven依赖"><a href="#引入Maven依赖" class="headerlink" title="引入Maven依赖"></a>引入Maven依赖</h2><p><img src="http://img.blog.csdn.net/20170222215318842?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h2 id="Controller类及HTML页面"><a href="#Controller类及HTML页面" class="headerlink" title="Controller类及HTML页面"></a>Controller类及HTML页面</h2><p><img src="http://img.blog.csdn.net/20170222215340859?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20170222215429250?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>如上页面，直接打开html页面展现Hello World，但是启动程序后，访问<a href="http://localhost:8080/，则是展示Controller中host的值：从很小就坏，做到了不破坏HTML自身内容的数据逻辑分离。" target="_blank" rel="external">http://localhost:8080/，则是展示Controller中host的值：从很小就坏，做到了不破坏HTML自身内容的数据逻辑分离。</a></p>
<h2 id="Thymeleaf模板"><a href="#Thymeleaf模板" class="headerlink" title="Thymeleaf模板"></a>Thymeleaf模板</h2><p>Thymeleaf是一个XML/XHTML/HTML5模板引擎，可用于Web与非Web环境中的应用开发。它是一个开源的Java库，基于Apache License 2.0许可，由Daniel Fernández创建，该作者还是Java加密库Jasypt的作者。<br>Thymeleaf提供了一个用于整合Spring MVC的可选模块，在应用开发中，你可以使用Thymeleaf来完全代替JSP或其他模板引擎，如Velocity、FreeMarker等。Thymeleaf的主要目标在于提供一种可被浏览器正确显示的、格式良好的模板创建方式，因此也可以用作静态建模。你可以使用它创建经过验证的XML与HTML模板。相对于编写逻辑或代码，开发者只需将标签属性添加到模板中即可。接下来，这些标签属性就会在DOM（文档对象模型）上执行预先制定好的逻辑。</p>
<h1 id="Spring-Boot整合Spring-Security权限"><a href="#Spring-Boot整合Spring-Security权限" class="headerlink" title="Spring Boot整合Spring Security权限"></a>Spring Boot整合Spring Security权限</h1><p>整合Spring Security需要在pom.xml添加依赖<br><img src="http://img.blog.csdn.net/20170222215838814?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>Spring Security配置：<br><img src="http://img.blog.csdn.net/20170222215909881?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<ol>
<li>通过@EnableWebSecurity注解开启Spring Security的功能</li>
<li>继承WebSecurityConfigurerAdapter，并重写它的方法来设置一些web安全的细节</li>
<li>configure(HttpSecurity<br>http)方法通过authorizeRequests()定义哪些URL需要被保护、哪些不需要被保护。例如以上代码指定了/和/home不需要任何认证就可以访问，其他的路径都必须通过身份验证。</li>
<li>通过formLogin()定义当需要用户登录时候，转到的登录页面。</li>
<li>configureGlobal(AuthenticationManagerBuilder<pre><code>auth)方法，在内存中创建了一个用户，该用户的名称为user，密码为password，用户角色为USER。
</code></pre></li>
</ol>
<p>然后在Controller做拦截操作。<br><img src="http://img.blog.csdn.net/20170222220059820?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>结果页面<br><img src="http://img.blog.csdn.net/20170222220127196?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveGlhbmd6aGlob25nOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>最后启动<a href="http://localhost:8080/就可以啦" target="_blank" rel="external">http://localhost:8080/就可以啦</a></p>
<p>附:<a href="http://www.thymeleaf.org/documentation.html" target="_blank" rel="external">thymeleaf 中文文档</a><br><a href="http://www.cnblogs.com/vinphy/p/4673918.html" target="_blank" rel="external">thymeleaf 基础教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Boot简介&quot;&gt;&lt;a href=&quot;#Spring-Boot简介&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot简介&quot;&gt;&lt;/a&gt;Spring Boot简介&lt;/h1&gt;&lt;p&gt;Spring Boot是由Pivotal团队提供的全
    
    </summary>
    
      <category term="Spring" scheme="http://www.xiangzhihong.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://www.xiangzhihong.com/tags/Spring/"/>
    
      <category term="入门" scheme="http://www.xiangzhihong.com/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>React Native在Android平台运行gif的解决方法</title>
    <link href="http://www.xiangzhihong.com/2016/10/08/React%20Native%E5%9C%A8Android%E5%B9%B3%E5%8F%B0%E8%BF%90%E8%A1%8Cgif%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://www.xiangzhihong.com/2016/10/08/React Native在Android平台运行gif的解决方法/</id>
    <published>2016-10-07T16:00:00.000Z</published>
    <updated>2017-07-10T01:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>目前RN在Android平台上不支持gif格式的图片，而在ios平台是支持的，期待以后的版本中系统也是可以默认支持Android的。首先说下在ios平台怎么加载gif呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Image source= &#123;require(&apos;./img/loading.gif&apos;)&#125; style = &#123;styles.loading&#125;/&gt;</div></pre></td></tr></table></figure>
<p>完整实例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">xport default class Loading extends React.Component &#123;  </div><div class="line">    render()&#123;  </div><div class="line">  </div><div class="line">        if (!this.props.isShow) &#123;  </div><div class="line">            return &lt;View /&gt;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        return (  </div><div class="line">            &lt;View style = &#123;styles.container&#125;&gt;  </div><div class="line">                &lt;Image source= &#123;require(&apos;./img/loading.gif&apos;)&#125; style = &#123;styles.loading&#125;/&gt;  </div><div class="line">            &lt;/View&gt;  </div><div class="line">        )  </div><div class="line">    &#125;;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">const styles = StyleSheet.create(&#123;  </div><div class="line">  container:&#123;  </div><div class="line">    backgroundColor: &apos;transparent&apos;,  </div><div class="line">    position: &apos;absolute&apos;,  </div><div class="line">    top: 0,  </div><div class="line">    left: 0,  </div><div class="line">    height: Util.screenSizeUtil.height,  </div><div class="line">    width: Util.screenSizeUtil.width,  </div><div class="line">    alignItems: &apos;center&apos;,  </div><div class="line">    justifyContent: &apos;center&apos;,  </div><div class="line">  </div><div class="line">  &#125;,  </div><div class="line">  loading:&#123;  </div><div class="line">    height:30,  </div><div class="line">    width:30,  </div><div class="line">  &#125;,  </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h1 id="RN在Android平台的解决方法"><a href="#RN在Android平台的解决方法" class="headerlink" title="RN在Android平台的解决方法"></a>RN在Android平台的解决方法</h1><h2 id="facebook-fresco方法"><a href="#facebook-fresco方法" class="headerlink" title="facebook fresco方法"></a>facebook fresco方法</h2><p>要解决上面的问题，方法还是很多的，最简单的莫过于使用facebook的jar支持库，在android/app/build.gradle文件中新增</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.facebook.fresco:animated-gif:0.13.0&apos;</div></pre></td></tr></table></figure>
<p>Fresco是一个强大的图片加载组件，Android 本身的图片库不支持此格式，但是Fresco支持。使用时，和往常一样，仅仅需要提供一个图片的URI即可，剩下的事情，Fresco会处理。<br>如我们运行一个名为loading.gif的图片：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Image source=&#123;&#123;uri:loading&#125;&#125; style=&#123;&#123;width:20,height:20&#125;&#125;/&gt;</div></pre></td></tr></table></figure>
<p>当然网上还有另外的方法，就是自己去实现读取gif图片，对图片资源做拆解，这有点类似于，在很久以前，Android平台也是不支持gif的，出现了自定义view对gif图片进行拆解，然后运行image的方案。有点类似于Android的帧动画，在xml定义图片数组，然后使用Animator来加载。不过这种方法性能差。</p>
<h2 id="自定义组件实现"><a href="#自定义组件实现" class="headerlink" title="自定义组件实现"></a>自定义组件实现</h2><p>将gif切成15张png的图片，暂且命名为loading1、loading2…. loading15。</p>
<h3 id="在构造方法中初始化图片数组"><a href="#在构造方法中初始化图片数组" class="headerlink" title="在构造方法中初始化图片数组"></a>在构造方法中初始化图片数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">//图片数组  </div><div class="line">var loading_imgs = new Array();  </div><div class="line">//最大图片张数  </div><div class="line">const imageLength = 15;  </div><div class="line">//动画使用的数组下标  </div><div class="line">const imageIndex = 0;  </div><div class="line">  </div><div class="line">  </div><div class="line">  constructor(props) &#123;  </div><div class="line">      super(props);  </div><div class="line">      this.state = &#123;  </div><div class="line">          dataSource: new ListView.DataSource(&#123;rowHasChanged: (r1, r2) =&gt; r1 !== r2,&#125;),    </div><div class="line">          ….  </div><div class="line">          imageIndex:imageIndex,  </div><div class="line">      &#125;;  </div><div class="line">        </div><div class="line">//组装图片数组   共15张图片  loading1  -&gt; loading15  </div><div class="line">      for( i=1;i&lt;= imageLength;i++)&#123;  </div><div class="line">        let loadingUri = &quot;loading&quot; + i;  </div><div class="line">        let img = &lt;Image source=&#123;&#123;uri:loadingUri&#125;&#125; key=&#123;i&#125; style=&#123;&#123;width:20,height:20&#125;&#125;/&gt;;  </div><div class="line">        loading_imgs.push(img);  </div><div class="line">      &#125;  </div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="也没渲染"><a href="#也没渲染" class="headerlink" title="也没渲染"></a>也没渲染</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">render() &#123;  </div><div class="line">  return (  </div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;  </div><div class="line">          &lt;View style=&#123;&#123;position:&apos;absolute&apos;, top:-1000&#125;&#125;&gt;  </div><div class="line">            &#123;  </div><div class="line">              loading_imgs.map((item,i)=&gt; loading_imgs[i])  </div><div class="line">            &#125;  </div><div class="line">          &lt;/View&gt;  </div><div class="line">     &lt;/View&gt;  </div><div class="line">)&#125;;</div></pre></td></tr></table></figure>
<h3 id="轮播图片"><a href="#轮播图片" class="headerlink" title="轮播图片"></a>轮播图片</h3><p>每隔100毫秒切换一张图片，当数据加载完毕，清楚定时任务，并且将图片置为第一张。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">图片轮播函数  </div><div class="line">  _loop() &#123;  </div><div class="line">    this.loopCount++;  </div><div class="line">    if (this.loopCount &lt; loading_imgs.length) &#123;  </div><div class="line">        this.setState(&#123;  </div><div class="line">            imageIndex: this.loopCount,  </div><div class="line">        &#125;);  </div><div class="line">    &#125;else &#123;  </div><div class="line">        this.loopCount = -1;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">//轮播图片  </div><div class="line">this.timerPic = setInterval(this._loop.bind(this), 100);  </div><div class="line">  </div><div class="line">//清除图片轮播效果  </div><div class="line">this.timer1 &amp;&amp; clearInterval(this.timer1);  </div><div class="line">this.loopCount = -1;</div></pre></td></tr></table></figure></p>
<p>这样就实现了自己实现对gif运行的实现，不过其性能确实太差，建议使用第一种。</p>
<p>附：<a href="http://lib.csdn.net/xiangzhihong8/5375/chart/React%20Native" target="_blank" rel="external">RN知识库</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;目前RN在Android平台上不支持gif格式的图片，而在ios平台是支持的，期待以后的版本中系统也是可以默认支持Android的。首先说下
    
    </summary>
    
      <category term="React Native" scheme="http://www.xiangzhihong.com/categories/React-Native/"/>
    
    
      <category term="android" scheme="http://www.xiangzhihong.com/tags/android/"/>
    
      <category term="React Native" scheme="http://www.xiangzhihong.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Android WindowManager详解</title>
    <link href="http://www.xiangzhihong.com/2016/10/05/Android%20WindowManager%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.xiangzhihong.com/2016/10/05/Android WindowManager详解/</id>
    <published>2016-10-04T16:00:00.000Z</published>
    <updated>2017-07-09T12:56:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>WindowManager是Android中一个重要的服务（Service ）。WindowManager Service 是全局的，是唯一的。它将用户的操作，翻译成为指令，发送给呈现在界面上的各个Window。Activity会将顶级的控件注册到 Window Manager 中，<br>当用户真是触碰屏幕或键盘的时候，Window Manager就会通知到，而当控件有一些请求产生，也会经由ViewParent送回到Window Manager中。从而完成整个通信流程。<br>整个Android的窗口机制是基于一个叫做 WindowManager，这个接口可以添加view到屏幕，也可以从屏幕删除view。它面向的对象一端是屏幕，另一端就是View，通过WindowManager的 addView方法创建View，这样产生出来的View根据<br>WindowManager.LayoutParams属性不同，效果也就不同了。比如创建 系统顶级窗口，实现悬浮窗口效果！WindowManager的方法很简单，基本用到的就三addView，removeView，updateViewLayout。接口，而WindowManager.LayoutParams的属性就多了，后面为大家一一详解。</p>
<h2 id="WindowManager小实例"><a href="#WindowManager小实例" class="headerlink" title="WindowManager小实例"></a>WindowManager小实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Button bb=new Button(getApplicationContext());  </div><div class="line">WindowManager wmManager=(WindowManager) getSystemService(Context.WINDOW_SERVICE);  </div><div class="line">WindowManager.LayoutParams wmParams = new WindowManager.LayoutParams();  </div><div class="line"></div><div class="line">       wmParams.type=2002;   </div><div class="line">       wmParams.format=1;  </div><div class="line">       </div><div class="line">       wmParams.flags=40;  </div><div class="line">       wmParams.width=40;  </div><div class="line">       wmParams.height=40;  </div><div class="line">         </div><div class="line">       wmManager.addView(bb, wmParams);</div></pre></td></tr></table></figure>
<p>解释：创建了一个Button对象然后通过WindowManager实例对象的addView添加这个ButtonVIew并根据相应的LayoutParams参数进行显示。</p>
<h1 id="WindowManager属性详解"><a href="#WindowManager属性详解" class="headerlink" title="WindowManager属性详解"></a>WindowManager属性详解</h1><p><strong>继承关系</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java.lang.Object</div><div class="line">   ↳android.view.ViewGroup.LayoutParams</div><div class="line">       ↳android.view.WindowManager.LayoutParams</div></pre></td></tr></table></figure>
<p><strong>继承来的属性与常量</strong><br>从 ViewManager.LayoutParams 继承来的属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">android:layout_height</div><div class="line">        Specifies the basic height of the view.</div><div class="line"></div><div class="line">   android:layout_width</div><div class="line">        Specifies the basic width of the view.</div></pre></td></tr></table></figure>
<p>从 ViewManager.LayoutParams继承的常量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">FILL_PARENT</div><div class="line">    WRAP_CONTENT</div><div class="line">    MATCH_PARENT</div></pre></td></tr></table></figure>
<h2 id="其他可用的常量定义"><a href="#其他可用的常量定义" class="headerlink" title="其他可用的常量定义"></a>其他可用的常量定义</h2><p><strong>public int x;</strong><br>如果忽略gravity属性，那么它表示窗口的绝对X位置。<br>当设置了 Gravity.LEFT 或 Gravity.RIGHT 之后，x值就表示到特定边的距离。</p>
<p><strong>public int y;</strong><br>如果忽略gravity属性，那么它表示窗口的绝对Y位置。<br>当设置了 Gravity.TOP 或 Gravity.BOTTOM 之后，y值就表示到特定边的距离。</p>
<p><strong>public float horizontalWeight/public float verticalWeight;</strong><br>在纵/横向上，为关联的view预留了多少扩展空间（像素）。如果是0，那么此view不能被拉伸。其他情况下，扩展空间（像素）将被widget所均分。</p>
<p><strong>public int type;</strong><br>窗口类型。有3种主要类型：<br> a)Applicationwindows：<br>        取值在 FIRST_APPLICATION_WINDOW 和 LAST_APPLICATION_WINDOW 之间。<br>        是通常的、顶层的应用程序窗口。必须将 token 设置成 activity 的 token 。</p>
<p>b)Sub_windows：<br>        取值在 FIRST_SUB_WINDOW 和 LAST_SUB_WINDOW 之间。<br>        与顶层窗口相关联，token 必须设置为它所附着的宿主窗口的 token。</p>
<p>c)Systemwindows：<br>        取值在 FIRST_SYSTEM_WINDOW 和 LAST_SYSTEM_WINDOW 之间。<br>        用于特定的系统功能。它不能用于应用程序，使用时需要特殊权限。</p>
<p><strong>public int memoryType;</strong><br>   指出窗口所使用的内存缓冲类型。默认为 NORMAL 。</p>
<p>下面定义了 memoryType 的取值：<br>窗口缓冲位于主内存。<br>public static final int MEMORY_TYPE_NORMAL = 0;</p>
<p>窗口缓冲位于可以被DMA访问，或者硬件加速的内存区域。<br>public static final int MEMORY_TYPE_HARDWARE = 1;</p>
<p>窗口缓冲位于可被图形加速器访问的区域。<br>public static final int MEMORY_TYPE_GPU = 2;</p>
<p>窗口缓冲不拥有自己的缓冲区，不能被锁定。缓冲区由本地方法提供。<br>public static final int MEMORY_TYPE_PUSH_BUFFERS = 3;</p>
<p><strong>public int flags</strong><br>行为选项/旗标，默认为 none .<br>下面定义了 flags 的取值：<br>窗口之后的内容变暗。<br>public static final int FLAG_DIM_BEHIND       = 0x00000002;</p>
<p>窗口之后的内容变模糊。<br>public static final int FLAG_BLUR_BEHIND       = 0x00000004;</p>
<p>不许获得焦点。<br>public static final int FLAG_NOT_FOCUSABLE     = 0x00000008;</p>
<p>不接受触摸屏事件。<br>public static final int FLAG_NOT_TOUCHABLE     = 0x00000010;</p>
<p>当窗口可以获得焦点（没有设置 FLAG_NOT_FOCUSALBE 选项）时，仍然将窗口范围之外的点设备事件（鼠标、触摸屏）发送给后面的窗口处理。否则它将独占所有的点设备事件，而不管它们是不是发生在窗口范围内。<br>public static final int FLAG_NOT_TOUCH_MODAL   = 0x00000020;</p>
<p> 如果设置了这个标志，当设备休眠时，点击触摸屏，设备将收到这个第一触摸事件。通常第一触摸事件被系统所消耗，用户不会看到他们点击屏幕有什么反应。<br>public static final int FLAG_TOUCHABLE_WHEN_WAKING = 0x00000040;</p>
<p>当此窗口为用户可见时，保持设备常开，并保持亮度不变。<br>public static final int FLAG_KEEP_SCREEN_ON    = 0x00000080;</p>
<p>窗口占满整个屏幕，忽略周围的装饰边框（例如状态栏）。此窗口需考虑到装饰边框的内容。<br>public static final int FLAG_LAYOUT_IN_SCREEN   =0x00000100;</p>
<p>允许窗口扩展到屏幕之外。<br>public static final int FLAG_LAYOUT_NO_LIMITS   =0x00000200;</p>
<p>窗口显示时，隐藏所有的屏幕装饰（例如状态条）。使窗口占用整个显示区域。<br>public static final int FLAG_FULLSCREEN     = 0x00000400;</p>
<p>此选项将覆盖FLAG_FULLSCREEN选项，并强制屏幕装饰（如状态条）弹出。<br>public static final int FLAG_FORCE_NOT_FULLSCREEN   =0x00000800;</p>
<p>抖动。指 对半透明的显示方法。又称“点透”。图形处理较差的设备往往用“点透”替代Alpha混合。<br>public static final int FLAG_DITHER = 0x00001000;</p>
<p>不允许屏幕截图。<br>public static final int FLAG_SECURE           = 0x00002000;</p>
<p>一种特殊模式，布局参数用于指示显示比例。<br>public static final int FLAG_SCALED           = 0x00004000;</p>
<p>当屏幕有可能贴着脸时，这一选项可防止面颊对屏幕造成误操作。<br>public static final int FLAG_IGNORE_CHEEK_PRESSES   = 0x00008000;</p>
<p>当请求布局时，你的窗口可能出现在状态栏的上面或下面，从而造成遮挡。当设置这一选项后，窗口管理器将确保窗口内容不会被装饰条（状态栏）盖住。<br>public static final int FLAG_LAYOUT_INSET_DECOR = 0x00010000;</p>
<p>反转FLAG_NOT_FOCUSABLE选项。<br>如果同时设置了FLAG_NOT_FOCUSABLE选项和本选项，窗口将能够与输入法交互，允许输入法窗口覆盖；      如果FLAG_NOT_FOCUSABLE没有设置而设置了本选项，窗口不能与输入法交互，可以覆盖输入法窗口。<br>public static final int FLAG_ALT_FOCUSABLE_IM = 0x00020000;</p>
<p>如果你设置了FLAG_NOT_TOUCH_MODAL，那么当触屏事件发生在窗口之外事，可以通过设置此标志接收到一个 MotionEvent.ACTION_OUTSIDE事件。注意，你不会收到完整的down/move/up事件，只有第一次down事件时可以收到 ACTION_OUTSIDE。<br>public static final int FLAG_WATCH_OUTSIDE_TOUCH = 0x00040000;</p>
<p>当屏幕锁定时，窗口可以被看到。这使得应用程序窗口优先于锁屏界面。可配合FLAG_KEEP_SCREEN_ON选项点亮屏幕并直接显示在锁屏界面之前。可使用FLAG_DISMISS_KEYGUARD选项直接解除非加锁的锁屏状态。此选项只用于最顶层的全屏幕窗口。      public static final int FLAG_SHOW_WHEN_LOCKED = 0x00080000;</p>
<p>请求系统墙纸显示在你的窗口后面。窗口必须是半透明的。<br>public static final int FLAG_SHOW_WALLPAPER = 0x00100000;</p>
<p>窗口一旦显示出来，系统将点亮屏幕，正如用户唤醒设备那样。<br>public static final int FLAG_TURN_SCREEN_ON = 0x00200000;</p>
<p>解除锁屏。只有锁屏界面不是加密的才能解锁。如果锁屏界面是加密的，那么用户解锁之后才能看到此窗口，除非设置了FLAG_SHOW_WHEN_LOCKED选项。<br>public static final int FLAG_DISMISS_KEYGUARD = 0x00400000;</p>
<p>锁屏界面淡出时，继续运行它的动画。<br>public static final int FLAG_KEEP_SURFACE_WHILE_ANIMATING =0x10000000;</p>
<p>以原始尺寸显示窗口。用于在兼容模式下运行程序。<br>public static final int FLAG_COMPATIBLE_WINDOW = 0x20000000;</p>
<p>用于系统对话框。设置此选项的窗口将无条件获得焦点。<br>public static final int FLAG_SYSTEM_ERROR = 0x40000000;</p>
<p><strong>public int softInputMode</strong>（重要）<br>以下选项与 softInputMode 有关：<br>软输入区域是否可见。<br>public static final int SOFT_INPUT_MASK_STATE = 0x0f;</p>
<p>未指定状态。<br>public static final int SOFT_INPUT_STATE_UNSPECIFIED = 0;</p>
<p>不要修改软输入法区域的状态。<br>public static final int SOFT_INPUT_STATE_UNCHANGED = 1;</p>
<p>隐藏输入法区域（当用户进入窗口时）。<br>public static final int SOFT_INPUT_STATE_HIDDEN = 2;</p>
<p>当窗口获得焦点时，隐藏输入法区域。<br>public static final int SOFT_INPUT_STATE_ALWAYS_HIDDEN = 3;</p>
<p>显示输入法区域（当用户进入窗口时）。<br>public static final int SOFT_INPUT_STATE_VISIBLE = 4;</p>
<p>当窗口获得焦点时，显示输入法区域。<br> public static final int SOFT_INPUT_STATE_ALWAYS_VISIBLE = 5;</p>
<p>窗口应当主动调整，以适应软输入窗口。<br>public static final int SOFT_INPUT_MASK_ADJUST = 0xf0;</p>
<p>未指定状态，系统将根据窗口内容尝试选择一个输入法样式。<br>public static final int SOFT_INPUT_ADJUST_UNSPECIFIED = 0x00;</p>
<p>当输入法显示时，允许窗口重新计算尺寸，使内容不被输入法所覆盖。不可与SOFT_INPUT_ADJUSP_PAN混合使用,如果两个都没有设置，系统将根据窗口内容自动设置一个选项。<br> public static final int SOFT_INPUT_ADJUST_RESIZE = 0x10;</p>
<p>输入法显示时平移窗口。它不需要处理尺寸变化，框架能够移动窗口以确保输入焦点可见。不可与SOFT_INPUT_ADJUST_RESIZE混合使用;如果两个都没设置,系统将根据窗口内容自动设置一个选项。<br> public static final int SOFT_INPUT_ADJUST_PAN = 0x20;</p>
<p>当用户转至此窗口时，由系统自动设置，所以你不要设置它。当窗口显示之后该标志自动清除。<br> public static final int SOFT_INPUT_IS_FORWARD_NAVIGATION = 0x100;</p>
<p><strong>public float horizontalMargin/public float verticalMargin</strong><br>水平边距/ 纵向边距，容器与widget之间的距离，占容器宽度的百分率。</p>
<p><strong>public int windowAnimations</strong><br> 窗口所使用的动画设置。它必须是一个系统资源而不是应用程序资源，因为窗口管理器不能访问应用程序。</p>
<p><strong>public float alpha</strong><br>整个窗口的透明值。</p>
<h2 id="其他常用方法"><a href="#其他常用方法" class="headerlink" title="其他常用方法"></a>其他常用方法</h2><p>public staticfinal int LAYOUT_CHANGED =1&lt;&lt;0;<br>    public staticfinal int TYPE_CHANGED =1&lt;&lt;1;<br>    public staticfinal int FLAGS_CHANGED =1&lt;&lt;2;<br>    public staticfinal int FORMAT_CHANGED =1&lt;&lt;3;<br>    public staticfinal int ANIMATION_CHANGED =1&lt;&lt;4;<br>    public staticfinal int DIM_AMOUNT_CHANGED =1&lt;&lt;5;<br>    public staticfinal int TITLE_CHANGED =1&lt;&lt;6;<br>    public staticfinal int ALPHA_CHANGED =1&lt;&lt;7;<br>    public staticfinal int MEMORY_TYPE_CHANGED =1&lt;&lt;8;<br>    public staticfinal int SOFT_INPUT_MODE_CHANGED =1&lt;&lt;9;<br>    public staticfinal int SCREEN_ORIENTATION_CHANGED =1&lt;&lt;10;<br>    public staticfinal int SCREEN_BRIGHTNESS_CHANGED =1&lt;&lt;11;</p>
<p>当然还有很多，这里列出了一些常用的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;WindowManager是Android中一个重要的服务（Service ）。WindowManager Service 是全局的，是唯一
    
    </summary>
    
      <category term="Android" scheme="http://www.xiangzhihong.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.xiangzhihong.com/tags/Android/"/>
    
      <category term="深入系统" scheme="http://www.xiangzhihong.com/tags/%E6%B7%B1%E5%85%A5%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="系统服务" scheme="http://www.xiangzhihong.com/tags/%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
</feed>
